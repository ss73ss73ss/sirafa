import { useEffect, useState, useRef } from "react";
import { useQuery } from "@tanstack/react-query";
import { useParams, useLocation, Link } from "wouter";
import { Send, Users, Plus, UserPlus } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import DashboardLayout from "@/components/dashboard-layout";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Helmet } from "react-helmet";
import { io, Socket } from "socket.io-client";

// نوع رسالة المجموعة
interface GroupMessage {
  id: number;
  groupId: number;
  senderId: number;
  content: string;
  createdAt: string;
  senderName: string;
}

// نوع عضو المجموعة
interface GroupMember {
  id: number;
  groupId: number;
  userId: number;
  role: string;
  joinedAt: string;
  fullName: string;
}

// نوع مجموعة الدردشة
interface GroupChat {
  id: number;
  name: string;
  description: string | null;
  creatorId: number;
  isPrivate: boolean;
  createdAt: string;
}

// نوع المستخدم المتاح للإضافة
interface AvailableUser {
  id: number;
  fullName: string;
}

export default function GroupChatPage() {
  const { groupId } = useParams<{ groupId: string }>();
  const [_, navigate] = useLocation();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [newMessage, setNewMessage] = useState("");
  const [socket, setSocket] = useState<Socket | null>(null);
  const { toast } = useToast();
  const [addMemberDialogOpen, setAddMemberDialogOpen] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);
  const userId = JSON.parse(localStorage.getItem("user") || "{}").id;
  const [isConnected, setIsConnected] = useState(false);

  // جلب معلومات المجموعة
  const {
    data: group,
    isLoading: isGroupLoading,
    error: groupError,
  } = useQuery({
    queryKey: ['/api/chat/groups', groupId],
    enabled: !!groupId,
    retry: false,
  });

  // جلب رسائل المجموعة
  const {
    data: messages,
    isLoading: isMessagesLoading,
    error: messagesError,
  } = useQuery({
    queryKey: [`/api/chat/groups/${groupId}/messages`],
    enabled: !!groupId,
    refetchOnWindowFocus: false,
  });

  // جلب أعضاء المجموعة
  const {
    data: members,
    isLoading: isMembersLoading,
    error: membersError,
  } = useQuery({
    queryKey: [`/api/chat/groups/${groupId}/members`],
    enabled: !!groupId,
    refetchOnWindowFocus: false,
  });

  // جلب المستخدمين المتاحين للإضافة
  const {
    data: availableUsers,
    isLoading: isAvailableUsersLoading,
  } = useQuery({
    queryKey: ['/api/users/available'],
    enabled: addMemberDialogOpen,
  });

  // تمرير للأسفل عند إضافة رسائل جديدة
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // إعداد اتصال Socket.IO - تنفيذ مبسط نهائي
  useEffect(() => {
    if (!groupId || !userId) return;

    console.log("محاولة الاتصال بخادم Socket.IO...");

    // خيار مبسط للتوافق مع خادم Socket.IO
    const newSocket = io(window.location.origin, {
      path: '/ws'
    });
    
    console.log("تم إنشاء كائن Socket.IO");

    // معالجة الاتصال
    newSocket.on('connect', () => {
      console.log("✅ تم الاتصال بالخادم! معرف Socket:", newSocket.id);
      setIsConnected(true);
      
      // الانضمام إلى غرفة المجموعة باستخدام معرف رقمي
      const numericGroupId = parseInt(groupId);
      newSocket.emit('joinGroupChat', numericGroupId);
      console.log("تم إرسال طلب الانضمام للمجموعة:", numericGroupId);
      
      toast({
        title: "تم الاتصال",
        description: "تم الاتصال بخادم المحادثة بنجاح.",
      });
    });

    // معالجة قطع الاتصال
    newSocket.on('disconnect', (reason) => {
      console.log("❌ انقطع الاتصال بالخادم. السبب:", reason);
      setIsConnected(false);
      
      // محاولة إعادة الاتصال تلقائيًا إذا كان الفصل بسبب خطأ في الخادم
      if (reason === 'io server disconnect') {
        // قطع الاتصال من قبل الخادم، يجب إعادة الاتصال يدويًا
        console.log("محاولة إعادة الاتصال...");
        newSocket.connect();
      }
    });

    // معالجة استلام تاريخ المحادثة
    newSocket.on('groupChatHistory', (data) => {
      console.log("تم استلام تاريخ المحادثة:", data);
      if (data && data.groupId === parseInt(groupId)) {
        queryClient.setQueryData([`/api/chat/groups/${groupId}/messages`], data.messages || []);
      }
    });
    
    // معالجة الرسائل الجديدة
    newSocket.on('newGroupMessage', (data) => {
      console.log("تم استلام رسالة جديدة:", data);
      
      try {
        // التأكد من أن البيانات المستلمة صالحة
        if (data && typeof data === 'object') {
          const numericGroupId = parseInt(groupId);
          
          // التحقق من أن الرسالة تنتمي للمجموعة الحالية
          if (data.groupId === numericGroupId) {
            console.log("إضافة رسالة جديدة للمجموعة:", numericGroupId);
            
            // إضافة الرسالة الجديدة إلى بداية المصفوفة
            queryClient.setQueryData(
              [`/api/chat/groups/${groupId}/messages`],
              (oldData: GroupMessage[] = []) => {
                console.log("تحديث قائمة الرسائل، عدد الرسائل السابقة:", oldData.length);
                return [data, ...oldData];
              }
            );
            
            // التمرير للأسفل عند وصول رسالة جديدة
            setTimeout(() => {
              messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
            }, 100);
          }
        }
      } catch (error) {
        console.error("خطأ في معالجة الرسالة الجديدة:", error);
      }
    });

    // معالجة الأخطاء
    newSocket.on('connect_error', (error) => {
      console.error("❌ خطأ في اتصال Socket.IO:", error);
      setIsConnected(false);
      toast({
        variant: "destructive",
        title: "خطأ في الاتصال",
        description: "فشل الاتصال بخادم المحادثة. يرجى تحديث الصفحة أو المحاولة مرة أخرى لاحقًا.",
      });
    });

    // معالجة رسائل الخطأ من الخادم
    newSocket.on('error', (data) => {
      console.error("❌ خطأ من الخادم:", data);
      toast({
        variant: "destructive",
        title: "خطأ",
        description: data && data.message ? data.message : "حدث خطأ في المحادثة",
      });
    });

    // تخزين الاتصال
    setSocket(newSocket);

    // تنظيف عند إلغاء التحميل
    return () => {
      console.log("🧹 تنظيف اتصال Socket.IO");
      newSocket.off('connect');
      newSocket.off('disconnect');
      newSocket.off('groupChatHistory');
      newSocket.off('newGroupMessage');
      newSocket.off('connect_error');
      newSocket.off('error');
      newSocket.disconnect();
    };
  }, [groupId, userId, toast, queryClient]);

  // إرسال رسالة جديدة - تم إعادة كتابة الدالة للتوافق مع التغييرات
  const sendMessage = () => {
    if (!socket || !isConnected || !newMessage.trim() || !userId || !groupId) {
      console.log("❌ لا يمكن إرسال الرسالة:", {
        متصل: isConnected,
        الاتصال: !!socket,
        نص_الرسالة: newMessage.trim(),
        معرف_المستخدم: userId,
        معرف_المجموعة: groupId
      });
      
      if (!isConnected) {
        toast({
          variant: "destructive",
          title: "غير متصل بالخادم",
          description: "يرجى الانتظار حتى يتم الاتصال بخادم المحادثة أو تحديث الصفحة.",
        });
      }
      return;
    }

    console.log("📤 محاولة إرسال رسالة:", newMessage);

    try {
      // تحويل معرف المجموعة إلى رقم
      const numericGroupId = parseInt(groupId);
      
      // إنشاء بيانات الرسالة
      const messageData = {
        userId: userId,
        groupId: numericGroupId,
        content: newMessage.trim()
      };
      
      console.log("بيانات الرسالة للإرسال:", messageData);
      
      // إرسال الرسالة عبر Socket.IO
      socket.emit('sendGroupMessage', messageData);
      
      // تسجيل نجاح الإرسال
      console.log("✅ تم إرسال الرسالة من العميل");
      
      // مسح حقل الإدخال
      setNewMessage("");
    } catch (error) {
      console.error("❌ خطأ أثناء إرسال الرسالة:", error);
      toast({
        variant: "destructive",
        title: "فشل إرسال الرسالة",
        description: "حدث خطأ أثناء محاولة إرسال الرسالة. يرجى المحاولة مرة أخرى.",
      });
    }
  }
  };

  // معالجة إضافة عضو جديد
  const handleAddMember = async () => {
    if (!selectedUserId || !groupId) {
      toast({
        variant: "destructive",
        title: "خطأ",
        description: "يرجى اختيار مستخدم لإضافته",
      });
      return;
    }

    try {
      const res = await apiRequest(
        "POST",
        `/api/chat/groups/${groupId}/members`,
        { memberId: selectedUserId, role: "member" }
      );

      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.message || "فشل في إضافة العضو");
      }

      // تحديث قائمة الأعضاء
      queryClient.invalidateQueries({ queryKey: [`/api/chat/groups/${groupId}/members`] });
      
      toast({
        title: "تمت الإضافة بنجاح",
        description: "تم إضافة العضو الجديد إلى المجموعة",
      });
      
      setAddMemberDialogOpen(false);
      setSelectedUserId(null);
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "خطأ",
        description: error.message || "حدث خطأ أثناء إضافة العضو",
      });
    }
  };

  // التحقق مما إذا كان المستخدم الحالي هو مسؤول المجموعة
  const isAdmin = Array.isArray(members) && members.some(
    (member: GroupMember) => member.userId === userId && member.role === "admin"
  );

  // تنسيق رسائل المجموعة (الأحدث في الأسفل)
  const formattedMessages = [...(messages || [])].reverse();

  if (isGroupLoading) {
    return (
      <DashboardLayout>
        <div className="flex items-center justify-center min-h-[300px]">
          <div className="loader"></div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout>
      <Helmet>
        <title>{group && 'name' in group ? group.name : "مجموعة محادثة"} | منصة الصرافة</title>
        <meta name="description" content={`محادثة جماعية - ${group && 'name' in group ? group.name : ""}`} />
      </Helmet>

      <div className="container py-6 max-w-screen-xl mx-auto">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* معلومات المجموعة وقائمة الأعضاء */}
          <div className="lg:col-span-1">
            <Card className="p-4 mb-4">
              <h2 className="text-xl font-bold mb-2">{group && 'name' in group ? group.name : "مجموعة"}</h2>
              {group && 'description' in group && group.description && (
                <p className="text-gray-600 mb-4">{group.description}</p>
              )}
              <div className="flex items-center space-x-2 mb-2">
                <Users size={18} />
                <span className="text-sm mr-2">
                  {Array.isArray(members) ? members.length : 0} عضو
                </span>
              </div>
              <div className="flex items-center justify-between mt-2">
                <div className="flex items-center">
                  <div className={`w-3 h-3 rounded-full mr-2 ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                  <span className="text-sm">
                    {isConnected ? 'متصل بالخادم' : 'غير متصل بالخادم'}
                  </span>
                </div>
                {!isConnected && (
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => window.location.reload()}
                  >
                    إعادة الاتصال
                  </Button>
                )}
              </div>
              <div className="mt-4">
                <Link href="/dashboard">
                  <Button variant="outline" size="sm" className="w-full">
                    العودة إلى لوحة التحكم
                  </Button>
                </Link>
              </div>
            </Card>

            <Card className="p-4">
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-bold">الأعضاء</h3>
                {isAdmin && (
                  <Dialog open={addMemberDialogOpen} onOpenChange={setAddMemberDialogOpen}>
                    <DialogTrigger asChild>
                      <Button size="sm" variant="outline">
                        <UserPlus size={16} className="ml-2" />
                        إضافة عضو
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="sm:max-w-[425px]">
                      <DialogHeader>
                        <DialogTitle>إضافة عضو جديد</DialogTitle>
                        <DialogDescription>
                          اختر مستخدماً لإضافته إلى مجموعة {group?.name}
                        </DialogDescription>
                      </DialogHeader>
                      <div className="grid gap-4 py-4">
                        <Select
                          value={selectedUserId?.toString() || ""}
                          onValueChange={(value) => setSelectedUserId(parseInt(value))}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="اختر مستخدماً" />
                          </SelectTrigger>
                          <SelectContent>
                            {isAvailableUsersLoading ? (
                              <SelectItem value="loading" disabled>
                                جاري التحميل...
                              </SelectItem>
                            ) : (
                              availableUsers
                                ?.filter((user: AvailableUser) => 
                                  !members?.some((member: GroupMember) => member.userId === user.id)
                                )
                                .map((user: AvailableUser) => (
                                  <SelectItem key={user.id} value={user.id.toString()}>
                                    {user.fullName}
                                  </SelectItem>
                                ))
                            )}
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="flex justify-end gap-3">
                        <DialogClose asChild>
                          <Button variant="outline">إلغاء</Button>
                        </DialogClose>
                        <Button type="button" onClick={handleAddMember}>
                          إضافة
                        </Button>
                      </div>
                    </DialogContent>
                  </Dialog>
                )}
              </div>

              {isMembersLoading ? (
                <div className="flex justify-center p-4">
                  <div className="loader"></div>
                </div>
              ) : (
                <ScrollArea className="h-[300px] pr-4">
                  <div className="space-y-2">
                    {Array.isArray(members) && members.map((member: GroupMember) => (
                      <div
                        key={member.id}
                        className="flex items-center justify-between p-2 rounded-md hover:bg-gray-100"
                      >
                        <span>{member.fullName}</span>
                        {member.role === "admin" && (
                          <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                            مدير
                          </span>
                        )}
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              )}
            </Card>
          </div>

          {/* منطقة المحادثة */}
          <div className="lg:col-span-3 flex flex-col h-[calc(100vh-220px)]">
            <Card className="flex-1 mb-4 p-4 overflow-hidden">
              {isMessagesLoading ? (
                <div className="flex justify-center items-center h-full">
                  <div className="loader"></div>
                </div>
              ) : formattedMessages.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full text-gray-500">
                  <p className="mb-2">لا توجد رسائل بعد</p>
                  <p>كن أول من يبدأ المحادثة في هذه المجموعة</p>
                </div>
              ) : (
                <ScrollArea className="h-full pr-4">
                  <div className="space-y-4">
                    {formattedMessages.map((message: GroupMessage) => (
                      <div
                        key={message.id}
                        className={`flex ${
                          message.senderId === userId ? "justify-end" : "justify-start"
                        }`}
                      >
                        <div
                          className={`max-w-[80%] px-4 py-2 rounded-lg ${
                            message.senderId === userId
                              ? "bg-blue-500 text-white"
                              : "bg-gray-100"
                          }`}
                        >
                          {message.senderId !== userId && (
                            <div className="font-bold text-sm text-gray-600 mb-1">
                              {message.senderName}
                            </div>
                          )}
                          <div className="text-sm">{message.content}</div>
                          <div className="text-xs mt-1 opacity-70">
                            {new Date(message.createdAt).toLocaleTimeString("ar-LY", {
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </div>
                        </div>
                      </div>
                    ))}
                    <div ref={messagesEndRef} />
                  </div>
                </ScrollArea>
              )}
            </Card>

            <div className="flex flex-col gap-2">
              <div className="flex gap-2">
                <Input
                  placeholder="اكتب رسالتك هنا..."
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault();
                      sendMessage();
                    }
                  }}
                  dir="rtl"
                  disabled={!isConnected}
                />
                <Button 
                  onClick={sendMessage} 
                  size="icon" 
                  disabled={!isConnected}
                  title={isConnected ? "إرسال" : "غير متصل بالخادم"}
                >
                  <Send size={18} />
                </Button>
              </div>
              {!isConnected && (
                <div className="text-center text-sm text-red-500">
                  غير متصل بخادم المحادثة. يرجى الانتظار حتى يتم الاتصال أو تحديث الصفحة.
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}