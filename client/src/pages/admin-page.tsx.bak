import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/use-auth";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { UpgradeRequest } from "@shared/schema";
import { formatDate } from "@/lib/utils";
import { AlertCircle, ArrowLeft, CheckCircle, Download, ExternalLink, FileText, Filter, Loader2, Search, ShieldAlert, X } from "lucide-react";
import { AlertCircle, CheckCircle, FileText, Filter, Loader2, X, ExternalLink, Download, ArrowLeft, Search, ShieldAlert } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  AlertCircle,
  FileText,
  ArrowLeft, 
  CheckCircle, 
  Loader2, 
  Search, 
  ShieldAlert, 
  X 
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

// Type for enhanced upgrade request with user email
interface AdminUpgradeRequest extends UpgradeRequest {
  userEmail: string;
}

// واجهة لبيانات طلب التوثيق
interface VerificationRequest {
  id: number;
  userId: number;
  userEmail: string;
  fullName: string;
  phoneNumber: string;
  city: string;
  address: string;
  idType: string;
  status: 'not_started' | 'pending' | 'verified' | 'rejected';
  createdAt: string;
  reviewedAt?: string;
  notes?: string;
}

export default function AdminPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [, navigate] = useLocation();
  const [activeTab, setActiveTab] = useState("upgrade-requests");
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState<string>("all");
  
  // طلبات الترقية
  const [selectedRequest, setSelectedRequest] = useState<AdminUpgradeRequest | null>(null);
  const [dialogAction, setDialogAction] = useState<"approve" | "reject" | null>(null);
  const [reviewNotes, setReviewNotes] = useState("");
  const [dialogOpen, setDialogOpen] = useState(false);
  
  // طلبات التوثيق
  const [selectedVerification, setSelectedVerification] = useState<VerificationRequest | null>(null);
  const [verificationDialogOpen, setVerificationDialogOpen] = useState(false);

  // Update document title
  useEffect(() => {
    document.title = "لوحة تحكم المشرف - صرافة الخليج";
  }, []);

  // Fetch all upgrade requests
  const { 
    data: requests, 
    isLoading: isLoadingRequests,
    refetch: refetchRequests
  } = useQuery<AdminUpgradeRequest[]>({
    queryKey: ["/api/admin/upgrade-requests"],
    enabled: !!user && user.type === "admin",
  });
  
  // Fetch all verification requests - في المستقبل سنضيف واجهة برمجة التطبيقات الفعلية
  const { 
    data: verifications, 
    isLoading: isLoadingVerifications,
    refetch: refetchVerifications
  } = useQuery<VerificationRequest[]>({
    queryKey: ["/api/admin/verification-requests"],
    enabled: false, // تعطيل الاستعلام حتى تكون واجهة برمجة التطبيقات جاهزة
    // سنستخدم بيانات تجريبية في الوقت الحالي
  });

  // Check user permission
  if (!user || user.type !== "admin") {
    return (
      <div className="min-h-screen bg-neutral-100 flex items-center justify-center">
        <Card className="w-full max-w-md border-0 shadow-md">
          <CardHeader className="pb-4">
            <CardTitle className="text-xl text-center">
              <ShieldAlert className="h-8 w-8 mx-auto mb-2 text-red-500" />
              غير مصرح بالوصول
            </CardTitle>
          </CardHeader>
          <CardContent className="text-center">
            <p className="mb-4 text-neutral-600">
              هذه الصفحة مخصصة للمسؤولين فقط. ليس لديك صلاحيات كافية للوصول.
            </p>
            <Button onClick={() => navigate("/dashboard")}>
              العودة إلى لوحة التحكم
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Filter requests
  const filteredRequests = requests?.filter((request) => {
    const matchesSearch =
      searchTerm === "" ||
      request.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      request.userEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||
      request.phone.includes(searchTerm) ||
      request.city.toLowerCase().includes(searchTerm.toLowerCase());

    const matchesStatus =
      filterStatus === "all" || request.status === filterStatus;

    return matchesSearch && matchesStatus;
  });

  // Update request status mutation
  const statusMutation = useMutation({
    mutationFn: async ({ 
      id, 
      status, 
      notes 
    }: { 
      id: number; 
      status: "approved" | "rejected"; 
      notes?: string;
    }) => {
      const res = await apiRequest("PATCH", `/api/admin/upgrade-requests/${id}`, {
        status,
        notes,
      });
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: dialogAction === "approve" ? "تمت الموافقة على الطلب" : "تم رفض الطلب",
        description: "تم تحديث حالة الطلب بنجاح",
      });
      
      // Reset state and refetch
      setDialogOpen(false);
      setReviewNotes("");
      setSelectedRequest(null);
      refetchRequests();
    },
    onError: (error: Error) => {
      toast({
        title: "فشل تحديث حالة الطلب",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Handle approve/reject
  const handleStatusUpdate = () => {
    if (!selectedRequest || !dialogAction) return;
    
    // Convert dialogAction to correct status format
    const status = dialogAction === "approve" ? "approved" : "rejected";
    
    statusMutation.mutate({
      id: selectedRequest.id,
      status: status,
      notes: reviewNotes || undefined,
    });
  };

  // Handle open dialog
  const openDialog = (request: AdminUpgradeRequest, action: "approve" | "reject") => {
    setSelectedRequest(request);
    setDialogAction(action);
    setReviewNotes("");
    setDialogOpen(true);
  };

  // Get badge for request status
  const getStatusBadge = (status: string) => {
    switch (status) {
      case "pending":
        return (
          <Badge variant="outline" className="bg-yellow-100 text-yellow-800 border-yellow-300">
            قيد المراجعة
          </Badge>
        );
      case "approved":
        return (
          <Badge variant="outline" className="bg-green-100 text-green-800 border-green-300">
            تمت الموافقة
          </Badge>
        );
      case "rejected":
        return (
          <Badge variant="outline" className="bg-red-100 text-red-800 border-red-300">
            مرفوض
          </Badge>
        );
      default:
        return null;
    }
  };

  // إعداد بيانات تجريبية لطلبات التوثيق (سيتم استبدالها بالبيانات الفعلية لاحقًا)
  const [mockVerifications, setMockVerifications] = useState<VerificationRequest[]>([
    {
      id: 1,
      userId: 3,
      userEmail: "f2@f.com",
      fullName: "ss2",
      phoneNumber: "0919851330",
      city: "طرابلس",
      address: "شارع الاستقلال، طرابلس",
      idType: "بطاقة هوية شخصية",
      status: "pending",
      createdAt: new Date().toISOString(),
    },
    {
      id: 2,
      userId: 5,
      userEmail: "v1@v1.com",
      fullName: "vvv1",
      phoneNumber: "0919851330",
      city: "بنغازي",
      address: "Alhdba Alkadra, Alkiza",
      idType: "جواز سفر",
      status: "pending",
      createdAt: new Date().toISOString(),
    }
  ]);

  // تصفية طلبات التوثيق
  const filteredVerifications = mockVerifications?.filter((verification) => {
    const matchesSearch =
      searchTerm === "" ||
      verification.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      verification.userEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||
      verification.phoneNumber.includes(searchTerm) ||
      verification.city.toLowerCase().includes(searchTerm.toLowerCase());

    const matchesStatus =
      filterStatus === "all" || verification.status === filterStatus;

    return matchesSearch && matchesStatus;
  });

  // معالجة طلبات التوثيق
  const handleVerificationAction = (verification: VerificationRequest, action: "approve" | "reject") => {
    setSelectedVerification(verification);
    setDialogAction(action);
    setReviewNotes("");
    setVerificationDialogOpen(true);
  };

  // mutation لتحديث حالة طلب التوثيق
  const verificationStatusMutation = useMutation({
    mutationFn: async ({ 
      id, 
      status, 
      notes 
    }: { 
      id: number; 
      status: "verified" | "rejected"; 
      notes?: string;
    }) => {
      // هنا سنضيف لاحقًا الاتصال بواجهة برمجة التطبيقات لتحديث حالة الطلب
      return { success: true, message: "تم تحديث حالة الطلب بنجاح" };
    },
    onSuccess: () => {
      toast({
        title: dialogAction === "approve" ? "تمت الموافقة على طلب التوثيق" : "تم رفض طلب التوثيق",
        description: "تم تحديث حالة الطلب بنجاح",
      });
      
      // إعادة تعيين الحالة
      setVerificationDialogOpen(false);
      setReviewNotes("");
      setSelectedVerification(null);
      // في المستقبل سنقوم بتحديث البيانات بعد الاستجابة
    },
    onError: (error: Error) => {
      toast({
        title: "فشل تحديث حالة الطلب",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // معالجة تحديث حالة طلب التوثيق
  const handleVerificationUpdate = () => {
    if (!selectedVerification || !dialogAction) return;
    
    // تحويل الإجراء إلى التنسيق الصحيح للحالة
    const newStatus = dialogAction === "approve" ? "verified" : "rejected";
    
    // تحديث حالة الطلبات في قائمة البيانات التجريبية
    const updatedVerifications = mockVerifications.map(verification => {
      if (verification.id === selectedVerification.id) {
        return {
          ...verification,
          status: newStatus as "pending" | "not_started" | "verified" | "rejected",
          reviewedAt: new Date().toISOString()
        };
      }
      return verification;
    });
    
    // تحديث البيانات في حالة التطبيق
    setMockVerifications(updatedVerifications);
    
    // عرض رسالة نجاح
    toast({
      title: dialogAction === "approve" ? "تمت الموافقة على طلب التوثيق" : "تم رفض طلب التوثيق",
      description: "تم تحديث حالة الطلب بنجاح",
    });
    
    // إغلاق مربع الحوار وإعادة تعيين القيم
    setVerificationDialogOpen(false);
    setSelectedVerification(null);
    setReviewNotes("");
    
    // في التطبيق الفعلي، سنقوم بالاتصال بواجهة برمجة التطبيقات كما يلي:
    /*
    verificationStatusMutation.mutate({
      id: selectedVerification.id,
      status: newStatus,
      notes: reviewNotes || undefined,
    });
    */
  };
  
  // إعداد متغيرات مربع حوار عرض المستند
  const [documentDialogOpen, setDocumentDialogOpen] = useState(false);
  const [selectedDocument, setSelectedDocument] = useState<{ userId: number; documentUrl: string } | null>(null);
  
  // معالجة عرض مستند المستخدم
  const handleViewDocument = (verification: VerificationRequest) => {
    // هنا سنقوم بإعداد المستند (في المستقبل سيتم جلبه من قاعدة البيانات)
    // حاليًا نستخدم مستند تجريبي
    
    // في الوضع الفعلي، سيتم استخدام مستندات المستخدم المخزنة
    // استخدم مستندات تجريبية مختلفة حسب نوع المستند المختار
    let documentUrl = "";
    
    if (verification.idType === "بطاقة هوية شخصية") {
      documentUrl = "https://upload.wikimedia.org/wikipedia/commons/3/34/Sample_Saudi_Arabian_ID_Card.png";
    } else if (verification.idType === "جواز سفر") {
      documentUrl = "https://upload.wikimedia.org/wikipedia/commons/8/86/Biometric_Passport.png";
    } else {
      documentUrl = "https://via.placeholder.com/1200x1600.png?text=وثيقة+هوية+المستخدم";
    }
    
    setSelectedDocument({
      userId: verification.userId,
      documentUrl: documentUrl
    });
    
    setDocumentDialogOpen(true);
  };

  return (
    <div className="min-h-screen bg-neutral-100">
      <div className="container mx-auto px-4 py-8" dir="rtl">
        
        {/* مربع حوار تأكيد طلب التوثيق */}
        <Dialog open={verificationDialogOpen} onOpenChange={setVerificationDialogOpen}>
          <DialogContent className="sm:max-w-md" dir="rtl">
            <DialogHeader>
              <DialogTitle>
                {dialogAction === "approve" ? "الموافقة على طلب التوثيق" : "رفض طلب التوثيق"}
              </DialogTitle>
              <DialogDescription>
                {dialogAction === "approve"
                  ? "هل أنت متأكد من الموافقة على طلب توثيق هذا الحساب؟"
                  : "هل أنت متأكد من رفض طلب توثيق هذا الحساب؟"
                }
              </DialogDescription>
            </DialogHeader>
            
            {selectedVerification && (
              <div className="space-y-4 py-4">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-bold">الاسم: </span>
                    <span>{selectedVerification.fullName}</span>
                  </div>
                  <div>
                    <span className="font-bold">البريد الإلكتروني: </span>
                    <span>{selectedVerification.userEmail}</span>
                  </div>
                  <div>
                    <span className="font-bold">الهاتف: </span>
                    <span>{selectedVerification.phoneNumber}</span>
                  </div>
                  <div>
                    <span className="font-bold">المدينة: </span>
                    <span>{selectedVerification.city}</span>
                  </div>
                  <div>
                    <span className="font-bold">نوع الهوية: </span>
                    <span>{selectedVerification.idType}</span>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    ملاحظات المراجعة (اختياري):
                  </label>
                  <Textarea
                    placeholder="أضف ملاحظات حول قرار الموافقة أو الرفض..."
                    value={reviewNotes}
                    onChange={(e) => setReviewNotes(e.target.value)}
                    className="resize-none h-24"
                  />
                </div>
              </div>
            )}
            
            <DialogFooter className="sm:justify-start">
              <Button
                type="button"
                variant={dialogAction === "approve" ? "default" : "destructive"}
                onClick={handleVerificationUpdate}
                disabled={verificationStatusMutation.isPending}
              >
                {verificationStatusMutation.isPending ? (
                  <>
                    <Loader2 className="ml-2 h-4 w-4 animate-spin" />
                    جارٍ التنفيذ...
                  </>
                ) : dialogAction === "approve" ? (
                  "موافقة"
                ) : (
                  "رفض"
                )}
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={() => setVerificationDialogOpen(false)}
                disabled={verificationStatusMutation.isPending}
              >
                إلغاء
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
        <Button
          variant="ghost"
          className="mb-6 flex items-center gap-2"
          onClick={() => navigate("/dashboard")}
        >
          <ArrowLeft className="h-4 w-4" />
          العودة إلى لوحة التحكم
        </Button>

        <Tabs className="w-full" defaultValue="upgrade-requests" onValueChange={setActiveTab}>
          <TabsList className="mb-6 grid grid-cols-2 w-full max-w-md mx-auto">
            <TabsTrigger value="upgrade-requests">طلبات الترقية</TabsTrigger>
            <TabsTrigger value="verification-requests">طلبات التوثيق</TabsTrigger>
          </TabsList>
          
          <TabsContent value="upgrade-requests">
            <Card className="border-0 shadow-md">
              <CardHeader className="pb-4">
                <CardTitle className="text-2xl font-bold">إدارة طلبات ترقية الحسابات</CardTitle>
                <CardDescription>
                  قم بمراجعة طلبات ترقية الحسابات إلى مكاتب صرافة والموافقة عليها أو رفضها
                </CardDescription>
              </CardHeader>
              <CardContent>
                {/* Filter Controls */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                  <div className="relative w-full sm:w-64">
                    <Search className="absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-neutral-400" />
                    <Input
                      className="pr-10"
                      placeholder="بحث..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>
                  <div className="flex space-x-4 space-x-reverse">
                    <Button
                      variant={filterStatus === "all" ? "default" : "outline"}
                      onClick={() => setFilterStatus("all")}
                      size="sm"
                    >
                      الكل
                    </Button>
                    <Button
                      variant={filterStatus === "pending" ? "default" : "outline"}
                      onClick={() => setFilterStatus("pending")}
                      size="sm"
                      className={filterStatus === "pending" ? "bg-yellow-500 hover:bg-yellow-600" : ""}
                    >
                      قيد المراجعة
                    </Button>
                    <Button
                      variant={filterStatus === "approved" ? "default" : "outline"}
                      onClick={() => setFilterStatus("approved")}
                      size="sm"
                      className={filterStatus === "approved" ? "bg-green-500 hover:bg-green-600" : ""}
                    >
                      تمت الموافقة
                    </Button>
                    <Button
                      variant={filterStatus === "rejected" ? "default" : "outline"}
                      onClick={() => setFilterStatus("rejected")}
                      size="sm"
                      className={filterStatus === "rejected" ? "bg-red-500 hover:bg-red-600" : ""}
                    >
                      مرفوض
                    </Button>
                  </div>
                </div>

                {/* Requests Table */}
                {isLoadingRequests ? (
                  <div className="flex justify-center items-center py-12">
                    <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
                  </div>
                ) : requests?.length === 0 ? (
                  <Alert>
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>لا توجد طلبات</AlertTitle>
                    <AlertDescription>
                      لا يوجد أي طلبات ترقية في النظام حتى الآن
                    </AlertDescription>
                  </Alert>
                ) : filteredRequests?.length === 0 ? (
                  <Alert>
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>لا توجد نتائج</AlertTitle>
                    <AlertDescription>
                      لا يوجد أي طلبات تطابق معايير البحث أو التصفية
                    </AlertDescription>
                  </Alert>
                ) : (
                  <div className="overflow-x-auto">
                    <Table>
                      <TableCaption>قائمة طلبات ترقية الحسابات</TableCaption>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="text-right">الاسم</TableHead>
                          <TableHead className="text-right">البريد الإلكتروني</TableHead>
                          <TableHead className="text-right">الهاتف</TableHead>
                          <TableHead className="text-right">المدينة</TableHead>
                          <TableHead className="text-right">العمولة المقترحة</TableHead>
                          <TableHead className="text-right">الحالة</TableHead>
                          <TableHead className="text-right">تاريخ الطلب</TableHead>
                          <TableHead className="text-right">إجراءات</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredRequests?.map((request) => (
                          <TableRow key={request.id} className="group">
                            <TableCell className="font-medium">{request.fullName}</TableCell>
                            <TableCell>{request.userEmail}</TableCell>
                            <TableCell>{request.phone}</TableCell>
                            <TableCell>{request.city}</TableCell>
                            <TableCell>{request.commissionRate}%</TableCell>
                            <TableCell>{getStatusBadge(request.status)}</TableCell>
                            <TableCell>
                              {formatDate(request.createdAt?.toString() || "")}
                            </TableCell>
                            <TableCell>
                              {request.status === "pending" ? (
                                <div className="flex space-x-2 space-x-reverse opacity-0 group-hover:opacity-100 transition-opacity">
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="h-8 border-green-500 text-green-500 hover:bg-green-50"
                                    onClick={() => openDialog(request, "approve")}
                                  >
                                    <CheckCircle className="h-4 w-4 ml-1" />
                                    قبول
                                  </Button>
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    className="h-8 border-red-500 text-red-500 hover:bg-red-50"
                                    onClick={() => openDialog(request, "reject")}
                                  >
                                    <X className="h-4 w-4 ml-1" />
                                    رفض
                                  </Button>
                                </div>
                              ) : request.status === "approved" ? (
                                <span className="text-green-600 text-sm">تمت الموافقة</span>
                              ) : (
                                <span className="text-red-600 text-sm">تم الرفض</span>
                              )}
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="verification-requests">
            <Card className="border-0 shadow-md">
              <CardHeader className="pb-4">
                <CardTitle className="text-2xl font-bold">إدارة طلبات توثيق الحسابات</CardTitle>
                <CardDescription>
                  قم بمراجعة طلبات توثيق الحسابات للمستخدمين والموافقة عليها أو رفضها
                </CardDescription>
              </CardHeader>
              <CardContent>
                {/* Filter Controls */}
                <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
                  <div className="relative w-full sm:w-64">
                    <Search className="absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-neutral-400" />
                    <Input
                      className="pr-10"
                      placeholder="بحث..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>
                  <div className="flex space-x-4 space-x-reverse">
                    <Button
                      variant={filterStatus === "all" ? "default" : "outline"}
                      onClick={() => setFilterStatus("all")}
                      size="sm"
                    >
                      الكل
                    </Button>
                    <Button
                      variant={filterStatus === "pending" ? "default" : "outline"}
                      onClick={() => setFilterStatus("pending")}
                      size="sm"
                      className={filterStatus === "pending" ? "bg-yellow-500 hover:bg-yellow-600" : ""}
                    >
                      قيد المراجعة
                    </Button>
                    <Button
                      variant={filterStatus === "verified" ? "default" : "outline"}
                      onClick={() => setFilterStatus("verified")}
                      size="sm"
                      className={filterStatus === "verified" ? "bg-green-500 hover:bg-green-600" : ""}
                    >
                      تم التوثيق
                    </Button>
                    <Button
                      variant={filterStatus === "rejected" ? "default" : "outline"}
                      onClick={() => setFilterStatus("rejected")}
                      size="sm"
                      className={filterStatus === "rejected" ? "bg-red-500 hover:bg-red-600" : ""}
                    >
                      مرفوض
                    </Button>
                  </div>
                </div>

                {/* Verification Requests Table */}
                <div className="overflow-x-auto">
                  <Table>
                    <TableCaption>قائمة طلبات توثيق الحسابات</TableCaption>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-right">الاسم</TableHead>
                        <TableHead className="text-right">البريد الإلكتروني</TableHead>
                        <TableHead className="text-right">الهاتف</TableHead>
                        <TableHead className="text-right">المدينة</TableHead>
                        <TableHead className="text-right">نوع الهوية</TableHead>
                        <TableHead className="text-right">الحالة</TableHead>
                        <TableHead className="text-right">تاريخ الطلب</TableHead>
                        <TableHead className="text-right">إجراءات</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredVerifications?.map((verification) => (
                        <TableRow key={verification.id} className="group">
                          <TableCell className="font-medium">{verification.fullName}</TableCell>
                          <TableCell>{verification.userEmail}</TableCell>
                          <TableCell>{verification.phoneNumber}</TableCell>
                          <TableCell>{verification.city}</TableCell>
                          <TableCell>{verification.idType}</TableCell>
                          <TableCell>{getStatusBadge(verification.status)}</TableCell>
                          <TableCell>
                            {formatDate(verification.createdAt)}
                          </TableCell>
                          <TableCell>
                            {verification.status === "pending" ? (
                              <div className="flex space-x-2 space-x-reverse">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="h-8 border-green-500 text-green-500 hover:bg-green-50"
                                  onClick={() => handleVerificationAction(verification, "approve")}
                                >
                                  <CheckCircle className="h-4 w-4 ml-1" />
                                  قبول
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="h-8 border-red-500 text-red-500 hover:bg-red-50"
                                  onClick={() => handleVerificationAction(verification, "reject")}
                                >
                                  <X className="h-4 w-4 ml-1" />
                                  رفض
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="h-8 border-blue-500 text-blue-500 hover:bg-blue-50"
                                  onClick={() => handleViewDocument(verification)}
                                >
                                  <FileText className="h-4 w-4 ml-1" />
                                  عرض المستند
                                </Button>
                              </div>
                            ) : (
                              <div className="flex space-x-2 space-x-reverse">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="h-8 border-blue-500 text-blue-500 hover:bg-blue-50"
                                  onClick={() => handleViewDocument(verification)}
                                >
                                  <FileText className="h-4 w-4 ml-1" />
                                  عرض المستند
                                </Button>
                                {verification.status === "verified" ? (
                                  <span className="text-green-600 text-sm flex items-center">
                                    <CheckCircle className="h-4 w-4 ml-1" />
                                    تم التوثيق
                                  </span>
                                ) : (
                                  <span className="text-red-600 text-sm flex items-center">
                                    <X className="h-4 w-4 ml-1" />
                                    تم الرفض
                                  </span>
                                )}
                              </div>
                            )}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* Confirmation Dialog */}
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="sm:max-w-md" dir="rtl">
          <DialogHeader>
            <DialogTitle>
              {dialogAction === "approve" ? "الموافقة على طلب الترقية" : "رفض طلب الترقية"}
            </DialogTitle>
            <DialogDescription>
              {dialogAction === "approve"
                ? "هل أنت متأكد من الموافقة على طلب ترقية هذا الحساب إلى مكتب صرافة؟"
                : "هل أنت متأكد من رفض طلب ترقية هذا الحساب؟"
              }
            </DialogDescription>
          </DialogHeader>
          
          {selectedRequest && (
            <div className="space-y-4 py-4">
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-bold">الاسم: </span>
                  <span>{selectedRequest.fullName}</span>
                </div>
                <div>
                  <span className="font-bold">البريد الإلكتروني: </span>
                  <span>{selectedRequest.userEmail}</span>
                </div>
                <div>
                  <span className="font-bold">الهاتف: </span>
                  <span>{selectedRequest.phone}</span>
                </div>
                <div>
                  <span className="font-bold">المدينة: </span>
                  <span>{selectedRequest.city}</span>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">
                  ملاحظات المراجعة (اختياري):
                </label>
                <Textarea
                  placeholder="أضف ملاحظات حول قرار الموافقة أو الرفض..."
                  value={reviewNotes}
                  onChange={(e) => setReviewNotes(e.target.value)}
                  className="resize-none h-24"
                />
              </div>
            </div>
          )}
          
          <DialogFooter className="sm:justify-start">
            <Button
              type="button"
              variant={dialogAction === "approve" ? "default" : "destructive"}
              onClick={handleStatusUpdate}
              disabled={statusMutation.isPending}
            >
              {statusMutation.isPending ? (
                <>
                  <Loader2 className="ml-2 h-4 w-4 animate-spin" />
                  جارٍ التنفيذ...
                </>
              ) : dialogAction === "approve" ? (
                "موافقة"
              ) : (
                "رفض"
              )}
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={() => setDialogOpen(false)}
              disabled={statusMutation.isPending}
            >
              إلغاء
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* مربع حوار عرض المستند */}
      <Dialog open={documentDialogOpen} onOpenChange={setDocumentDialogOpen}>
        <DialogContent className="md:max-w-4xl lg:max-w-5xl h-auto max-h-[90vh] overflow-y-auto" dir="rtl">
          <DialogHeader>
            <DialogTitle>
              عرض مستند المستخدم
            </DialogTitle>
            <DialogDescription>
              مستندات الهوية المرفوعة من قبل المستخدم
            </DialogDescription>
          </DialogHeader>
          
          {selectedDocument && (
            <div className="space-y-4 py-4">
              <div className="rounded-md border overflow-hidden p-1 bg-white">
                <img 
                  src={selectedDocument.documentUrl} 
                  alt="مستند المستخدم" 
                  className="w-full object-contain max-h-[60vh]"
                />
              </div>
              <div className="flex justify-between">
                <div className="text-sm text-gray-500">
                  يمكنك تكبير المستند أو تحميله للاطلاع بوضوح أكبر
                </div>
                <a 
                  href={selectedDocument.documentUrl} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="text-primary hover:underline text-sm flex items-center"
                >
                  <span className="ml-1">فتح في نافذة جديدة</span>
                  <ExternalLink className="h-4 w-4" />
                </a>
              </div>
            </div>
          )}
          
          <DialogFooter className="flex justify-between space-y-2 sm:space-y-0 pt-4 border-t">
            <a 
              href={selectedDocument?.documentUrl} 
              download="document.png"
              className="bg-green-600 text-white px-4 py-2 rounded-md text-sm flex items-center hover:bg-green-700"
            >
              <DownloadIcon className="h-4 w-4 ml-2" />
              تحميل المستند
            </a>
            <Button
              type="button"
              variant="outline"
              onClick={() => setDocumentDialogOpen(false)}
            >
              إغلاق
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}