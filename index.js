var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// shared/schema.ts
var schema_exports = {};
__export(schema_exports, {
  adminSettings: () => adminSettings,
  adminTransactions: () => adminTransactions,
  agentCommissions: () => agentCommissions,
  agentOffices: () => agentOffices,
  agentTransfers: () => agentTransfers,
  auditLogs: () => auditLogs,
  badgeTypes: () => badgeTypes,
  balances: () => balances,
  bulkSystemCommissionSettingsSchema: () => bulkSystemCommissionSettingsSchema,
  changePasswordSchema: () => changePasswordSchema,
  chatMessageReads: () => chatMessageReads,
  chatMessages: () => chatMessages,
  chatRooms: () => chatRooms,
  cities: () => cities,
  cityTransferCommissions: () => cityTransferCommissions,
  cityTransferSchema: () => cityTransferSchema,
  cityTransfers: () => cityTransfers,
  commissionLogs: () => commissionLogs,
  commissionPoolTransactions: () => commissionPoolTransactions,
  countries: () => countries2,
  devAssets: () => devAssets,
  devAuditLogs: () => devAuditLogs,
  devBlocks: () => devBlocks,
  devComponentVersions: () => devComponentVersions,
  devComponents: () => devComponents,
  devFeatureFlags: () => devFeatureFlags,
  devFunctionVersions: () => devFunctionVersions,
  devFunctions: () => devFunctions,
  devNavItems: () => devNavItems,
  devPages: () => devPages,
  devReleaseItems: () => devReleaseItems,
  devReleases: () => devReleases,
  devThemes: () => devThemes,
  disable2FASchema: () => disable2FASchema,
  enable2FASchema: () => enable2FASchema,
  exchangeRates: () => exchangeRates,
  exportJobs: () => exportJobs,
  externalTransferLimitSchema: () => externalTransferLimitSchema,
  externalTransferRequestSchema: () => externalTransferRequestSchema2,
  groupChats: () => groupChats,
  groupMembers: () => groupMembers,
  groupMessages: () => groupMessages,
  hiddenTransfers: () => hiddenTransfers,
  insertAdminSettingSchema: () => insertAdminSettingSchema,
  insertAgentCommissionSchema: () => insertAgentCommissionSchema,
  insertAgentTransferSchema: () => insertAgentTransferSchema,
  insertAuditLogSchema: () => insertAuditLogSchema,
  insertBadgeTypeSchema: () => insertBadgeTypeSchema,
  insertBalanceSchema: () => insertBalanceSchema,
  insertChatMessageSchema: () => insertChatMessageSchema,
  insertChatRoomSchema: () => insertChatRoomSchema,
  insertCityTransferCommissionSchema: () => insertCityTransferCommissionSchema,
  insertCityTransferSchema: () => insertCityTransferSchema,
  insertCommissionLogsSchema: () => insertCommissionLogsSchema,
  insertCommissionPoolTransactionSchema: () => insertCommissionPoolTransactionSchema,
  insertDevAssetSchema: () => insertDevAssetSchema,
  insertDevAuditLogSchema: () => insertDevAuditLogSchema,
  insertDevBlockSchema: () => insertDevBlockSchema,
  insertDevComponentSchema: () => insertDevComponentSchema,
  insertDevFeatureFlagSchema: () => insertDevFeatureFlagSchema,
  insertDevFunctionSchema: () => insertDevFunctionSchema,
  insertDevNavItemSchema: () => insertDevNavItemSchema,
  insertDevPageSchema: () => insertDevPageSchema,
  insertDevReleaseSchema: () => insertDevReleaseSchema,
  insertDevThemeSchema: () => insertDevThemeSchema,
  insertExchangeRateSchema: () => insertExchangeRateSchema,
  insertExportJobSchema: () => insertExportJobSchema,
  insertGroupChatSchema: () => insertGroupChatSchema,
  insertGroupMemberSchema: () => insertGroupMemberSchema,
  insertGroupMessageSchema: () => insertGroupMessageSchema,
  insertHiddenTransferSchema: () => insertHiddenTransferSchema,
  insertInternalTransferLogSchema: () => insertInternalTransferLogSchema,
  insertInternationalTransferNewSchema: () => insertInternationalTransferNewSchema,
  insertInternationalTransferSchema: () => insertInternationalTransferSchema,
  insertMarketOfferSchema: () => insertMarketOfferSchema,
  insertMarketTransactionSchema: () => insertMarketTransactionSchema,
  insertMessageLikeSchema: () => insertMessageLikeSchema,
  insertMessageVoiceSchema: () => insertMessageVoiceSchema,
  insertOfficeCommissionSchema: () => insertOfficeCommissionSchema,
  insertOfficeCountryCommissionSchema: () => insertOfficeCountryCommissionSchema,
  insertPageRestrictionSchema: () => insertPageRestrictionSchema,
  insertPointsHistorySchema: () => insertPointsHistorySchema,
  insertPrivateChatSchema: () => insertPrivateChatSchema,
  insertPrivateMessageSchema: () => insertPrivateMessageSchema,
  insertPushSubscriptionSchema: () => insertPushSubscriptionSchema,
  insertReceiptAuditLogSchema: () => insertReceiptAuditLogSchema,
  insertReceiptSchema: () => insertReceiptSchema,
  insertReceiptSettingsSchema: () => insertReceiptSettingsSchema,
  insertReferralRewardSchema: () => insertReferralRewardSchema,
  insertRewardSchema: () => insertRewardSchema,
  insertRewardSettingsSchema: () => insertRewardSettingsSchema,
  insertSecurityLogSchema: () => insertSecurityLogSchema,
  insertSigningKeySchema: () => insertSigningKeySchema,
  insertSystemCommissionSettingsSchema: () => insertSystemCommissionSettingsSchema,
  insertSystemSettingsSchema: () => insertSystemSettingsSchema,
  insertTransactionLogSchema: () => insertTransactionLogSchema,
  insertTransactionSchema: () => insertTransactionSchema,
  insertTransferSchema: () => insertTransferSchema,
  insertUpgradeRequestSchema: () => insertUpgradeRequestSchema,
  insertUser2FASchema: () => insertUser2FASchema,
  insertUserBadgeSchema: () => insertUserBadgeSchema,
  insertUserNotificationSchema: () => insertUserNotificationSchema,
  insertUserPointsSchema: () => insertUserPointsSchema,
  insertUserReceiveSettingsSchema: () => insertUserReceiveSettingsSchema,
  insertUserRewardSchema: () => insertUserRewardSchema,
  insertUserSchema: () => insertUserSchema,
  insertUserSettingsSchema: () => insertUserSettingsSchema,
  insertVerificationRequestSchema: () => insertVerificationRequestSchema,
  insertVoiceRateLimitSchema: () => insertVoiceRateLimitSchema,
  insertVoiceSettingsSchema: () => insertVoiceSettingsSchema,
  internalTransferLogs: () => internalTransferLogs,
  internationalTransfers: () => internationalTransfers,
  internationalTransfersNew: () => internationalTransfersNew,
  loginSchema: () => loginSchema,
  marketBids: () => marketBids,
  marketChannels: () => marketChannels,
  marketDeals: () => marketDeals,
  marketMessages: () => marketMessages,
  marketOfferSchema: () => marketOfferSchema,
  marketOffers: () => marketOffers,
  marketTransactions: () => marketTransactions,
  messageLikes: () => messageLikes,
  messageVoices: () => messageVoices,
  newInternationalTransfers: () => newInternationalTransfers,
  officeCommissions: () => officeCommissions,
  officeCountryCommissions: () => officeCountryCommissions,
  pageRestrictions: () => pageRestrictions,
  passwordResetConfirmSchema: () => passwordResetConfirmSchema,
  passwordResetRequestSchema: () => passwordResetRequestSchema,
  passwordResetRequests: () => passwordResetRequests,
  pointsHistory: () => pointsHistory,
  privateChats: () => privateChats,
  privateMessages: () => privateMessages,
  pushSubscriptions: () => pushSubscriptions,
  receiptAuditLog: () => receiptAuditLog2,
  receiptSettings: () => receiptSettings,
  receipts: () => receipts2,
  referralBalances: () => referralBalances,
  referralRewards: () => referralRewards,
  rewardSettings: () => rewardSettings,
  rewards: () => rewards,
  securityLogs: () => securityLogs,
  signingKeys: () => signingKeys,
  systemCommissionRates: () => systemCommissionRates,
  systemCommissionSettings: () => systemCommissionSettings,
  systemCommissionSettingsSchema: () => systemCommissionSettingsSchema,
  systemSettings: () => systemSettings,
  transactionLogs: () => transactionLogs,
  transactions: () => transactions,
  transferSchema: () => transferSchema,
  transfers: () => transfers,
  updateUserProfileSchema: () => updateUserProfileSchema,
  upgradeRequestSchema: () => upgradeRequestSchema,
  upgradeRequests: () => upgradeRequests,
  user2FA: () => user2FA,
  userBadges: () => userBadges,
  userNotifications: () => userNotifications,
  userPoints: () => userPoints,
  userReceiveSettings: () => userReceiveSettings2,
  userRewards: () => userRewards,
  userSettings: () => userSettings,
  users: () => users,
  verificationRequestSchema: () => verificationRequestSchema,
  verificationRequests: () => verificationRequests,
  verify2FASchema: () => verify2FASchema,
  voiceRateLimits: () => voiceRateLimits,
  voiceSettings: () => voiceSettings
});
import { pgTable, text, serial, integer, boolean, timestamp, numeric, unique, json, uuid, index } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var users, userSettings, user2FA, adminTransactions, transactions, balances, transfers, internalTransferLogs, cities, upgradeRequests, marketChannels, marketOffers, marketBids, marketDeals, marketMessages, marketTransactions, cityTransfers, internationalTransfersNew, internationalTransfers, officeCommissions, officeCountryCommissions, adminSettings, userNotifications, verificationRequests, agentTransfers, transactionLogs, exchangeRates, exportJobs, insertUserSchema, insertTransactionSchema, insertBalanceSchema, insertTransferSchema, insertUpgradeRequestSchema, insertMarketOfferSchema, insertMarketTransactionSchema, insertCityTransferSchema, insertInternationalTransferSchema, insertInternationalTransferNewSchema, insertAgentTransferSchema, insertVerificationRequestSchema, insertTransactionLogSchema, insertExchangeRateSchema, insertExportJobSchema, upgradeRequestSchema, verificationRequestSchema, marketOfferSchema, transferSchema, loginSchema, chatRooms, chatMessages, messageLikes, chatMessageReads, privateChats, privateMessages, groupChats, groupMembers, groupMessages, insertChatRoomSchema, insertChatMessageSchema, insertPrivateChatSchema, insertPrivateMessageSchema, insertMessageLikeSchema, insertGroupChatSchema, insertGroupMemberSchema, insertGroupMessageSchema, insertOfficeCommissionSchema, insertOfficeCountryCommissionSchema, insertAdminSettingSchema, insertUserNotificationSchema, cityTransferSchema, agentCommissions, insertAgentCommissionSchema, cityTransferCommissions, insertCityTransferCommissionSchema, commissionPoolTransactions, insertCommissionPoolTransactionSchema, systemCommissionRates, passwordResetRequests, insertUserSettingsSchema, updateUserProfileSchema, changePasswordSchema, passwordResetRequestSchema, passwordResetConfirmSchema, insertUser2FASchema, enable2FASchema, verify2FASchema, disable2FASchema, countries2, agentOffices, newInternationalTransfers, userReceiveSettings2, pushSubscriptions, insertUserReceiveSettingsSchema, insertPushSubscriptionSchema, systemCommissionSettings, insertSystemCommissionSettingsSchema, systemCommissionSettingsSchema, bulkSystemCommissionSettingsSchema, commissionLogs, insertCommissionLogsSchema, systemSettings, referralRewards, referralBalances, insertReferralRewardSchema, insertSystemSettingsSchema, insertInternalTransferLogSchema, receipts2, insertReceiptSchema, receiptAuditLog2, insertReceiptAuditLogSchema, signingKeys, insertSigningKeySchema, receiptSettings, insertReceiptSettingsSchema, messageVoices, voiceSettings, voiceRateLimits, insertMessageVoiceSchema, insertVoiceSettingsSchema, insertVoiceRateLimitSchema, externalTransferRequestSchema2, externalTransferLimitSchema, hiddenTransfers, insertHiddenTransferSchema, badgeTypes, userPoints, userBadges, pointsHistory, rewards, userRewards, rewardSettings, insertBadgeTypeSchema, insertUserPointsSchema, insertUserBadgeSchema, insertPointsHistorySchema, insertRewardSchema, insertUserRewardSchema, insertRewardSettingsSchema, pageRestrictions, auditLogs, insertPageRestrictionSchema, insertAuditLogSchema, devPages, devBlocks, devComponents, devComponentVersions, devFunctions, devFunctionVersions, devThemes, devFeatureFlags, devNavItems, devAssets, devReleases, devReleaseItems, devAuditLogs, insertDevPageSchema, insertDevBlockSchema, insertDevComponentSchema, insertDevFunctionSchema, insertDevThemeSchema, insertDevFeatureFlagSchema, insertDevNavItemSchema, insertDevAssetSchema, insertDevReleaseSchema, insertDevAuditLogSchema, securityLogs, insertSecurityLogSchema;
var init_schema = __esm({
  "shared/schema.ts"() {
    "use strict";
    users = pgTable("users", {
      id: serial("id").primaryKey(),
      fullName: text("full_name").notNull(),
      officeName: text("office_name").notNull(),
      // اسم المكتب - حقل ملزم
      officeAddress: text("office_address"),
      // عنوان المكتب
      countryId: integer("country_id").references(() => countries2.id),
      countryName: text("country_name"),
      cityId: integer("city_id").references(() => cities.id),
      cityName: text("city_name"),
      email: text("email").notNull().unique(),
      phone: text("phone"),
      accountNumber: text("account_number").unique(),
      // رقم الحساب الفريد للمستخدم
      password: text("password").notNull(),
      type: text("type").notNull().default("user"),
      // "user", "office", "agent", "admin"
      adminLevel: integer("admin_level").default(0),
      // 0: عادي، 1: مدير نظام محدود، 2: مدير عام
      // صلاحيات الإدارة التفصيلية
      canManageUsers: boolean("can_manage_users").default(false),
      // إدارة المستخدمين
      canManageMarket: boolean("can_manage_market").default(false),
      // مراقبة صفحة السوق
      canManageChat: boolean("can_manage_chat").default(false),
      // مراقبة الدردشة
      canManageInternalTransfers: boolean("can_manage_internal_transfers").default(false),
      // التحويل الداخلي
      canManageExternalTransfers: boolean("can_manage_external_transfers").default(false),
      // التحويل الخارجي
      canManageNewAccounts: boolean("can_manage_new_accounts").default(false),
      // الحسابات الجديدة
      canManageSecurity: boolean("can_manage_security").default(false),
      // الدخول المشبوه والأمان
      canManageSupport: boolean("can_manage_support").default(false),
      // الرد على الاستفسارات
      canManageReports: boolean("can_manage_reports").default(false),
      // التقارير والإحصائيات
      canManageSettings: boolean("can_manage_settings").default(false),
      // إعدادات النظام
      // نظام الإحالة
      referralCode: text("referral_code").unique(),
      // رمز الإحالة الفريد للمستخدم
      referredBy: integer("referred_by").references(() => users.id),
      // المستخدم الذي أحال هذا المستخدم
      referredAt: timestamp("referred_at"),
      // تاريخ الإحالة
      city: text("city"),
      // المدينة التي يتبع لها المكتب
      commissionRate: numeric("commission_rate").default("1"),
      // نسبة العمولة التي يحصل عليها المكتب (النسبة المئوية)
      countriesSupported: text("countries_supported").array(),
      // الدول التي يدعمها المكتب للحوالات الدولية
      verified: boolean("verified").default(false),
      // حالة توثيق الحساب
      active: boolean("active").default(true),
      // حالة تفعيل الحساب
      avatarUrl: text("avatar_url"),
      // صورة الملف الشخصي
      // أعمدة التحويل الخارجي الجديدة
      extTransferEnabled: boolean("ext_transfer_enabled").default(false),
      // مفعّل/غير مفعّل
      extDailyLimit: numeric("ext_daily_limit").default("0"),
      // حد يومي
      extMonthlyLimit: numeric("ext_monthly_limit").default("0"),
      // حد شهري
      extAllowedCurrencies: text("ext_allowed_currencies").array().default([]),
      // عملات مسموحة
      extAllowedCountries: text("ext_allowed_countries").array().default([]),
      // دول مسموحة (ISO-2)
      createdAt: timestamp("created_at").defaultNow()
    });
    userSettings = pgTable("user_settings", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id).unique(),
      language: text("language").default("ar"),
      // ar, en
      theme: text("theme").default("auto"),
      // light, dark, auto
      timezone: text("timezone").default("Africa/Tripoli"),
      baseCurrency: text("base_currency").default("LYD"),
      notifications: json("notifications").default({
        email: true,
        push: true,
        security: true,
        marketing: false
      }),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    user2FA = pgTable("user_2fa", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id).unique(),
      isEnabled: boolean("is_enabled").default(false),
      // حالة تفعيل المصادقة الثنائية
      secret: text("secret"),
      // المفتاح السري للـ TOTP
      backupCodes: text("backup_codes").array().default([]),
      // رموز النسخ الاحتياطي (10 رموز)
      lastUsedAt: timestamp("last_used_at"),
      // آخر استخدام للمصادقة الثنائية
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    adminTransactions = pgTable("admin_transactions", {
      id: uuid("id").primaryKey().defaultRandom(),
      refNo: text("ref_no").notNull().unique(),
      // رقم مرجعي فريد
      type: text("type").notNull(),
      // INTERNAL_TRANSFER, SALE, PURCHASE, EXTERNAL_REMIT, OFFICE_REMIT, DEPOSIT, WITHDRAW, FEE, ADJUSTMENT
      status: text("status").notNull().default("PENDING"),
      // PENDING, SUCCESS, FAILED, CANCELLED, REVERSED, ON_HOLD
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow(),
      executedAt: timestamp("executed_at"),
      fromAccountId: text("from_account_id"),
      toAccountId: text("to_account_id"),
      userId: integer("user_id").notNull().references(() => users.id),
      officeId: integer("office_id"),
      cityFrom: text("city_from"),
      cityTo: text("city_to"),
      currency: text("currency").notNull(),
      amount: numeric("amount").notNull(),
      rate: numeric("rate"),
      feeSystem: numeric("fee_system"),
      feeRecipient: numeric("fee_recipient"),
      netAmount: numeric("net_amount").notNull(),
      channel: text("channel").notNull().default("WEB"),
      // WEB, MOBILE, DESKTOP, API
      createdBy: integer("created_by").notNull().references(() => users.id),
      approvedBy: integer("approved_by").references(() => users.id),
      kycLevel: integer("kyc_level"),
      riskScore: integer("risk_score"),
      flags: json("flags"),
      parentTxnId: uuid("parent_txn_id").references(() => adminTransactions.id),
      externalProvider: text("external_provider"),
      externalRef: text("external_ref"),
      notes: text("notes"),
      meta: json("meta")
    }, (table) => ({
      refNoIdx: index("admin_transactions_ref_no_idx").on(table.refNo),
      typeCreatedAtIdx: index("admin_transactions_type_created_at_idx").on(table.type, table.createdAt),
      statusCreatedAtIdx: index("admin_transactions_status_created_at_idx").on(table.status, table.createdAt),
      userIdCreatedAtIdx: index("admin_transactions_user_id_created_at_idx").on(table.userId, table.createdAt),
      fromAccountIdIdx: index("admin_transactions_from_account_id_idx").on(table.fromAccountId),
      toAccountIdIdx: index("admin_transactions_to_account_id_idx").on(table.toAccountId),
      executedAtIdx: index("admin_transactions_executed_at_idx").on(table.executedAt)
    }));
    transactions = pgTable("transactions", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      type: text("type").notNull(),
      // "exchange", "transfer", "receive"
      amount: text("amount").notNull(),
      currency: text("currency").notNull(),
      description: text("description"),
      referenceNumber: text("reference_number"),
      // الرقم المرجعي للمعاملة
      date: timestamp("date").defaultNow()
    });
    balances = pgTable("balances", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      currency: text("currency").notNull(),
      amount: numeric("amount").notNull().default("0")
    }, (table) => {
      return {
        userCurrencyUnique: unique().on(table.userId, table.currency)
      };
    });
    transfers = pgTable("transfers", {
      id: serial("id").primaryKey(),
      senderId: integer("sender_id").notNull().references(() => users.id),
      receiverId: integer("receiver_id").notNull().references(() => users.id),
      amount: numeric("amount").notNull(),
      commission: numeric("commission").notNull(),
      currency: text("currency").notNull().default("LYD"),
      referenceNumber: text("reference_number").unique(),
      // رقم مرجعي فريد للتحويل
      note: text("note"),
      transferKind: text("transfer_kind").notNull().default("internal"),
      // "internal", "external"
      destinationCountry: text("destination_country"),
      // الدولة المقصودة للتحويل الخارجي
      createdAt: timestamp("created_at").defaultNow()
    });
    internalTransferLogs = pgTable("internal_transfer_logs", {
      id: serial("id").primaryKey(),
      transferId: integer("transfer_id").notNull().references(() => transfers.id),
      referenceNumber: text("reference_number"),
      // الرقم المرجعي للتحويل
      senderName: text("sender_name").notNull(),
      senderAccountNumber: text("sender_account_number").notNull(),
      receiverName: text("receiver_name").notNull(),
      receiverAccountNumber: text("receiver_account_number").notNull(),
      amount: numeric("amount").notNull(),
      commission: numeric("commission").notNull(),
      currency: text("currency").notNull(),
      note: text("note"),
      status: text("status").notNull().default("completed"),
      // completed, failed
      ipAddress: text("ip_address"),
      userAgent: text("user_agent"),
      createdAt: timestamp("created_at").defaultNow()
    });
    cities = pgTable("cities", {
      id: serial("id").primaryKey(),
      countryId: integer("country_id").notNull().references(() => countries2.id),
      nameAr: text("name_ar").notNull(),
      nameEn: text("name_en"),
      isActive: boolean("is_active").notNull().default(true)
    });
    upgradeRequests = pgTable("upgrade_requests", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      requestType: text("request_type").notNull(),
      // "external_transfer", "agent_upgrade"
      fullName: text("full_name"),
      phone: text("phone"),
      city: text("city"),
      // يُستخدم لطلب "agent_upgrade" فقط
      commissionRate: numeric("commission_rate").default("0"),
      // يُستخدم لطلب "agent_upgrade" فقط
      // حقول التحويل الخارجي الجديدة
      countryId: integer("country_id").references(() => countries2.id),
      cityId: integer("city_id").references(() => cities.id),
      cityNameManual: text("city_name_manual"),
      // إذا كتب المدينة يدوياً
      message: text("message"),
      requestedLimits: json("requested_limits"),
      // { "daily": 5000, "monthly": 20000, "currencies": ["USD","EUR"], "countries": ["TN","TR"] }
      documents: json("documents"),
      // مفاتيح مرفقات/روابط تحقق
      status: text("status").notNull().default("pending"),
      // "pending", "approved", "rejected"
      createdAt: timestamp("created_at").defaultNow(),
      decidedAt: timestamp("decided_at"),
      decidedBy: integer("decided_by").references(() => users.id),
      reviewNotes: text("review_notes")
    });
    marketChannels = pgTable("market_channels", {
      id: serial("id").primaryKey(),
      name: text("name").notNull(),
      description: text("description"),
      isActive: boolean("is_active").default(true),
      createdAt: timestamp("created_at").defaultNow()
    });
    marketOffers = pgTable("market_offers", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      side: text("side").notNull(),
      // "buy", "sell"
      baseCurrency: text("base_currency").notNull(),
      quoteCurrency: text("quote_currency").notNull(),
      price: numeric("price", { precision: 15, scale: 6 }).notNull(),
      minAmount: numeric("min_amount", { precision: 15, scale: 2 }).notNull(),
      maxAmount: numeric("max_amount", { precision: 15, scale: 2 }).notNull(),
      remainingAmount: numeric("remaining_amount", { precision: 15, scale: 2 }).notNull(),
      city: text("city"),
      deliverType: text("deliver_type").default("internal_transfer"),
      terms: text("terms"),
      status: text("status").default("open"),
      // "open", "partial", "filled", "cancelled"
      commissionDeducted: boolean("commission_deducted").default(false),
      // تتبع إذا تم خصم العمولة مرة واحدة فقط
      expiresAt: timestamp("expires_at"),
      // موعد انتهاء العرض
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    marketBids = pgTable("market_bids", {
      id: serial("id").primaryKey(),
      offerId: integer("offer_id").notNull().references(() => marketOffers.id),
      userId: integer("user_id").notNull().references(() => users.id),
      amount: numeric("amount", { precision: 15, scale: 2 }).notNull(),
      price: numeric("price", { precision: 15, scale: 6 }).notNull(),
      message: text("message"),
      status: text("status").default("pending"),
      // "pending", "accepted", "rejected", "expired"
      createdAt: timestamp("created_at").defaultNow(),
      expiresAt: timestamp("expires_at")
    });
    marketDeals = pgTable("market_deals", {
      id: serial("id").primaryKey(),
      offerId: integer("offer_id").notNull().references(() => marketOffers.id),
      bidId: integer("bid_id").references(() => marketBids.id),
      sellerId: integer("seller_id").notNull().references(() => users.id),
      buyerId: integer("buyer_id").notNull().references(() => users.id),
      amount: numeric("amount", { precision: 15, scale: 2 }).notNull(),
      price: numeric("price", { precision: 15, scale: 6 }).notNull(),
      totalValue: numeric("total_value", { precision: 15, scale: 2 }).notNull(),
      baseCurrency: text("base_currency").notNull(),
      quoteCurrency: text("quote_currency").notNull(),
      status: text("status").default("pending"),
      // "pending", "paid", "confirmed", "disputed", "completed", "cancelled"
      escrowReleased: boolean("escrow_released").default(false),
      createdAt: timestamp("created_at").defaultNow(),
      completedAt: timestamp("completed_at")
    });
    marketMessages = pgTable("market_messages", {
      id: serial("id").primaryKey(),
      channelId: integer("channel_id").default(1).references(() => marketChannels.id),
      userId: integer("user_id").notNull().references(() => users.id),
      type: text("type").default("MESSAGE"),
      // "MESSAGE", "OFFER", "BID", "DEAL", "SYSTEM"
      content: text("content").notNull(),
      offerId: integer("offer_id").references(() => marketOffers.id),
      bidId: integer("bid_id").references(() => marketBids.id),
      dealId: integer("deal_id").references(() => marketDeals.id),
      createdAt: timestamp("created_at").defaultNow()
    });
    marketTransactions = pgTable("market_transactions", {
      id: serial("id").primaryKey(),
      buyerId: integer("buyer_id").notNull().references(() => users.id),
      offerId: integer("offer_id").notNull().references(() => marketOffers.id),
      amount: numeric("amount").notNull(),
      totalCost: numeric("total_cost").notNull(),
      commission: numeric("commission").notNull(),
      createdAt: timestamp("created_at").defaultNow()
    });
    cityTransfers = pgTable("city_transfers", {
      id: serial("id").primaryKey(),
      senderId: integer("sender_id").notNull().references(() => users.id),
      receiverOfficeId: integer("receiver_office_id").notNull().references(() => users.id),
      recipientName: text("recipient_name"),
      // اسم المستلم
      amount: numeric("amount").notNull(),
      commissionForReceiver: numeric("commission_for_receiver").notNull(),
      commissionForSystem: numeric("commission_for_system").notNull(),
      currency: text("currency").notNull().default("LYD"),
      code: text("code").notNull().unique(),
      status: text("status").notNull().default("pending"),
      // pending, completed, canceled
      createdAt: timestamp("created_at").defaultNow(),
      completedAt: timestamp("completed_at")
    });
    internationalTransfersNew = pgTable("international_transfers_new", {
      id: serial("id").primaryKey(),
      senderAgentId: integer("sender_agent_id").notNull().references(() => users.id),
      receiverOfficeId: integer("receiver_office_id").notNull().references(() => users.id),
      currencyCode: text("currency_code").notNull(),
      amountOriginal: numeric("amount_original").notNull(),
      // المبلغ الأصلي
      commissionSystem: numeric("commission_system").notNull(),
      // عمولة النظام
      commissionRecipient: numeric("commission_recipient").notNull(),
      // عمولة المستلم
      amountPending: numeric("amount_pending").notNull(),
      // المبلغ المجمد بعد خصم العمولات
      status: text("status").notNull().default("pending"),
      // pending, completed, refunded
      transferCode: text("transfer_code").notNull().unique(),
      // رمز التحويل
      note: text("note"),
      createdAt: timestamp("created_at").defaultNow(),
      completedAt: timestamp("completed_at")
    });
    internationalTransfers = pgTable("international_transfers", {
      id: serial("id").primaryKey(),
      senderId: integer("sender_id").notNull().references(() => users.id),
      receiverOfficeId: integer("receiver_office_id").notNull().references(() => users.id),
      sendingCountry: text("sending_country").notNull(),
      receivingCountry: text("receiving_country").notNull(),
      amount: numeric("amount").notNull(),
      currency: text("currency").notNull().default("USD"),
      commissionForReceiver: numeric("commission_for_receiver").notNull(),
      commissionForSystem: numeric("commission_for_system").notNull(),
      code: text("code").notNull().unique(),
      status: text("status").notNull().default("pending"),
      // pending, completed, canceled
      note: text("note"),
      createdAt: timestamp("created_at").defaultNow(),
      completedAt: timestamp("completed_at")
    });
    officeCommissions = pgTable("office_commissions", {
      id: serial("id").primaryKey(),
      officeId: integer("office_id").notNull().references(() => users.id),
      city: text("city").notNull(),
      commissionRate: numeric("commission_rate").notNull()
    }, (table) => {
      return {
        uniqueOfficeCity: unique().on(table.officeId, table.city)
      };
    });
    officeCountryCommissions = pgTable("office_country_commissions", {
      id: serial("id").primaryKey(),
      officeId: integer("office_id").notNull().references(() => users.id),
      country: text("country").notNull(),
      commissionRate: numeric("commission_rate").notNull()
    }, (table) => {
      return {
        uniqueOfficeCountry: unique().on(table.officeId, table.country)
      };
    });
    adminSettings = pgTable("admin_settings", {
      id: serial("id").primaryKey(),
      key: text("key").notNull().unique(),
      value: text("value").notNull(),
      description: text("description"),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    userNotifications = pgTable("user_notifications", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      title: text("title").notNull(),
      body: text("body"),
      type: text("type").notNull().default("info"),
      // info, warning, success, error, system
      isRead: boolean("is_read").notNull().default(false),
      createdAt: timestamp("created_at").defaultNow().notNull()
    });
    verificationRequests = pgTable("verification_requests", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      idPhotoUrl: text("id_photo_url").notNull(),
      proofOfAddressUrl: text("proof_of_address_url").notNull(),
      status: text("status").notNull().default("pending"),
      // pending / approved / rejected
      notes: text("notes"),
      // ملاحظات الرفض أو القبول
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at")
    });
    agentTransfers = pgTable("agent_transfers", {
      id: serial("id").primaryKey(),
      senderId: integer("sender_id").notNull().references(() => users.id),
      receiverId: integer("receiver_id"),
      // قد يكون فارغًا في حالة الحوالة التي تنتظر الاستلام (الكود)
      agentId: integer("agent_id").notNull().references(() => users.id),
      // مكتب الصرافة الذي أنشأ الحوالة
      destinationAgentId: integer("destination_agent_id").references(() => users.id),
      // مكتب الصرافة المستلم (اختياري)
      amount: numeric("amount").notNull(),
      commission: numeric("commission").notNull(),
      currency: text("currency").notNull(),
      transferCode: text("transfer_code"),
      // كود الحوالة للاستلام
      note: text("note"),
      status: text("status").notNull().default("pending"),
      // "pending", "completed", "canceled"
      type: text("type").notNull(),
      // "local" للحوالات الداخلية، "international" للحوالات الدولية
      country: text("country"),
      // الدولة المرسل إليها (للحوالات الدولية)
      city: text("city"),
      // المدينة المرسل إليها
      recipientName: text("recipient_name").notNull(),
      // اسم المستلم
      recipientPhone: text("recipient_phone"),
      // رقم هاتف المستلم (اختياري)
      recipientId: text("recipient_id"),
      // رقم هوية المستلم (اختياري)
      // حقول نظام التجميد والخصم الجديد
      amountOriginal: numeric("amount_original"),
      // المبلغ الأصلي قبل العمولات
      commissionSystem: numeric("commission_system"),
      // عمولة النظام
      commissionRecipient: numeric("commission_recipient"),
      // عمولة المكتب المستلم
      amountPending: numeric("amount_pending"),
      // المبلغ المجمد (المبلغ الأصلي ناقص عمولة النظام)
      receiverCode: text("receiver_code"),
      // رمز المستلم (6 أرقام)
      createdAt: timestamp("created_at").defaultNow(),
      completedAt: timestamp("completed_at")
    });
    transactionLogs = pgTable("transaction_logs", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      ts: timestamp("ts").defaultNow().notNull(),
      // الطابع الزمني
      type: text("type").notNull(),
      // deposit, withdrawal, internal_transfer_sent, internal_transfer_received, office_remit, market_trade_buy, market_trade_sell, external_payment, fee
      currency: text("currency").notNull(),
      amount: numeric("amount", { precision: 18, scale: 4 }).notNull(),
      commission: numeric("commission", { precision: 18, scale: 4 }).default("0"),
      direction: text("direction").notNull(),
      // 'debit' أو 'credit'
      counterparty: text("counterparty"),
      // الطرف الآخر في المعاملة
      ref: text("ref"),
      // المرجع أو الكود
      referenceNumber: text("reference_number"),
      // الرقم المرجعي للمعاملة
      status: text("status").notNull().default("completed"),
      // pending, completed, failed
      note: text("note"),
      // معرفات مرجعية للجداول الأخرى
      transferId: integer("transfer_id").references(() => transfers.id),
      cityTransferId: integer("city_transfer_id").references(() => cityTransfers.id),
      agentTransferId: integer("agent_transfer_id").references(() => agentTransfers.id),
      marketTransactionId: integer("market_transaction_id").references(() => marketTransactions.id),
      internationalTransferId: integer("international_transfer_id").references(() => internationalTransfers.id),
      // بيانات إضافية كـ JSON
      metadata: json("metadata"),
      createdAt: timestamp("created_at").defaultNow()
    });
    exchangeRates = pgTable("exchange_rates", {
      id: serial("id").primaryKey(),
      fromCurrency: text("from_currency").notNull(),
      toCurrency: text("to_currency").notNull(),
      rate: numeric("rate", { precision: 18, scale: 8 }).notNull(),
      fetchedAt: timestamp("fetched_at").defaultNow().notNull()
    }, (table) => {
      return {
        uniqueCurrencyPair: unique().on(table.fromCurrency, table.toCurrency, table.fetchedAt)
      };
    });
    exportJobs = pgTable("export_jobs", {
      id: uuid("id").primaryKey().defaultRandom(),
      userId: integer("user_id").notNull().references(() => users.id),
      type: text("type").notNull(),
      // 'statement_pdf', 'statement_excel'
      status: text("status").notNull().default("pending"),
      // pending, processing, ready, failed
      params: json("params").notNull(),
      // معاملات الطلب
      filePath: text("file_path"),
      // مسار الملف المُصدر
      downloadUrl: text("download_url"),
      // رابط التحميل
      expiresAt: timestamp("expires_at"),
      createdAt: timestamp("created_at").defaultNow(),
      completedAt: timestamp("completed_at"),
      errorMessage: text("error_message")
    });
    insertUserSchema = createInsertSchema(users).pick({
      fullName: true,
      officeName: true,
      officeAddress: true,
      countryId: true,
      countryName: true,
      cityId: true,
      cityName: true,
      email: true,
      phone: true,
      accountNumber: true,
      password: true
    });
    insertTransactionSchema = createInsertSchema(transactions).pick({
      userId: true,
      type: true,
      amount: true,
      currency: true,
      description: true,
      referenceNumber: true
    });
    insertBalanceSchema = createInsertSchema(balances).pick({
      userId: true,
      currency: true,
      amount: true
    });
    insertTransferSchema = createInsertSchema(transfers).pick({
      senderId: true,
      receiverId: true,
      amount: true,
      commission: true,
      currency: true,
      note: true
    });
    insertUpgradeRequestSchema = createInsertSchema(upgradeRequests).pick({
      userId: true,
      fullName: true,
      phone: true,
      city: true,
      commissionRate: true,
      message: true
    });
    insertMarketOfferSchema = createInsertSchema(marketOffers).extend({
      // Legacy properties expected by frontend
      offerType: z.enum(["buy", "sell"]).optional(),
      fromCurrency: z.string().optional(),
      toCurrency: z.string().optional(),
      rate: z.string().optional(),
      amount: z.string().optional(),
      available: z.string().optional(),
      // Add expiration hours for UI input
      expirationHours: z.number().min(1).max(720).optional()
      // من ساعة إلى 30 يوم
    }).pick({
      userId: true,
      side: true,
      baseCurrency: true,
      quoteCurrency: true,
      price: true,
      minAmount: true,
      maxAmount: true,
      remainingAmount: true,
      city: true,
      deliverType: true,
      terms: true,
      expiresAt: true,
      offerType: true,
      fromCurrency: true,
      toCurrency: true,
      rate: true,
      amount: true,
      available: true,
      expirationHours: true
    });
    insertMarketTransactionSchema = createInsertSchema(marketTransactions).pick({
      buyerId: true,
      offerId: true,
      amount: true,
      totalCost: true,
      commission: true
    });
    insertCityTransferSchema = createInsertSchema(cityTransfers).pick({
      senderId: true,
      receiverOfficeId: true,
      amount: true,
      commissionForReceiver: true,
      commissionForSystem: true,
      currency: true,
      code: true,
      status: true
    });
    insertInternationalTransferSchema = createInsertSchema(internationalTransfers).pick({
      senderId: true,
      receiverOfficeId: true,
      sendingCountry: true,
      receivingCountry: true,
      amount: true,
      currency: true,
      commissionForReceiver: true,
      commissionForSystem: true,
      code: true,
      note: true
    });
    insertInternationalTransferNewSchema = createInsertSchema(internationalTransfersNew).pick({
      senderAgentId: true,
      receiverOfficeId: true,
      currencyCode: true,
      amountOriginal: true,
      commissionSystem: true,
      commissionRecipient: true,
      amountPending: true,
      transferCode: true,
      note: true
    });
    insertAgentTransferSchema = createInsertSchema(agentTransfers).pick({
      senderId: true,
      receiverId: true,
      agentId: true,
      destinationAgentId: true,
      amount: true,
      commission: true,
      currency: true,
      transferCode: true,
      note: true,
      status: true,
      type: true,
      country: true,
      city: true,
      recipientName: true,
      recipientPhone: true,
      recipientId: true,
      amountOriginal: true,
      commissionSystem: true,
      commissionRecipient: true,
      amountPending: true,
      receiverCode: true
    });
    insertVerificationRequestSchema = createInsertSchema(verificationRequests).pick({
      userId: true,
      idPhotoUrl: true,
      proofOfAddressUrl: true,
      status: true
    });
    insertTransactionLogSchema = createInsertSchema(transactionLogs).pick({
      userId: true,
      ts: true,
      type: true,
      currency: true,
      amount: true,
      commission: true,
      direction: true,
      counterparty: true,
      ref: true,
      referenceNumber: true,
      status: true,
      note: true,
      transferId: true,
      cityTransferId: true,
      agentTransferId: true,
      marketTransactionId: true,
      internationalTransferId: true,
      metadata: true
    });
    insertExchangeRateSchema = createInsertSchema(exchangeRates).pick({
      fromCurrency: true,
      toCurrency: true,
      rate: true,
      fetchedAt: true
    });
    insertExportJobSchema = createInsertSchema(exportJobs).pick({
      userId: true,
      type: true,
      params: true
    });
    upgradeRequestSchema = z.object({
      fullName: z.string().min(3, { message: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u0627\u0633\u0645 \u0623\u0643\u062B\u0631 \u0645\u0646 3 \u0623\u062D\u0631\u0641" }),
      phone: z.string().min(10, { message: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0631\u0642\u0645 \u0627\u0644\u0647\u0627\u062A\u0641 \u0635\u062D\u064A\u062D\u064B\u0627" }),
      city: z.string().min(2, { message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0627\u0633\u0645 \u0627\u0644\u0645\u062F\u064A\u0646\u0629" }),
      message: z.string().optional()
    });
    verificationRequestSchema = z.object({
      idPhotoUrl: z.string().min(1, { message: "\u064A\u062C\u0628 \u0631\u0641\u0639 \u0635\u0648\u0631\u0629 \u0627\u0644\u0647\u0648\u064A\u0629" }),
      proofOfAddressUrl: z.string().min(1, { message: "\u064A\u062C\u0628 \u0631\u0641\u0639 \u0625\u062B\u0628\u0627\u062A \u0627\u0644\u0639\u0646\u0648\u0627\u0646" })
    });
    marketOfferSchema = z.object({
      side: z.enum(["sell", "buy"], {
        errorMap: () => ({ message: "\u0646\u0648\u0639 \u0627\u0644\u0639\u0631\u0636 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0628\u064A\u0639 \u0623\u0648 \u0634\u0631\u0627\u0621" })
      }),
      baseCurrency: z.string().min(1, { message: "\u064A\u062C\u0628 \u0627\u062E\u062A\u064A\u0627\u0631 \u0627\u0644\u0639\u0645\u0644\u0629 \u0627\u0644\u0645\u0635\u062F\u0631" }),
      quoteCurrency: z.string().min(1, { message: "\u064A\u062C\u0628 \u0627\u062E\u062A\u064A\u0627\u0631 \u0627\u0644\u0639\u0645\u0644\u0629 \u0627\u0644\u0647\u062F\u0641" }),
      minAmount: z.string().or(z.number()).transform((val) => Number(val)).refine((val) => val > 0, {
        message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0643\u0645\u064A\u0629 \u0627\u0644\u062F\u0646\u064A\u0627 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0635\u0641\u0631"
      }),
      maxAmount: z.string().or(z.number()).transform((val) => Number(val)).refine((val) => val > 0, {
        message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0643\u0645\u064A\u0629 \u0627\u0644\u0639\u0644\u064A\u0627 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0635\u0641\u0631"
      }),
      price: z.string().or(z.number()).transform((val) => Number(val)).refine((val) => val > 0, {
        message: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0633\u0639\u0631 \u0627\u0644\u0635\u0631\u0641 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0635\u0641\u0631"
      }),
      expirationMinutes: z.number().min(5, { message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0645\u062F\u0629 5 \u062F\u0642\u0627\u0626\u0642 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644" }).max(43200, { message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0623\u0646 \u062A\u062A\u062C\u0627\u0648\u0632 \u0627\u0644\u0645\u062F\u0629 30 \u064A\u0648\u0645\u0627\u064B" }).optional(),
      city: z.string().optional(),
      deliverType: z.string().optional(),
      terms: z.string().optional()
    }).refine((data) => Number(data.minAmount) <= Number(data.maxAmount), {
      message: "\u0627\u0644\u0643\u0645\u064A\u0629 \u0627\u0644\u062F\u0646\u064A\u0627 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0623\u0642\u0644 \u0645\u0646 \u0623\u0648 \u062A\u0633\u0627\u0648\u064A \u0627\u0644\u0643\u0645\u064A\u0629 \u0627\u0644\u0639\u0644\u064A\u0627",
      path: ["minAmount"]
    });
    transferSchema = z.object({
      receiver: z.string().min(1, { message: "\u064A\u062C\u0628 \u0625\u062F\u062E\u0627\u0644 \u0631\u0642\u0645 \u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u0623\u0648 \u0631\u0642\u0645 \u0627\u0644\u0647\u0627\u062A\u0641" }),
      amount: z.string().or(z.number()).refine((val) => Number(val) > 0, {
        message: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u0645\u0628\u0644\u063A \u0623\u0643\u0628\u0631 \u0645\u0646 \u0635\u0641\u0631"
      }),
      note: z.string().optional()
    });
    loginSchema = z.object({
      email: z.string().email(),
      password: z.string(),
      fingerprint: z.string().optional(),
      userAgent: z.string().optional(),
      platform: z.string().optional(),
      language: z.string().optional(),
      screen: z.string().optional(),
      timezone: z.string().optional(),
      timestamp: z.string().optional()
    });
    chatRooms = pgTable("chat_rooms", {
      id: serial("id").primaryKey(),
      name: text("name").notNull(),
      description: text("description"),
      isPublic: boolean("is_public").default(true),
      createdAt: timestamp("created_at").defaultNow()
    });
    chatMessages = pgTable("chat_messages", {
      id: serial("id").primaryKey(),
      roomId: integer("room_id").notNull().references(() => chatRooms.id),
      senderId: integer("sender_id").notNull().references(() => users.id),
      content: text("content").notNull(),
      fileUrl: text("file_url"),
      fileType: text("file_type"),
      voiceId: text("voice_id"),
      // معرف الرسالة الصوتية
      voiceDuration: integer("voice_duration"),
      // مدة الرسالة الصوتية بالثواني
      createdAt: timestamp("created_at").defaultNow(),
      isEdited: boolean("is_edited").default(false),
      editedAt: timestamp("edited_at"),
      isDeleted: boolean("is_deleted").default(false),
      deletedBy: integer("deleted_by"),
      deletedAt: timestamp("deleted_at")
    });
    messageLikes = pgTable("message_likes", {
      id: serial("id").primaryKey(),
      messageId: integer("message_id").notNull().references(() => chatMessages.id),
      userId: integer("user_id").notNull().references(() => users.id),
      createdAt: timestamp("created_at").defaultNow()
    }, (table) => ({
      // فهرس فريد لضمان عدم إعجاب المستخدم بنفس الرسالة أكثر من مرة
      uniqueUserMessage: unique().on(table.messageId, table.userId)
    }));
    chatMessageReads = pgTable("chat_message_reads", {
      messageId: integer("message_id").notNull().references(() => chatMessages.id),
      userId: integer("user_id").notNull().references(() => users.id),
      readAt: timestamp("read_at").defaultNow()
    }, (table) => {
      return {
        messageUserUnique: unique().on(table.messageId, table.userId)
      };
    });
    privateChats = pgTable("private_chats", {
      id: serial("id").primaryKey(),
      user1Id: integer("user1_id").notNull().references(() => users.id),
      user2Id: integer("user2_id").notNull().references(() => users.id),
      lastMessageAt: timestamp("last_message_at").defaultNow(),
      createdAt: timestamp("created_at").defaultNow()
    }, (table) => {
      return {
        usersPair: unique().on(table.user1Id, table.user2Id)
      };
    });
    privateMessages = pgTable("private_messages", {
      id: serial("id").primaryKey(),
      chatId: integer("chat_id").notNull().references(() => privateChats.id),
      senderId: integer("sender_id").notNull().references(() => users.id),
      content: text("content").notNull(),
      fileUrl: text("file_url"),
      fileType: text("file_type"),
      voiceId: text("voice_id"),
      // معرف الرسالة الصوتية
      voiceDuration: integer("voice_duration"),
      // مدة الرسالة الصوتية بالثواني
      isRead: boolean("is_read").default(false),
      isEdited: boolean("is_edited").default(false),
      createdAt: timestamp("created_at").defaultNow(),
      editedAt: timestamp("edited_at"),
      isDeleted: boolean("is_deleted").default(false),
      deletedBy: integer("deleted_by"),
      deletedAt: timestamp("deleted_at"),
      // حقول إعادة التوجيه
      isForwarded: boolean("is_forwarded").default(false),
      originalSenderId: integer("original_sender_id").references(() => users.id),
      forwardedFromSender: text("forwarded_from_sender")
      // اسم المرسل الأصلي
    });
    groupChats = pgTable("group_chats", {
      id: serial("id").primaryKey(),
      name: text("name").notNull(),
      creatorId: integer("creator_id").notNull().references(() => users.id),
      isPrivate: boolean("is_private").default(false),
      description: text("description"),
      createdAt: timestamp("created_at").defaultNow()
    });
    groupMembers = pgTable("group_members", {
      id: serial("id").primaryKey(),
      groupId: integer("group_id").notNull().references(() => groupChats.id),
      userId: integer("user_id").notNull().references(() => users.id),
      role: text("role").default("member"),
      // member / admin / owner
      mutedUntil: timestamp("muted_until"),
      // null = غير مكتوم، وقت = مكتوم حتى هذا التاريخ
      isBanned: boolean("is_banned").default(false),
      // نظام الحظر الجديد
      bannedBy: integer("banned_by").references(() => users.id),
      // مَن قام بالحظر
      bannedAt: timestamp("banned_at"),
      // وقت الحظر
      banReason: text("ban_reason"),
      // سبب الحظر
      joinedAt: timestamp("joined_at").defaultNow()
    }, (table) => {
      return {
        userGroupUnique: unique().on(table.groupId, table.userId)
      };
    });
    groupMessages = pgTable("group_messages", {
      id: serial("id").primaryKey(),
      groupId: integer("group_id").notNull().references(() => groupChats.id),
      senderId: integer("sender_id").notNull().references(() => users.id),
      content: text("content").notNull(),
      fileUrl: text("file_url"),
      fileType: text("file_type"),
      createdAt: timestamp("created_at").defaultNow(),
      editedAt: timestamp("edited_at"),
      isEdited: boolean("is_edited").default(false),
      isDeleted: boolean("is_deleted").default(false),
      deletedForUsers: integer("deleted_for_users").array()
    });
    insertChatRoomSchema = createInsertSchema(chatRooms);
    insertChatMessageSchema = createInsertSchema(chatMessages);
    insertPrivateChatSchema = createInsertSchema(privateChats).omit({
      lastMessageAt: true,
      createdAt: true
    });
    insertPrivateMessageSchema = createInsertSchema(privateMessages).omit({
      createdAt: true
    });
    insertMessageLikeSchema = createInsertSchema(messageLikes).omit({
      id: true,
      createdAt: true
    });
    insertGroupChatSchema = createInsertSchema(groupChats).omit({
      id: true,
      createdAt: true
    });
    insertGroupMemberSchema = createInsertSchema(groupMembers).omit({
      id: true,
      joinedAt: true,
      mutedUntil: true,
      isBanned: true,
      bannedBy: true,
      bannedAt: true,
      banReason: true
    });
    insertGroupMessageSchema = createInsertSchema(groupMessages).omit({
      id: true,
      createdAt: true
    });
    insertOfficeCommissionSchema = createInsertSchema(officeCommissions).pick({
      officeId: true,
      city: true,
      commissionRate: true
    });
    insertOfficeCountryCommissionSchema = createInsertSchema(officeCountryCommissions).pick({
      officeId: true,
      country: true,
      commissionRate: true
    });
    insertAdminSettingSchema = createInsertSchema(adminSettings).pick({
      key: true,
      value: true,
      description: true
    });
    insertUserNotificationSchema = createInsertSchema(userNotifications).omit({
      id: true,
      createdAt: true
    });
    cityTransferSchema = z.object({
      receiverOfficeId: z.number().int().positive({ message: "\u064A\u0631\u062C\u0649 \u0627\u062E\u062A\u064A\u0627\u0631 \u0645\u0643\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0645\u0633\u062A\u0644\u0645" }),
      amount: z.string().or(z.number()).transform((val) => Number(val)).refine((val) => val > 0, {
        message: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u0645\u0628\u0644\u063A \u0623\u0643\u0628\u0631 \u0645\u0646 \u0635\u0641\u0631"
      }),
      currency: z.string().default("LYD")
    });
    agentCommissions = pgTable("agent_commissions", {
      id: serial("id").primaryKey(),
      agentId: integer("agent_id").notNull(),
      currencyCode: text("currency_code").notNull(),
      type: text("type").notNull(),
      // 'percentage' or 'fixed'
      value: text("value").notNull(),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    insertAgentCommissionSchema = createInsertSchema(agentCommissions, {
      agentId: z.number().int().positive(),
      currencyCode: z.string().min(2).max(10),
      type: z.enum(["percentage", "fixed"]),
      value: z.string().refine((val) => {
        const num = parseFloat(val);
        return !isNaN(num) && num > 0;
      }, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0642\u064A\u0645\u0629 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B")
    });
    cityTransferCommissions = pgTable("city_transfer_commissions", {
      id: serial("id").primaryKey(),
      agentId: integer("agent_id").notNull().references(() => users.id),
      originCity: text("origin_city"),
      destinationCity: text("destination_city"),
      minAmount: text("min_amount").notNull(),
      maxAmount: text("max_amount"),
      // nullable للشريحة المفتوحة
      commission: text("commission"),
      // nullable إذا كانت النسبة في الألف محددة
      perMilleRate: text("per_mille_rate"),
      // نسبة في الألف
      currencyCode: text("currency_code").notNull().default("LYD"),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    insertCityTransferCommissionSchema = createInsertSchema(cityTransferCommissions, {
      agentId: z.number().int().positive(),
      minAmount: z.string().refine((val) => {
        const num = parseFloat(val);
        return !isNaN(num) && num >= 0;
      }, "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0623\u062F\u0646\u0649 \u0631\u0642\u0645\u0627\u064B \u0635\u062D\u064A\u062D\u0627\u064B"),
      maxAmount: z.string().optional().refine((val) => {
        if (!val) return true;
        const num = parseFloat(val);
        return !isNaN(num) && num > 0;
      }, "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0623\u0642\u0635\u0649 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B"),
      commission: z.string().optional().refine((val) => {
        if (!val) return true;
        const num = parseFloat(val);
        return !isNaN(num) && num > 0;
      }, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B"),
      perMilleRate: z.string().optional().refine((val) => {
        if (!val) return true;
        const num = parseFloat(val);
        return !isNaN(num) && num > 0;
      }, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0646\u0633\u0628\u0629 \u0641\u064A \u0627\u0644\u0623\u0644\u0641 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B"),
      currencyCode: z.string().min(2).max(10)
    });
    commissionPoolTransactions = pgTable("commission_pool_transactions", {
      id: serial("id").primaryKey(),
      sourceType: text("source_type").notNull(),
      // 'agent', 'user', 'system'
      sourceId: integer("source_id"),
      // معرف الوكيل أو المستخدم
      sourceName: text("source_name"),
      // اسم المرسل للعرض
      currencyCode: text("currency_code").notNull(),
      amount: text("amount").notNull(),
      // مبلغ العمولة
      transactionType: text("transaction_type").notNull(),
      // 'credit', 'withdrawal'
      relatedTransactionId: integer("related_transaction_id"),
      // معرف التحويل المرتبط
      description: text("description"),
      // وصف العملية
      createdAt: timestamp("created_at").defaultNow().notNull()
    });
    insertCommissionPoolTransactionSchema = createInsertSchema(commissionPoolTransactions, {
      sourceType: z.enum(["agent", "user", "system"]),
      currencyCode: z.string().min(2).max(10),
      amount: z.string().refine((val) => {
        const num = parseFloat(val);
        return !isNaN(num) && num > 0;
      }, "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u0645\u0628\u0644\u063A \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B"),
      transactionType: z.enum(["credit", "withdrawal"])
    });
    systemCommissionRates = pgTable("system_commission_rates", {
      id: serial("id").primaryKey(),
      transferType: text("transfer_type").notNull(),
      // 'internal', 'city', 'international'
      currency: text("currency").notNull(),
      commissionRate: numeric("commission_rate", { precision: 5, scale: 4 }).notNull(),
      // نسبة العمولة (مثل 0.01 = 1%)
      perMilleRate: numeric("per_mille_rate", { precision: 5, scale: 4 }),
      // نسبة في الألف (مثل 0.005 = 5‰)
      fixedAmount: numeric("fixed_amount", { precision: 12, scale: 2 }),
      // مبلغ ثابت (مثل 7.00 دولار)
      isActive: boolean("is_active").default(true).notNull(),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    passwordResetRequests = pgTable("password_reset_requests", {
      id: serial("id").primaryKey(),
      email: text("email").notNull(),
      token: text("token").notNull().unique(),
      expiresAt: timestamp("expires_at").notNull(),
      used: boolean("used").default(false),
      createdAt: timestamp("created_at").defaultNow()
    });
    insertUserSettingsSchema = createInsertSchema(userSettings, {
      language: z.enum(["ar", "en"]).default("ar"),
      theme: z.enum(["light", "dark", "auto"]).default("auto"),
      timezone: z.string().default("Africa/Tripoli"),
      baseCurrency: z.string().default("LYD"),
      notifications: z.object({
        email: z.boolean().default(true),
        push: z.boolean().default(true),
        security: z.boolean().default(true),
        marketing: z.boolean().default(false)
      })
    }).omit({ id: true, updatedAt: true });
    updateUserProfileSchema = z.object({
      fullName: z.string().min(2).max(100).optional(),
      phone: z.string().min(8).max(20).optional(),
      city: z.string().min(2).max(50).optional()
    });
    changePasswordSchema = z.object({
      currentPassword: z.string().min(1, "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062D\u0627\u0644\u064A\u0629 \u0645\u0637\u0644\u0648\u0628\u0629"),
      newPassword: z.string().min(8, "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062C\u062F\u064A\u062F\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 8 \u0623\u062D\u0631\u0641 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644").max(64, "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0637\u0648\u064A\u0644\u0629 \u062C\u062F\u0627\u064B").regex(/[A-Z]/, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u062D\u0631\u0641 \u0643\u0628\u064A\u0631").regex(/[a-z]/, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u062D\u0631\u0641 \u0635\u063A\u064A\u0631").regex(/[0-9]/, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u0631\u0642\u0645").regex(/[^A-Za-z0-9]/, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u0631\u0645\u0632 \u062E\u0627\u0635"),
      confirmPassword: z.string()
    }).refine((data) => data.newPassword === data.confirmPassword, {
      message: "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062C\u062F\u064A\u062F\u0629 \u0648\u062A\u0623\u0643\u064A\u062F\u0647\u0627 \u063A\u064A\u0631 \u0645\u062A\u0637\u0627\u0628\u0642\u064A\u0646",
      path: ["confirmPassword"]
    });
    passwordResetRequestSchema = z.object({
      email: z.string().email("\u0639\u0646\u0648\u0627\u0646 \u0628\u0631\u064A\u062F \u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u063A\u064A\u0631 \u0635\u0627\u0644\u062D")
    });
    passwordResetConfirmSchema = z.object({
      token: z.string().min(1, "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0637\u0644\u0648\u0628"),
      newPassword: z.string().min(8, "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 8 \u0623\u062D\u0631\u0641 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644").max(64, "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0637\u0648\u064A\u0644\u0629 \u062C\u062F\u0627\u064B").regex(/[A-Z]/, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u062D\u0631\u0641 \u0643\u0628\u064A\u0631").regex(/[a-z]/, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u062D\u0631\u0641 \u0635\u063A\u064A\u0631").regex(/[0-9]/, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u0631\u0642\u0645").regex(/[^A-Za-z0-9]/, "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u0631\u0645\u0632 \u062E\u0627\u0635"),
      confirmPassword: z.string()
    }).refine((data) => data.newPassword === data.confirmPassword, {
      message: "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0648\u062A\u0623\u0643\u064A\u062F\u0647\u0627 \u063A\u064A\u0631 \u0645\u062A\u0637\u0627\u0628\u0642\u064A\u0646",
      path: ["confirmPassword"]
    });
    insertUser2FASchema = createInsertSchema(user2FA, {
      isEnabled: z.boolean().default(false),
      secret: z.string().min(16).optional(),
      backupCodes: z.array(z.string()).default([])
    });
    enable2FASchema = z.object({
      token: z.string().length(6, "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 6 \u0623\u0631\u0642\u0627\u0645")
    });
    verify2FASchema = z.object({
      token: z.string().length(6, "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 6 \u0623\u0631\u0642\u0627\u0645")
    });
    disable2FASchema = z.object({
      currentPassword: z.string().min(1, "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062D\u0627\u0644\u064A\u0629 \u0645\u0637\u0644\u0648\u0628\u0629"),
      token: z.string().length(6, "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 6 \u0623\u0631\u0642\u0627\u0645")
    });
    countries2 = pgTable("countries", {
      id: serial("id").primaryKey(),
      name: text("name").notNull(),
      code: text("code").notNull().unique(),
      // ISO country code
      currency: text("currency").notNull(),
      phoneCode: text("phone_code"),
      // مفتاح الدولة للهاتف
      isActive: boolean("is_active").notNull().default(true),
      createdAt: timestamp("created_at").defaultNow()
    });
    agentOffices = pgTable("agent_offices", {
      id: serial("id").primaryKey(),
      agentId: integer("agent_id").notNull().references(() => users.id),
      countryCode: text("country_code").notNull().references(() => countries2.code),
      city: text("city").notNull(),
      officeCode: text("office_code").notNull().unique(),
      officeName: text("office_name").notNull(),
      contactInfo: text("contact_info"),
      address: text("address"),
      isActive: boolean("is_active").notNull().default(true),
      createdAt: timestamp("created_at").defaultNow()
    });
    newInternationalTransfers = pgTable("international_transfers", {
      id: serial("id").primaryKey(),
      agentId: integer("agent_id").notNull().references(() => users.id),
      currencyCode: text("currency_code").notNull(),
      amount: numeric("amount", { precision: 12, scale: 2 }).notNull(),
      originCountry: text("origin_country").notNull(),
      destinationCountry: text("destination_country").notNull().references(() => countries2.code),
      receivingOfficeId: integer("receiving_office_id").notNull().references(() => agentOffices.id),
      senderName: text("sender_name").notNull(),
      senderPhone: text("sender_phone"),
      receiverName: text("receiver_name").notNull(),
      receiverPhone: text("receiver_phone"),
      receiverCode: text("receiver_code"),
      transferCode: text("transfer_code").notNull().unique(),
      commissionAmount: numeric("commission_amount", { precision: 12, scale: 2 }).notNull(),
      status: text("status").notNull().default("pending"),
      // pending, completed, cancelled
      notes: text("notes"),
      createdAt: timestamp("created_at").defaultNow(),
      completedAt: timestamp("completed_at")
    });
    userReceiveSettings2 = pgTable("user_receive_settings", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").references(() => users.id).notNull(),
      countryId: integer("country_id").references(() => countries2.id).notNull(),
      commissionRate: numeric("commission_rate", { precision: 5, scale: 4 }).notNull(),
      isActive: boolean("is_active").default(true).notNull(),
      createdAt: timestamp("created_at").defaultNow().notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    pushSubscriptions = pgTable("push_subscriptions", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      endpoint: text("endpoint").notNull(),
      keysP256dh: text("keys_p256dh").notNull(),
      keysAuth: text("keys_auth").notNull(),
      createdAt: timestamp("created_at").defaultNow()
    }, (table) => ({
      userEndpointUnique: unique().on(table.userId, table.endpoint)
    }));
    insertUserReceiveSettingsSchema = createInsertSchema(userReceiveSettings2).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    insertPushSubscriptionSchema = createInsertSchema(pushSubscriptions).omit({
      id: true,
      createdAt: true
    });
    systemCommissionSettings = pgTable("system_commission_settings", {
      id: serial("id").primaryKey(),
      type: text("type").notNull(),
      // "percentage" or "fixed"
      value: numeric("value", { precision: 10, scale: 6 }).notNull(),
      currency: text("currency").notNull(),
      // العملة التي تُحسب بها العمولة
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow(),
      updatedBy: integer("updated_by").references(() => users.id)
    }, (table) => ({
      // فهرس فريد للتأكد من وجود إعداد واحد فقط لكل عملة
      uniqueCurrencyConstraint: unique("unique_commission_per_currency").on(table.currency)
    }));
    insertSystemCommissionSettingsSchema = createInsertSchema(systemCommissionSettings).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
    systemCommissionSettingsSchema = z.object({
      type: z.enum(["percentage", "fixed"], {
        errorMap: () => ({ message: "\u0646\u0648\u0639 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0646\u0633\u0628\u0629 \u0645\u0626\u0648\u064A\u0629 \u0623\u0648 \u062B\u0627\u0628\u062A" })
      }),
      value: z.string().or(z.number()).transform((val) => Number(val)).refine((val) => val > 0, {
        message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0642\u064A\u0645\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0635\u0641\u0631"
      }),
      currency: z.enum(["LYD", "USD", "EUR", "TRY", "AED", "EGP", "TND", "GBP"], {
        errorMap: () => ({ message: "\u064A\u062C\u0628 \u0627\u062E\u062A\u064A\u0627\u0631 \u0639\u0645\u0644\u0629 \u0635\u062D\u064A\u062D\u0629" })
      })
    });
    bulkSystemCommissionSettingsSchema = z.object({
      settings: z.array(systemCommissionSettingsSchema).min(1, {
        message: "\u064A\u062C\u0628 \u062A\u062D\u062F\u064A\u062F \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u0644\u0639\u0645\u0644\u0629 \u0648\u0627\u062D\u062F\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644"
      })
    }).refine((data) => {
      const currencies = data.settings.map((s) => s.currency);
      const uniqueCurrencies = new Set(currencies);
      return currencies.length === uniqueCurrencies.size;
    }, {
      message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062A\u0643\u0631\u0627\u0631 \u0627\u0644\u0639\u0645\u0644\u0629 \u0641\u064A \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629",
      path: ["settings"]
    });
    commissionLogs = pgTable("commission_logs", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      userName: text("user_name").notNull(),
      offerType: text("offer_type").notNull(),
      // "sell", "buy"
      commissionAmount: numeric("commission_amount", { precision: 12, scale: 2 }).notNull(),
      commissionCurrency: text("commission_currency").notNull(),
      sourceId: integer("source_id").notNull(),
      // ID العرض الأصلي
      sourceType: text("source_type").notNull().default("market_offer"),
      // نوع المصدر
      action: text("action").notNull(),
      // "deduct" | "refund"
      description: text("description"),
      createdAt: timestamp("created_at").defaultNow()
    });
    insertCommissionLogsSchema = createInsertSchema(commissionLogs).omit({
      id: true,
      createdAt: true
    });
    systemSettings = pgTable("system_settings", {
      key: text("key").primaryKey(),
      value: json("value").notNull(),
      updatedAt: timestamp("updated_at").defaultNow().notNull()
    });
    referralRewards = pgTable("referral_rewards", {
      id: serial("id").primaryKey(),
      txId: integer("tx_id").notNull(),
      // معرف العملية/الحركة التي تولدت منها العمولة
      referrerId: integer("referrer_id").notNull().references(() => users.id),
      // المحيل
      referredUserId: integer("referred_user_id").notNull().references(() => users.id),
      // المحال
      commissionBase: numeric("commission_base", { precision: 18, scale: 6 }).notNull(),
      // قيمة عمولة النظام الأساسية قبل الاقتطاع
      rewardAmount: numeric("reward_amount", { precision: 18, scale: 6 }).notNull(),
      // قيمة مكافأة الإحالة
      currency: text("currency").notNull(),
      // نفس عملة العمولة
      status: text("status").notNull().default("paid"),
      // pending, paid, reversed
      operationType: text("operation_type"),
      // نوع العملية التي تولدت منها المكافأة
      deductedFromCommission: numeric("deducted_from_commission", { precision: 18, scale: 6 }),
      // المبلغ المخصوم من العمولة
      createdAt: timestamp("created_at").defaultNow().notNull(),
      paidAt: timestamp("paid_at")
    }, (table) => ({
      // منع التكرار: مكافأة واحدة لكل عملية
      uniqueTxConstraint: unique("unique_referral_reward_tx").on(table.txId)
    }));
    referralBalances = pgTable("referral_balances", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      currency: text("currency").notNull(),
      amount: numeric("amount", { precision: 18, scale: 6 }).notNull().default("0")
    }, (table) => ({
      userCurrencyUnique: unique().on(table.userId, table.currency)
    }));
    insertReferralRewardSchema = createInsertSchema(referralRewards, {
      rewardAmount: z.string().refine((val) => !isNaN(Number(val)) && Number(val) >= 0, {
        message: "\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0635\u062D\u064A\u062D\u0627\u064B \u0623\u0643\u0628\u0631 \u0645\u0646 \u0623\u0648 \u064A\u0633\u0627\u0648\u064A \u0635\u0641\u0631"
      }),
      commissionBase: z.string().refine((val) => !isNaN(Number(val)) && Number(val) > 0, {
        message: "\u0642\u064A\u0645\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0623\u0633\u0627\u0633\u064A\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0635\u0641\u0631"
      })
    }).omit({
      id: true,
      createdAt: true
    });
    insertSystemSettingsSchema = createInsertSchema(systemSettings, {
      key: z.string().min(1, "\u0645\u0641\u062A\u0627\u062D \u0627\u0644\u0625\u0639\u062F\u0627\u062F \u0644\u0627 \u064A\u0645\u0643\u0646 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0641\u0627\u0631\u063A\u0627\u064B")
    }).omit({
      updatedAt: true
    });
    insertInternalTransferLogSchema = createInsertSchema(internalTransferLogs).omit({
      id: true,
      createdAt: true
    });
    receipts2 = pgTable("receipts", {
      id: text("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
      txnId: text("txn_id").notNull(),
      // يرتبط بسجل العملية
      version: integer("version").notNull().default(1),
      // إصدار الإيصال
      locale: text("locale").notNull().default("ar"),
      // ar|en
      storagePath: text("storage_path").notNull(),
      // مسار PDF في التخزين
      sha256Base64url: text("sha256_base64url").notNull(),
      // هاش التمثيل القانوني
      jwsToken: text("jws_token").notNull(),
      // نسخة مخزنة من JWS
      pdfSigned: boolean("pdf_signed").notNull().default(false),
      // هل تم توقيع PDF رقمياً
      pdfSignAlgo: text("pdf_sign_algo"),
      // خوارزمية التوقيع
      pdfCertSerial: text("pdf_cert_serial"),
      // رقم تسلسلي للشهادة
      revoked: boolean("revoked").notNull().default(false),
      // إبطال نسخة معينة
      createdAt: timestamp("created_at").defaultNow(),
      createdBy: text("created_by"),
      // من أنشأ الإيصال
      verifiedAt: timestamp("verified_at"),
      // آخر تحقق ناجح
      publicCopy: boolean("public_copy").notNull().default(true)
      // نسخة عامة مع masking
    }, (table) => ({
      txnIdIdx: index("receipts_txn_id_idx").on(table.txnId),
      createdAtIdx: index("receipts_created_at_idx").on(table.createdAt),
      revokedIdx: index("receipts_revoked_idx").on(table.revoked)
    }));
    insertReceiptSchema = createInsertSchema(receipts2).omit({
      id: true,
      createdAt: true
    });
    receiptAuditLog2 = pgTable("receipt_audit_log", {
      id: serial("id").primaryKey(),
      receiptId: text("receipt_id").notNull().references(() => receipts2.id),
      action: text("action").notNull(),
      // generate, sign, revoke, download, verify
      userId: text("user_id"),
      // المستخدم الذي قام بالعملية
      metadata: json("metadata"),
      // بيانات إضافية حسب نوع العملية
      ipAddress: text("ip_address"),
      userAgent: text("user_agent"),
      timestamp: timestamp("timestamp").defaultNow().notNull()
    }, (table) => ({
      receiptIdIdx: index("receipt_audit_receipt_id_idx").on(table.receiptId),
      timestampIdx: index("receipt_audit_timestamp_idx").on(table.timestamp)
    }));
    insertReceiptAuditLogSchema = createInsertSchema(receiptAuditLog2).omit({
      id: true,
      timestamp: true
    });
    signingKeys = pgTable("signing_keys", {
      id: serial("id").primaryKey(),
      kid: text("kid").notNull().unique(),
      // معرف المفتاح
      algorithm: text("algorithm").notNull().default("RS256"),
      publicKey: text("public_key").notNull(),
      // PEM format
      privateKey: text("private_key"),
      // PEM format - مشفر في الإنتاج
      active: boolean("active").notNull().default(true),
      createdAt: timestamp("created_at").defaultNow(),
      expiresAt: timestamp("expires_at")
      // للتدوير التلقائي
    }, (table) => ({
      kidIdx: index("signing_keys_kid_idx").on(table.kid),
      activeIdx: index("signing_keys_active_idx").on(table.active)
    }));
    insertSigningKeySchema = createInsertSchema(signingKeys).omit({
      id: true,
      createdAt: true
    });
    receiptSettings = pgTable("receipt_settings", {
      id: serial("id").primaryKey(),
      key: text("key").notNull().unique(),
      value: text("value").notNull(),
      description: text("description"),
      updatedAt: timestamp("updated_at").defaultNow(),
      updatedBy: text("updated_by")
    });
    insertReceiptSettingsSchema = createInsertSchema(receiptSettings).omit({
      id: true,
      updatedAt: true
    });
    messageVoices = pgTable("message_voices", {
      id: uuid("id").primaryKey().defaultRandom(),
      messageId: integer("message_id").references(() => chatMessages.id, { onDelete: "cascade" }),
      privateMessageId: integer("private_message_id").references(() => privateMessages.id, { onDelete: "cascade" }),
      senderId: integer("sender_id").notNull().references(() => users.id, { onDelete: "cascade" }),
      roomId: integer("room_id").references(() => chatRooms.id, { onDelete: "cascade" }),
      privateRoomId: integer("private_room_id").references(() => privateChats.id, { onDelete: "cascade" }),
      storageKey: text("storage_key").notNull(),
      // مسار الملف في التخزين
      mimeType: text("mime_type").notNull(),
      // audio/ogg, audio/mpeg...
      durationSeconds: integer("duration_seconds").notNull(),
      fileSizeBytes: integer("file_size_bytes").notNull(),
      waveformPeaks: json("waveform_peaks"),
      // بيانات الموجة (مصفوفة مبسطة)
      transcript: text("transcript"),
      // النص المنسوخ (إن توفر)
      transcriptLang: text("transcript_lang"),
      // ar/en/...
      status: text("status").notNull().default("ready"),
      // pending | processing | ready | failed
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    voiceSettings = pgTable("voice_settings", {
      id: uuid("id").primaryKey().defaultRandom(),
      maxDurationSeconds: integer("max_duration_seconds").notNull().default(120),
      maxFileSizeMb: integer("max_file_size_mb").notNull().default(10),
      enabled: boolean("enabled").notNull().default(true),
      transcriptionEnabled: boolean("transcription_enabled").notNull().default(true),
      allowedMimeTypes: text("allowed_mime_types").array().default(["audio/ogg", "audio/mpeg", "audio/mp4", "audio/webm"])
    });
    voiceRateLimits = pgTable("voice_rate_limits", {
      id: uuid("id").primaryKey().defaultRandom(),
      userId: integer("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
      messageCount: integer("message_count").notNull().default(0),
      windowStartTime: timestamp("window_start_time").defaultNow(),
      lastResetAt: timestamp("last_reset_at").defaultNow()
    });
    insertMessageVoiceSchema = createInsertSchema(messageVoices).pick({
      messageId: true,
      privateMessageId: true,
      senderId: true,
      roomId: true,
      privateRoomId: true,
      storageKey: true,
      mimeType: true,
      durationSeconds: true,
      fileSizeBytes: true,
      waveformPeaks: true,
      transcript: true,
      transcriptLang: true,
      status: true
    });
    insertVoiceSettingsSchema = createInsertSchema(voiceSettings).pick({
      maxDurationSeconds: true,
      maxFileSizeMb: true,
      enabled: true,
      transcriptionEnabled: true,
      allowedMimeTypes: true
    });
    insertVoiceRateLimitSchema = createInsertSchema(voiceRateLimits).pick({
      userId: true,
      messageCount: true,
      windowStartTime: true,
      lastResetAt: true
    });
    externalTransferRequestSchema2 = insertUpgradeRequestSchema.extend({
      requestType: z.literal("external_transfer"),
      countryId: z.number().min(1, "\u0627\u062E\u062A\u064A\u0627\u0631 \u0627\u0644\u062F\u0648\u0644\u0629 \u0645\u0637\u0644\u0648\u0628"),
      cityId: z.number().optional(),
      cityNameManual: z.string().optional()
    }).refine(
      (data) => data.cityId || data.cityNameManual && data.cityNameManual.trim().length > 0,
      {
        message: "\u064A\u062C\u0628 \u0627\u062E\u062A\u064A\u0627\u0631 \u0645\u062F\u064A\u0646\u0629 \u0645\u0646 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0623\u0648 \u0625\u062F\u062E\u0627\u0644 \u0627\u0633\u0645 \u0627\u0644\u0645\u062F\u064A\u0646\u0629 \u064A\u062F\u0648\u064A\u0627\u064B",
        path: ["cityId"]
      }
    );
    externalTransferLimitSchema = z.object({
      extDailyLimit: z.string().min(1, "\u0627\u0644\u062D\u062F \u0627\u0644\u064A\u0648\u0645\u064A \u0645\u0637\u0644\u0648\u0628"),
      extMonthlyLimit: z.string().min(1, "\u0627\u0644\u062D\u062F \u0627\u0644\u0634\u0647\u0631\u064A \u0645\u0637\u0644\u0648\u0628"),
      extAllowedCurrencies: z.array(z.string()).min(1, "\u064A\u062C\u0628 \u0627\u062E\u062A\u064A\u0627\u0631 \u0639\u0645\u0644\u0629 \u0648\u0627\u062D\u062F\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644"),
      extAllowedCountries: z.array(z.string()).min(1, "\u064A\u062C\u0628 \u0627\u062E\u062A\u064A\u0627\u0631 \u062F\u0648\u0644\u0629 \u0648\u0627\u062D\u062F\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644")
    });
    hiddenTransfers = pgTable("hidden_transfers", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id),
      transferId: integer("transfer_id").notNull().references(() => agentTransfers.id),
      hiddenAt: timestamp("hidden_at").defaultNow()
    }, (table) => {
      return {
        uniqueUserTransfer: unique().on(table.userId, table.transferId)
      };
    });
    insertHiddenTransferSchema = createInsertSchema(hiddenTransfers).pick({
      userId: true,
      transferId: true
    });
    badgeTypes = pgTable("badge_types", {
      id: serial("id").primaryKey(),
      name: text("name").notNull().unique(),
      // اسم الشارة
      nameAr: text("name_ar").notNull(),
      // الاسم بالعربية
      description: text("description").notNull(),
      // وصف الشارة
      descriptionAr: text("description_ar").notNull(),
      // الوصف بالعربية
      icon: text("icon").notNull(),
      // أيقونة الشارة (emoji أو اسم أيقونة)
      color: text("color").notNull().default("blue"),
      // لون الشارة
      rarity: text("rarity").notNull().default("common"),
      // common, rare, epic, legendary
      pointsRequired: integer("points_required").notNull().default(0),
      // النقاط المطلوبة للحصول عليها
      category: text("category").notNull().default("general"),
      // general, financial, social, achievement
      condition: json("condition"),
      // شروط الحصول على الشارة
      active: boolean("active").default(true),
      createdAt: timestamp("created_at").defaultNow()
    });
    userPoints = pgTable("user_points", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
      totalPoints: integer("total_points").notNull().default(0),
      // إجمالي النقاط
      availablePoints: integer("available_points").notNull().default(0),
      // النقاط المتاحة للإنفاق
      level: integer("level").notNull().default(1),
      // مستوى المستخدم
      streakDays: integer("streak_days").notNull().default(0),
      // أيام متتالية من النشاط
      lastActivityDate: timestamp("last_activity_date").defaultNow(),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    }, (table) => {
      return {
        userUnique: unique().on(table.userId)
      };
    });
    userBadges = pgTable("user_badges", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
      badgeTypeId: integer("badge_type_id").notNull().references(() => badgeTypes.id, { onDelete: "cascade" }),
      earnedAt: timestamp("earned_at").defaultNow(),
      isVisible: boolean("is_visible").default(true),
      // هل الشارة ظاهرة في الملف الشخصي
      notificationSent: boolean("notification_sent").default(false)
    }, (table) => {
      return {
        userBadgeUnique: unique().on(table.userId, table.badgeTypeId)
        // مستخدم واحد لا يمكن أن يحصل على نفس الشارة مرتين
      };
    });
    pointsHistory = pgTable("points_history", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
      points: integer("points").notNull(),
      // النقاط المكتسبة أو المنفقة (سالب في حالة الإنفاق)
      action: text("action").notNull(),
      // نوع العمل: transfer, login, badge_earned, reward_claimed
      description: text("description").notNull(),
      // وصف العمل
      descriptionAr: text("description_ar").notNull(),
      // الوصف بالعربية
      referenceId: text("reference_id"),
      // مرجع العملية (ID المعاملة، إلخ)
      referenceType: text("reference_type"),
      // نوع المرجع (transfer, transaction, badge)
      createdAt: timestamp("created_at").defaultNow()
    });
    rewards = pgTable("rewards", {
      id: serial("id").primaryKey(),
      name: text("name").notNull(),
      // اسم المكافأة
      nameAr: text("name_ar").notNull(),
      // الاسم بالعربية
      description: text("description").notNull(),
      // وصف المكافأة
      descriptionAr: text("description_ar").notNull(),
      // الوصف بالعربية
      icon: text("icon").notNull(),
      // أيقونة المكافأة
      pointsCost: integer("points_cost").notNull(),
      // النقاط المطلوبة للاستبدال
      rewardType: text("reward_type").notNull(),
      // discount, cash_bonus, feature_unlock, badge
      rewardValue: text("reward_value"),
      // قيمة المكافأة (نسبة خصم، مبلغ نقدي، إلخ)
      maxRedemptions: integer("max_redemptions"),
      // عدد مرات الاستبدال المسموح (null = لا محدود)
      currentRedemptions: integer("current_redemptions").default(0),
      // عدد مرات الاستبدال الحالي
      validUntil: timestamp("valid_until"),
      // تاريخ انتهاء المكافأة
      active: boolean("active").default(true),
      createdAt: timestamp("created_at").defaultNow()
    });
    userRewards = pgTable("user_rewards", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
      rewardId: integer("reward_id").notNull().references(() => rewards.id, { onDelete: "cascade" }),
      pointsSpent: integer("points_spent").notNull(),
      // النقاط المنفقة
      status: text("status").notNull().default("pending"),
      // pending, active, used, expired
      redemptionCode: text("redemption_code"),
      // كود الاستبدال
      usedAt: timestamp("used_at"),
      // تاريخ الاستخدام
      expiresAt: timestamp("expires_at"),
      // تاريخ انتهاء الصلاحية
      redeemedAt: timestamp("redeemed_at").defaultNow()
    });
    rewardSettings = pgTable("reward_settings", {
      id: serial("id").primaryKey(),
      transferPoints: integer("transfer_points").default(1),
      // نقاط لكل تحويل
      loginPoints: integer("login_points").default(5),
      // نقاط تسجيل الدخول اليومي
      streakBonusPoints: integer("streak_bonus_points").default(10),
      // نقاط إضافية للأيام المتتالية
      levelUpBonus: integer("level_up_bonus").default(50),
      // نقاط الترقية للمستوى التالي
      pointsPerLevel: integer("points_per_level").default(1e3),
      // النقاط المطلوبة لكل مستوى
      maxStreakDays: integer("max_streak_days").default(30),
      // أقصى أيام متتالية
      systemActive: boolean("system_active").default(true),
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    insertBadgeTypeSchema = createInsertSchema(badgeTypes).pick({
      name: true,
      nameAr: true,
      description: true,
      descriptionAr: true,
      icon: true,
      color: true,
      rarity: true,
      pointsRequired: true,
      category: true,
      condition: true,
      active: true
    });
    insertUserPointsSchema = createInsertSchema(userPoints).pick({
      userId: true,
      totalPoints: true,
      availablePoints: true,
      level: true,
      streakDays: true,
      lastActivityDate: true
    });
    insertUserBadgeSchema = createInsertSchema(userBadges).pick({
      userId: true,
      badgeTypeId: true,
      isVisible: true
    });
    insertPointsHistorySchema = createInsertSchema(pointsHistory).pick({
      userId: true,
      points: true,
      action: true,
      description: true,
      descriptionAr: true,
      referenceId: true,
      referenceType: true
    });
    insertRewardSchema = createInsertSchema(rewards).pick({
      name: true,
      nameAr: true,
      description: true,
      descriptionAr: true,
      icon: true,
      pointsCost: true,
      rewardType: true,
      rewardValue: true,
      maxRedemptions: true,
      validUntil: true,
      active: true
    });
    insertUserRewardSchema = createInsertSchema(userRewards).pick({
      userId: true,
      rewardId: true,
      pointsSpent: true,
      status: true,
      redemptionCode: true,
      expiresAt: true
    });
    insertRewardSettingsSchema = createInsertSchema(rewardSettings).pick({
      transferPoints: true,
      loginPoints: true,
      streakBonusPoints: true,
      levelUpBonus: true,
      pointsPerLevel: true,
      maxStreakDays: true,
      systemActive: true
    });
    pageRestrictions = pgTable("page_restrictions", {
      id: serial("id").primaryKey(),
      userId: integer("user_id").references(() => users.id, { onDelete: "cascade" }),
      // إزالة notNull لدعم القيود الشاملة
      accountNumber: text("account_number"),
      pageKey: text("page_key").notNull(),
      // 'market', 'send', 'receive', 'wallet', 'dashboard', 'kyc', 'chat', 'inter_office', 'international', 'reports', 'settings', 'admin', 'all'
      scope: text("scope").notNull().default("page"),
      // 'page' | 'section' | 'global'
      reason: text("reason"),
      isActive: boolean("is_active").notNull().default(true),
      expiresAt: timestamp("expires_at"),
      createdBy: integer("created_by").notNull().references(() => users.id, { onDelete: "cascade" }),
      createdAt: timestamp("created_at").defaultNow()
    }, (table) => ({
      // إزالة constraint الـ unique لأن userId قد يكون null للقيود الشاملة
      // uniqueUserPage: unique().on(table.userId, table.pageKey),
    }));
    auditLogs = pgTable("audit_logs", {
      id: serial("id").primaryKey(),
      actorId: integer("actor_id").references(() => users.id),
      action: text("action").notNull(),
      entity: text("entity").notNull(),
      entityId: integer("entity_id"),
      data: json("data"),
      createdAt: timestamp("created_at").defaultNow()
    });
    insertPageRestrictionSchema = createInsertSchema(pageRestrictions);
    insertAuditLogSchema = createInsertSchema(auditLogs);
    devPages = pgTable("dev_pages", {
      id: uuid("id").primaryKey().defaultRandom(),
      route: text("route").notNull().unique(),
      // مسار الصفحة مثل /reports/city-usage
      titleAr: text("title_ar").notNull(),
      // العنوان العربي
      layout: text("layout").default("default"),
      // نوع التخطيط
      status: text("status").notNull().default("draft"),
      // draft, published
      visibility: text("visibility").default("public"),
      // public, auth, role_based
      allowedRoles: text("allowed_roles").array().default([]),
      // الأدوار المسموحة
      createdBy: text("created_by").notNull(),
      // البريد الإلكتروني للمنشئ
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    devBlocks = pgTable("dev_blocks", {
      id: uuid("id").primaryKey().defaultRandom(),
      pageId: uuid("page_id").notNull().references(() => devPages.id, { onDelete: "cascade" }),
      slot: text("slot").notNull(),
      // main, sidebar, header, etc.
      componentKey: text("component_key").notNull(),
      // DataTable, Chart, Form, etc.
      props: json("props").default({}),
      // خصائص المكون
      orderIndex: integer("order_index").default(0),
      // ترتيب العرض
      createdAt: timestamp("created_at").defaultNow()
    });
    devComponents = pgTable("dev_components", {
      key: text("key").primaryKey(),
      // DataTable, Chart, Form, etc.
      displayName: text("display_name").notNull(),
      // الاسم للعرض
      schema: json("schema").notNull(),
      // JSON Schema للخصائص
      category: text("category").default("general"),
      // general, forms, charts, data
      isCore: boolean("is_core").default(true),
      // مكون أساسي أم مخصص
      createdAt: timestamp("created_at").defaultNow()
    });
    devComponentVersions = pgTable("dev_component_versions", {
      id: uuid("id").primaryKey().defaultRandom(),
      componentKey: text("component_key").notNull().references(() => devComponents.key),
      version: text("version").notNull(),
      // semver
      sourceJs: text("source_js"),
      // كود المكون
      changelog: text("changelog"),
      createdAt: timestamp("created_at").defaultNow()
    });
    devFunctions = pgTable("dev_functions", {
      name: text("name").primaryKey(),
      // admin_city_usage, get_office_stats, etc.
      type: text("type").notNull(),
      // rpc, sql, edge
      description: text("description"),
      createdAt: timestamp("created_at").defaultNow()
    });
    devFunctionVersions = pgTable("dev_function_versions", {
      id: uuid("id").primaryKey().defaultRandom(),
      functionName: text("function_name").notNull().references(() => devFunctions.name),
      version: text("version").notNull(),
      // semver
      source: text("source").notNull(),
      // كود الدالة
      tests: text("tests"),
      // اختبارات
      createdAt: timestamp("created_at").defaultNow()
    });
    devThemes = pgTable("dev_themes", {
      id: uuid("id").primaryKey().defaultRandom(),
      name: text("name").notNull().unique(),
      tokens: json("tokens").notNull(),
      // ألوان، خطوط، مسافات
      isActive: boolean("is_active").default(false),
      createdAt: timestamp("created_at").defaultNow()
    });
    devFeatureFlags = pgTable("dev_feature_flags", {
      key: text("key").primaryKey(),
      // market_pro, advanced_charts
      description: text("description"),
      enabled: boolean("enabled").default(false),
      perAccount: json("per_account").default({}),
      // {'33003002': true}
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    devNavItems = pgTable("dev_nav_items", {
      id: uuid("id").primaryKey().defaultRandom(),
      labelAr: text("label_ar").notNull(),
      route: text("route").notNull(),
      icon: text("icon"),
      // اسم الأيقونة من lucide
      orderIndex: integer("order_index").default(0),
      roles: text("roles").array().default([]),
      // أدوار مسموحة
      parentId: uuid("parent_id"),
      // للقوائم الفرعية - تمت إزالة المرجع لتجنب المرجع الدائري
      createdAt: timestamp("created_at").defaultNow()
    });
    devAssets = pgTable("dev_assets", {
      id: uuid("id").primaryKey().defaultRandom(),
      path: text("path").notNull().unique(),
      // مسار الملف
      alt: text("alt"),
      // النص البديل
      meta: json("meta").default({}),
      // معلومات إضافية
      createdAt: timestamp("created_at").defaultNow()
    });
    devReleases = pgTable("dev_releases", {
      id: uuid("id").primaryKey().defaultRandom(),
      tag: text("tag").notNull().unique(),
      // v1.0.0
      notes: text("notes"),
      // ملاحظات الإصدار
      createdBy: text("created_by").notNull(),
      createdAt: timestamp("created_at").defaultNow()
    });
    devReleaseItems = pgTable("dev_release_items", {
      id: uuid("id").primaryKey().defaultRandom(),
      releaseId: uuid("release_id").notNull().references(() => devReleases.id, { onDelete: "cascade" }),
      entity: text("entity").notNull(),
      // page, component, function, theme, nav, flag
      entityKey: text("entity_key").notNull(),
      // المفتاح أو المعرف
      fromVersion: text("from_version"),
      toVersion: text("to_version"),
      createdAt: timestamp("created_at").defaultNow()
    });
    devAuditLogs = pgTable("dev_audit_logs", {
      id: uuid("id").primaryKey().defaultRandom(),
      actorEmail: text("actor_email").notNull(),
      action: text("action").notNull(),
      // create, update, delete, publish, rollback
      entity: text("entity").notNull(),
      // page, component, function, etc.
      entityId: text("entity_id").notNull(),
      data: json("data").default({}),
      // البيانات المتغيرة
      createdAt: timestamp("created_at").defaultNow()
    });
    insertDevPageSchema = createInsertSchema(devPages);
    insertDevBlockSchema = createInsertSchema(devBlocks);
    insertDevComponentSchema = createInsertSchema(devComponents);
    insertDevFunctionSchema = createInsertSchema(devFunctions);
    insertDevThemeSchema = createInsertSchema(devThemes);
    insertDevFeatureFlagSchema = createInsertSchema(devFeatureFlags);
    insertDevNavItemSchema = createInsertSchema(devNavItems);
    insertDevAssetSchema = createInsertSchema(devAssets);
    insertDevReleaseSchema = createInsertSchema(devReleases);
    insertDevAuditLogSchema = createInsertSchema(devAuditLogs);
    securityLogs = pgTable("security_logs", {
      id: uuid("id").primaryKey().defaultRandom(),
      email: text("email"),
      // البريد الإلكتروني للمحاولة
      username: text("username"),
      // اسم المستخدم إن وُجد
      eventType: text("event_type").notNull(),
      // FAILED_LOGIN, SUCCESSFUL_LOGIN, SUSPICIOUS_ACTIVITY, MANUAL_REPORT, ADMIN_ACTION
      fingerprint: text("fingerprint").notNull(),
      // بصمة الجهاز
      ipAddress: text("ip_address"),
      // عنوان IP
      userAgent: text("user_agent"),
      // معلومات المتصفح
      country: text("country"),
      // الدولة
      city: text("city"),
      // المدينة
      platform: text("platform"),
      // النظام (web, mobile, etc)
      language: text("language"),
      // لغة المتصفح
      screen: text("screen"),
      // دقة الشاشة
      timezone: text("timezone"),
      // المنطقة الزمنية
      attempts: integer("attempts").default(1),
      // عدد المحاولات
      imageFilename: text("image_filename"),
      // اسم ملف الصورة الأمنية
      blocked: boolean("blocked").default(false),
      // هل تم حظر الجهاز
      reportType: text("report_type").default("failed_login"),
      // نوع التقرير
      metadata: json("metadata").default({}),
      // معلومات إضافية
      createdAt: timestamp("created_at").defaultNow(),
      updatedAt: timestamp("updated_at").defaultNow()
    });
    insertSecurityLogSchema = createInsertSchema(securityLogs).omit({
      id: true,
      createdAt: true,
      updatedAt: true
    });
  }
});

// server/db.ts
var db_exports = {};
__export(db_exports, {
  db: () => db,
  isDatabaseConnected: () => isDatabaseConnected,
  pool: () => pool
});
import { Pool } from "pg";
import { drizzle } from "drizzle-orm/node-postgres";
var dbConnected, pool, db, isDatabaseConnected;
var init_db = __esm({
  "server/db.ts"() {
    "use strict";
    init_schema();
    if (!process.env.PGHOST || !process.env.PGPORT || !process.env.PGUSER || !process.env.PGPASSWORD || !process.env.PGDATABASE) {
      console.warn("\u26A0\uFE0F PostgreSQL environment variables not fully set. App may not function properly.");
    }
    dbConnected = false;
    pool = new Pool({
      host: process.env.PGHOST,
      port: parseInt(process.env.PGPORT || "5432"),
      user: process.env.PGUSER,
      password: process.env.PGPASSWORD,
      database: process.env.PGDATABASE,
      connectionTimeoutMillis: 1e4,
      idleTimeoutMillis: 3e4,
      max: 10,
      ssl: {
        rejectUnauthorized: false
      }
    });
    pool.on("connect", () => {
      dbConnected = true;
      console.log("\u2705 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0645\u062A\u0635\u0644\u0629 \u0628\u0646\u062C\u0627\u062D");
    });
    pool.on("error", (err) => {
      dbConnected = false;
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A:", err.message);
    });
    db = drizzle({ client: pool, schema: schema_exports });
    isDatabaseConnected = () => dbConnected;
    pool.query("SELECT 1").then(() => {
      dbConnected = true;
      console.log("\u2705 \u0627\u062E\u062A\u0628\u0627\u0631 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0646\u062C\u062D");
    }).catch((err) => {
      dbConnected = false;
      console.error("\u274C \u0641\u0634\u0644 \u0627\u062E\u062A\u0628\u0627\u0631 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A:", err.message);
      console.log("\u{1F504} \u0627\u0644\u062A\u0637\u0628\u064A\u0642 \u0633\u064A\u0639\u0645\u0644 \u0641\u064A \u0648\u0636\u0639 \u0645\u062D\u062F\u0648\u062F \u0628\u062F\u0648\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A");
    });
  }
});

// server/referral-system.ts
var referral_system_exports = {};
__export(referral_system_exports, {
  addReferralBalance: () => addReferralBalance,
  allocateFixedReferralReward: () => allocateFixedReferralReward,
  allocateReferralReward: () => allocateReferralReward,
  calculateFixedReferralReward: () => calculateFixedReferralReward,
  calculateReferralReward: () => calculateReferralReward,
  generateReferralCode: () => generateReferralCode,
  getReferralBalances: () => getReferralBalances,
  getReferralHistory: () => getReferralHistory,
  getReferralStats: () => getReferralStats,
  getSetting: () => getSetting,
  getUserReferralRewards: () => getUserReferralRewards,
  getUserReferralStats: () => getUserReferralStats,
  getUserReferrals: () => getUserReferrals,
  linkReferral: () => linkReferral,
  processNewUserReferral: () => processNewUserReferral,
  setSetting: () => setSetting,
  transferReferralBalance: () => transferReferralBalance,
  validateReferralCode: () => validateReferralCode
});
import { eq, and, sql, desc } from "drizzle-orm";
async function getSetting(key, defaultValue) {
  try {
    const result = await db.select().from(systemSettings).where(eq(systemSettings.key, key)).limit(1);
    if (result.length === 0) {
      return defaultValue;
    }
    return result[0].value;
  } catch (error) {
    console.error(`\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0625\u0639\u062F\u0627\u062F ${key}:`, error);
    return defaultValue;
  }
}
async function setSetting(key, value) {
  try {
    await db.insert(systemSettings).values({ key, value }).onConflictDoUpdate({
      target: systemSettings.key,
      set: { value, updatedAt: /* @__PURE__ */ new Date() }
    });
    return true;
  } catch (error) {
    console.error(`\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F ${key}:`, error);
    return false;
  }
}
async function logTransactionToStatement(userId, type, currency, amount, direction, counterparty, ref, note, metadata) {
  try {
    await db.insert(transactionLogs).values({
      userId,
      type,
      currency,
      amount: amount.toString(),
      commission: "0",
      direction,
      counterparty,
      ref,
      status: "completed",
      note,
      metadata: metadata || null
    });
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:", error);
  }
}
function generateReferralCode() {
  return Math.random().toString(36).substring(2, 10).toUpperCase();
}
async function validateReferralCode(code2) {
  try {
    const result = await db.select({ id: users.id }).from(users).where(eq(users.referralCode, code2)).limit(1);
    if (result.length === 0) {
      return { valid: false };
    }
    return { valid: true, referrerId: result[0].id };
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return { valid: false };
  }
}
async function linkReferral(newUserId, referralCode) {
  try {
    const validation = await validateReferralCode(referralCode);
    if (!validation.valid || !validation.referrerId) {
      return false;
    }
    if (validation.referrerId === newUserId) {
      return false;
    }
    await db.update(users).set({
      referredBy: validation.referrerId,
      referredAt: /* @__PURE__ */ new Date()
    }).where(and(
      eq(users.id, newUserId),
      sql`referred_by IS NULL`
      // فقط إذا لم يكن مربوطًا من قبل
    ));
    return true;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u0631\u0628\u0637 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return false;
  }
}
async function calculateFixedReferralReward(operationType, commissionAmount, currency) {
  try {
    let fixedRewardAmount = 0;
    try {
      let settingKey = "";
      switch (operationType) {
        case "transfer_lyd":
          settingKey = "referral.fixed_reward_lyd";
          break;
        case "transfer_usd":
          settingKey = "referral.fixed_reward_usd";
          break;
        case "market_sell":
          settingKey = "referral.fixed_reward_market_sell";
          break;
        default:
          return { rewardAmount: 0, deductedFromCommission: 0 };
      }
      const rewardConfig = await getSetting(settingKey, { amount: operationType === "transfer_lyd" ? 1 : 0.5 });
      fixedRewardAmount = rewardConfig.amount || (operationType === "transfer_lyd" ? 1 : 0.5);
      console.log(`\u{1F4B0} \u062C\u0644\u0628 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u062B\u0627\u0628\u062A\u0629 \u0644\u0644\u0639\u0645\u0644\u064A\u0629 ${operationType}: ${fixedRewardAmount} ${currency}`);
    } catch (error) {
      console.log("\u26A0\uFE0F \u062A\u0639\u0630\u0631 \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u062B\u0627\u0628\u062A\u0629\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0642\u064A\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629:", error);
      switch (operationType) {
        case "transfer_lyd":
          fixedRewardAmount = 1;
          break;
        case "transfer_usd":
          fixedRewardAmount = 0.5;
          break;
        case "market_sell":
          fixedRewardAmount = 5e-3;
          break;
        default:
          return { rewardAmount: 0, deductedFromCommission: 0 };
      }
    }
    const actualReward = Math.min(fixedRewardAmount, commissionAmount);
    if (actualReward <= 0 || commissionAmount <= 0) {
      return { rewardAmount: 0, deductedFromCommission: 0 };
    }
    console.log(`\u{1F4B0} \u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u062B\u0627\u0628\u062A\u0629: \u0627\u0644\u0646\u0648\u0639=${operationType}, \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u062D\u062F\u062F=${fixedRewardAmount}, \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u062A\u0627\u062D\u0629=${commissionAmount}, \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0641\u0639\u0644\u064A\u0629=${actualReward}`);
    return {
      rewardAmount: actualReward,
      deductedFromCommission: actualReward
    };
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0633\u0627\u0628 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0627\u0644\u062B\u0627\u0628\u062A\u0629:", error);
    return { rewardAmount: 0, deductedFromCommission: 0 };
  }
}
async function calculateReferralReward(commissionAmount) {
  try {
    const rewardRateConfig = await getSetting("referral.reward_rate", { rate: 0.2 });
    const rewardRate = rewardRateConfig.rate || 0.2;
    return Math.round(commissionAmount * rewardRate * 1e6) / 1e6;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0633\u0627\u0628 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return 0;
  }
}
async function allocateFixedReferralReward(txId, operationType, commissionAmount, currency, referredUserId) {
  try {
    const enabledConfig = await getSetting("referral.enabled", { enabled: false });
    if (!enabledConfig.enabled) {
      return { hasReferral: false, rewardAmount: 0, netSystemCommission: commissionAmount };
    }
    const userResult = await db.select({
      referredBy: users.referredBy,
      verified: users.verified
    }).from(users).where(eq(users.id, referredUserId)).limit(1);
    if (userResult.length === 0 || !userResult[0].referredBy) {
      return { hasReferral: false, rewardAmount: 0, netSystemCommission: commissionAmount };
    }
    const referrerId = userResult[0].referredBy;
    const existingReward = await db.select().from(referralRewards).where(eq(referralRewards.txId, txId)).limit(1);
    if (existingReward.length > 0) {
      return { hasReferral: false, rewardAmount: 0, netSystemCommission: commissionAmount };
    }
    const rewardCalculation = await calculateFixedReferralReward(operationType, commissionAmount, currency);
    if (rewardCalculation.rewardAmount <= 0) {
      return { hasReferral: false, rewardAmount: 0, netSystemCommission: commissionAmount };
    }
    let systemFeeRate = 0.1;
    try {
      const systemFeeConfig = await getSetting("referral.system_fee_rate", { rate: 0.1 });
      systemFeeRate = systemFeeConfig.rate || 0.1;
      console.log(`\u{1F4B0} \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645: ${systemFeeRate * 100}%`);
    } catch (error) {
      console.log("\u26A0\uFE0F \u062A\u0639\u0630\u0631 \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0642\u064A\u0645\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629 10%:", error);
    }
    const systemFeeAmount = rewardCalculation.rewardAmount * systemFeeRate;
    const finalRewardAmount = rewardCalculation.rewardAmount - systemFeeAmount;
    console.log(`\u{1F4CA} \u062D\u0633\u0627\u0628 \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645 \u0639\u0644\u0649 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629: \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0623\u0635\u0644\u064A\u0629=${rewardCalculation.rewardAmount}, \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645=${systemFeeAmount.toFixed(6)}, \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0646\u0647\u0627\u0626\u064A\u0629=${finalRewardAmount.toFixed(6)}`);
    if (finalRewardAmount <= 0) {
      console.log(`\u26A0\uFE0F \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0646\u0647\u0627\u0626\u064A\u0629 \u0635\u0641\u0631 \u0623\u0648 \u0623\u0642\u0644 \u0628\u0639\u062F \u062E\u0635\u0645 \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645\u060C \u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u062A\u0648\u0632\u064A\u0639 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629`);
      return { hasReferral: false, rewardAmount: 0, netSystemCommission: commissionAmount };
    }
    await db.insert(referralRewards).values({
      txId,
      referrerId,
      referredUserId,
      commissionBase: commissionAmount.toString(),
      rewardAmount: finalRewardAmount.toString(),
      currency,
      // استخدام نفس عملة العمولة
      status: "paid",
      paidAt: /* @__PURE__ */ new Date(),
      operationType,
      deductedFromCommission: rewardCalculation.rewardAmount.toString()
      // المبلغ المخصوم من العمولة قبل رسوم النظام
    });
    await addReferralBalance(referrerId, currency, finalRewardAmount);
    const referrerUser = await db.select({ fullName: users.fullName }).from(users).where(eq(users.id, referrerId)).limit(1);
    const referredUser = await db.select({ fullName: users.fullName }).from(users).where(eq(users.id, referredUserId)).limit(1);
    await logTransactionToStatement(
      referrerId,
      "referral_reward_received",
      currency,
      finalRewardAmount,
      "credit",
      referredUser[0]?.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u062D\u0627\u0644",
      `REF-${txId}`,
      `\u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 \u0628\u0639\u062F \u062E\u0635\u0645 \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645 (${(systemFeeRate * 100).toFixed(1)}%) - ${operationType}`,
      {
        operationType,
        referredUserId,
        commissionBase: commissionAmount,
        originalRewardAmount: rewardCalculation.rewardAmount,
        systemFeeRate,
        systemFeeAmount,
        finalRewardAmount,
        txId,
        deductedFromCommission: true
      }
    );
    if (referrerUser.length > 0 && referredUser.length > 0) {
      await db.insert(userNotifications).values({
        userId: referrerId,
        title: "\u{1F381} \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 \u0645\u0646 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645",
        body: `\u062D\u0635\u0644\u062A \u0639\u0644\u0649 ${finalRewardAmount.toFixed(2)} ${currency} \u0628\u0639\u062F \u062E\u0635\u0645 \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645 (${(systemFeeRate * 100).toFixed(1)}%) \u0639\u0628\u0631 ${referredUser[0].fullName}`,
        type: "success",
        isRead: false
      });
    }
    console.log(`\u2705 \u062A\u0645 \u062A\u0648\u0632\u064A\u0639 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629: ${finalRewardAmount.toFixed(6)} ${currency} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${referrerId} (\u0628\u0639\u062F \u062E\u0635\u0645 \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645 ${systemFeeAmount.toFixed(6)} ${currency})`);
    const netSystemCommission = commissionAmount - finalRewardAmount;
    console.log(`\u{1F4B0} \u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645: ${commissionAmount} - ${finalRewardAmount} = ${netSystemCommission}`);
    return { hasReferral: true, rewardAmount: finalRewardAmount, netSystemCommission };
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0648\u0632\u064A\u0639 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0627\u0644\u062B\u0627\u0628\u062A\u0629:", error);
    return { hasReferral: false, rewardAmount: 0, netSystemCommission: commissionAmount };
  }
}
async function allocateReferralReward(txId) {
  try {
    const enabledConfig = await getSetting("referral.enabled", { enabled: false });
    if (!enabledConfig.enabled) {
      return false;
    }
    const commissionResult = await db.select({
      userId: commissionLogs.userId,
      commissionAmount: commissionLogs.commissionAmount,
      currency: commissionLogs.commissionCurrency
    }).from(commissionLogs).where(and(
      eq(commissionLogs.sourceId, txId),
      eq(commissionLogs.action, "system_commission")
      // أو أي نوع يمثل عمولة النظام
    )).limit(1);
    if (commissionResult.length === 0) {
      return false;
    }
    const commission = commissionResult[0];
    const userResult = await db.select({
      referredBy: users.referredBy,
      verified: users.verified
    }).from(users).where(eq(users.id, commission.userId)).limit(1);
    if (userResult.length === 0 || !userResult[0].referredBy) {
      return false;
    }
    const referrerId = userResult[0].referredBy;
    const userVerified = userResult[0].verified;
    const commissionAmountNum = parseFloat(commission.commissionAmount.toString());
    const operationType = commission.currency === "LYD" ? "transfer_lyd" : "transfer_usd";
    const rewardCalculation = await calculateFixedReferralReward(operationType, commissionAmountNum, commission.currency);
    const rewardAmount = rewardCalculation.rewardAmount;
    if (rewardAmount <= 0) {
      return false;
    }
    const existingReward = await db.select().from(referralRewards).where(eq(referralRewards.txId, txId)).limit(1);
    if (existingReward.length > 0) {
      return false;
    }
    await db.insert(referralRewards).values({
      txId,
      referrerId,
      referredUserId: commission.userId,
      commissionBase: commissionAmountNum.toString(),
      rewardAmount: rewardAmount.toString(),
      currency: commission.currency,
      status: "paid",
      paidAt: /* @__PURE__ */ new Date()
    });
    await addReferralBalance(referrerId, commission.currency, rewardAmount);
    console.log(`\u2705 \u062A\u0645 \u062A\u0648\u0632\u064A\u0639 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 \u0628\u0642\u064A\u0645\u0629 ${rewardAmount} ${commission.currency} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${referrerId}`);
    return true;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0648\u0632\u064A\u0639 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return false;
  }
}
async function addReferralBalance(userId, currency, amount) {
  try {
    await db.insert(referralBalances).values({
      userId,
      currency,
      amount: amount.toString()
    }).onConflictDoUpdate({
      target: [referralBalances.userId, referralBalances.currency],
      set: {
        amount: sql`${referralBalances.amount} + ${amount.toString()}`
      }
    });
    return true;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0631\u0635\u064A\u062F \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return false;
  }
}
async function getReferralBalances(userId) {
  try {
    const supportedCurrencies = ["LYD", "USD", "EUR", "TRY", "AED", "EGP", "TND", "GBP"];
    const result = await db.select().from(referralBalances).where(eq(referralBalances.userId, userId));
    const existingBalances = new Map(
      result.map((balance) => [balance.currency, balance.amount])
    );
    return supportedCurrencies.map((currency) => ({
      currency,
      amount: existingBalances.get(currency) || "0.000000"
    }));
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0623\u0631\u0635\u062F\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return [];
  }
}
async function getReferralStats(userId) {
  try {
    const referredUsersResult = await db.select({
      count: sql`COUNT(*)`
    }).from(users).where(eq(users.referredBy, userId));
    const referredCount = referredUsersResult[0]?.count || 0;
    const rewardsResult = await db.select({
      currency: referralRewards.currency,
      totalReward: sql`SUM(${referralRewards.rewardAmount})`
    }).from(referralRewards).where(eq(referralRewards.referrerId, userId)).groupBy(referralRewards.currency);
    return {
      referredCount,
      totalRewards: rewardsResult
    };
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return {
      referredCount: 0,
      totalRewards: []
    };
  }
}
async function getReferralHistory(userId, limit = 50) {
  try {
    const result = await db.select({
      id: referralRewards.id,
      txId: referralRewards.txId,
      referredUserId: referralRewards.referredUserId,
      commissionBase: referralRewards.commissionBase,
      rewardAmount: referralRewards.rewardAmount,
      currency: referralRewards.currency,
      status: referralRewards.status,
      createdAt: referralRewards.createdAt,
      paidAt: referralRewards.paidAt,
      referredUserName: users.fullName
    }).from(referralRewards).leftJoin(users, eq(users.id, referralRewards.referredUserId)).where(eq(referralRewards.referrerId, userId)).orderBy(desc(referralRewards.createdAt)).limit(limit);
    return result;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return [];
  }
}
async function transferReferralBalance(userId, currency, amount) {
  try {
    const balanceResult = await db.select({ amount: referralBalances.amount }).from(referralBalances).where(and(
      eq(referralBalances.userId, userId),
      eq(referralBalances.currency, currency)
    )).limit(1);
    if (balanceResult.length === 0) {
      return false;
    }
    const currentBalance = parseFloat(balanceResult[0].amount.toString());
    if (currentBalance < amount) {
      return false;
    }
    await db.update(referralBalances).set({
      amount: (currentBalance - amount).toString()
    }).where(and(
      eq(referralBalances.userId, userId),
      eq(referralBalances.currency, currency)
    ));
    await logTransactionToStatement(
      userId,
      "referral_balance_withdrawal",
      currency,
      amount,
      "debit",
      "\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A",
      `RW-${Date.now()}`,
      "\u0633\u062D\u0628 \u0631\u0635\u064A\u062F \u0645\u0643\u0627\u0641\u0622\u062A \u0625\u062D\u0627\u0644\u0629",
      {
        withdrawalType: "referral_balance",
        originalBalance: currentBalance
      }
    );
    await storage.createOrUpdateBalance({
      userId,
      currency,
      amount: amount.toString()
    });
    await logTransactionToStatement(
      userId,
      "referral_balance_deposit",
      currency,
      amount,
      "credit",
      "\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A",
      `RD-${Date.now()}`,
      "\u0625\u064A\u062F\u0627\u0639 \u0645\u0643\u0627\u0641\u0622\u062A \u0625\u062D\u0627\u0644\u0629 \u0644\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u0631\u0626\u064A\u0633\u064A",
      {
        depositType: "referral_balance_transfer",
        originalBalance: currentBalance
      }
    );
    return true;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u0648\u064A\u0644 \u0631\u0635\u064A\u062F \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return false;
  }
}
async function getUserReferralStats(userId) {
  try {
    const userResult = await db.select({ referralCode: users.referralCode }).from(users).where(eq(users.id, userId)).limit(1);
    const referralCode = userResult[0]?.referralCode || "";
    const totalReferralsResult = await db.select({ count: sql`COUNT(*)` }).from(users).where(eq(users.referredBy, userId));
    const totalRewardsResult = await db.select({ total: sql`COALESCE(SUM(${referralRewards.rewardAmount}), 0)` }).from(referralRewards).where(and(
      eq(referralRewards.referrerId, userId),
      eq(referralRewards.status, "paid")
    ));
    const pendingRewardsResult = await db.select({ total: sql`COALESCE(SUM(${referralRewards.rewardAmount}), 0)` }).from(referralRewards).where(and(
      eq(referralRewards.referrerId, userId),
      eq(referralRewards.status, "pending")
    ));
    const currentMonth = /* @__PURE__ */ new Date();
    currentMonth.setDate(1);
    currentMonth.setHours(0, 0, 0, 0);
    const monthlyReferralsResult = await db.select({ count: sql`COUNT(*)` }).from(users).where(and(
      eq(users.referredBy, userId),
      sql`${users.createdAt} >= ${currentMonth}`
    ));
    return {
      referralCode,
      totalReferrals: totalReferralsResult[0]?.count || 0,
      totalRewards: totalRewardsResult[0]?.total || 0,
      pendingRewards: pendingRewardsResult[0]?.total || 0,
      monthlyReferrals: monthlyReferralsResult[0]?.count || 0
    };
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return {
      referralCode: "",
      totalReferrals: 0,
      totalRewards: 0,
      pendingRewards: 0,
      monthlyReferrals: 0
    };
  }
}
async function getUserReferralRewards(userId) {
  try {
    const result = await db.select({
      id: referralRewards.id,
      amount: referralRewards.rewardAmount,
      currency: referralRewards.currency,
      status: referralRewards.status,
      createdAt: referralRewards.createdAt,
      paidAt: referralRewards.paidAt,
      fromUser: users.fullName,
      rewardType: sql`'direct'`
    }).from(referralRewards).leftJoin(users, eq(users.id, referralRewards.referredUserId)).where(eq(referralRewards.referrerId, userId)).orderBy(desc(referralRewards.createdAt));
    return result;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
    return [];
  }
}
async function getUserReferrals(userId) {
  try {
    const result = await db.select({
      id: users.id,
      fullName: users.fullName,
      email: users.email,
      createdAt: users.createdAt,
      verified: users.verified
    }).from(users).where(eq(users.referredBy, userId)).orderBy(desc(users.createdAt));
    return result;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0627\u062A:", error);
    return [];
  }
}
async function processNewUserReferral(newUserId, referrerId) {
  try {
    const enabledConfig = await getSetting("referral.enabled", { enabled: false });
    if (!enabledConfig.enabled) {
      console.log("\u0646\u0638\u0627\u0645 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0645\u0639\u0637\u0644");
      return false;
    }
    if (!newUserId || !referrerId || newUserId === referrerId) {
      console.log("\u0645\u0639\u0637\u064A\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629");
      return false;
    }
    const usersResult = await db.select({
      id: users.id,
      fullName: users.fullName
    }).from(users).where(sql`${users.id} IN (${newUserId}, ${referrerId})`);
    if (usersResult.length !== 2) {
      console.log("\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u0648\u0646 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0648\u0646");
      return false;
    }
    const newUser = usersResult.find((u) => u.id === newUserId);
    const referrer = usersResult.find((u) => u.id === referrerId);
    if (newUser && referrer) {
      await db.insert(userNotifications).values({
        userId: referrerId,
        title: "\u{1F389} \u0625\u062D\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u064F\u0633\u062C\u0644\u0629",
        body: `\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 ${newUser.fullName} \u0639\u0628\u0631 \u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0627\u0644\u062E\u0627\u0635 \u0628\u0643. \u0633\u062A\u062D\u0635\u0644 \u0639\u0644\u0649 \u0645\u0643\u0627\u0641\u0622\u062A \u0639\u0646\u062F \u0625\u062C\u0631\u0627\u0621 \u0623\u0648\u0644 \u0645\u0639\u0627\u0645\u0644\u0629.`,
        type: "info",
        isRead: false
      });
      console.log(`\u2705 \u062A\u0645 \u0625\u0634\u0639\u0627\u0631 \u0627\u0644\u0645\u064F\u062D\u064A\u0644 ${referrer.fullName} \u0628\u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0627\u0644\u062C\u062F\u064A\u062F\u0629 ${newUser.fullName}`);
    }
    return true;
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u062C\u062F\u064A\u062F:", error);
    return false;
  }
}
var init_referral_system = __esm({
  "server/referral-system.ts"() {
    "use strict";
    init_db();
    init_schema();
    init_storage();
  }
});

// server/push-notifications.ts
var push_notifications_exports = {};
__export(push_notifications_exports, {
  getUserPushSubscriptions: () => getUserPushSubscriptions,
  initializePushSubscriptions: () => initializePushSubscriptions,
  removePushSubscription: () => removePushSubscription,
  savePushSubscription: () => savePushSubscription,
  sendPushNotificationToAll: () => sendPushNotificationToAll,
  sendPushNotificationToUser: () => sendPushNotificationToUser,
  sendPushNotificationToUsers: () => sendPushNotificationToUsers
});
import webpush from "web-push";
import { sql as sql2 } from "drizzle-orm";
async function initializePushSubscriptions() {
  try {
    await db.execute(sql2`
      CREATE TABLE IF NOT EXISTS push_subscriptions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL,
        endpoint TEXT NOT NULL,
        keys_p256dh TEXT NOT NULL,
        keys_auth TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        UNIQUE(user_id, endpoint)
      )
    `);
    console.log("\u2705 \u062C\u062F\u0648\u0644 \u0627\u0634\u062A\u0631\u0627\u0643\u0627\u062A \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u062C\u0627\u0647\u0632");
  } catch (error) {
    console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u062C\u062F\u0648\u0644 \u0627\u0634\u062A\u0631\u0627\u0643\u0627\u062A \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A:", error);
    console.log("\u{1F504} \u0633\u064A\u062A\u0645 \u062A\u0634\u063A\u064A\u0644 \u0646\u0638\u0627\u0645 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0628\u062F\u0648\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0645\u0624\u0642\u062A\u0627\u064B");
  }
}
async function savePushSubscription(userId, subscription) {
  try {
    await db.execute(sql2`
      INSERT INTO push_subscriptions (user_id, endpoint, keys_p256dh, keys_auth)
      VALUES (${userId}, ${subscription.endpoint}, ${subscription.keys.p256dh}, ${subscription.keys.auth})
      ON CONFLICT (user_id, endpoint) DO UPDATE SET
        keys_p256dh = EXCLUDED.keys_p256dh,
        keys_auth = EXCLUDED.keys_auth
    `);
    console.log(`\u2705 \u062A\u0645 \u062D\u0641\u0638 \u0627\u0634\u062A\u0631\u0627\u0643 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
  } catch (error) {
    console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062D\u0641\u0638 \u0627\u0634\u062A\u0631\u0627\u0643 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A:", error);
    throw error;
  }
}
async function removePushSubscription(userId, endpoint) {
  try {
    await db.execute(sql2`
      DELETE FROM push_subscriptions 
      WHERE user_id = ${userId} AND endpoint = ${endpoint}
    `);
    console.log(`\u2705 \u062A\u0645 \u0625\u0632\u0627\u0644\u0629 \u0627\u0634\u062A\u0631\u0627\u0643 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
  } catch (error) {
    console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0632\u0627\u0644\u0629 \u0627\u0634\u062A\u0631\u0627\u0643 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A:", error);
    throw error;
  }
}
async function getUserPushSubscriptions(userId) {
  try {
    console.log(`\u{1F50D} \u062C\u0644\u0628 \u0627\u0634\u062A\u0631\u0627\u0643\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A...`);
    const result = await db.execute(sql2`
      SELECT endpoint, keys_p256dh, keys_auth 
      FROM push_subscriptions 
      WHERE user_id = ${userId}
    `);
    console.log(`\u{1F4CA} \u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 ${result.rows.length} \u0627\u0634\u062A\u0631\u0627\u0643 \u0641\u064A \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A`);
    if (result.rows.length > 0) {
      result.rows.forEach((row, index2) => {
        const endpoint = row.endpoint;
        console.log(`  \u{1F4F1} \u0627\u0634\u062A\u0631\u0627\u0643 ${index2 + 1}: ${endpoint?.substring(0, 50)}...`);
      });
    }
    return result.rows.map((row) => ({
      endpoint: row.endpoint,
      keys: {
        p256dh: row.keys_p256dh,
        auth: row.keys_auth
      }
    }));
  } catch (error) {
    console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0634\u062A\u0631\u0627\u0643\u0627\u062A \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A:", error);
    return [];
  }
}
async function sendPushNotificationToUser(userId, payload) {
  try {
    console.log(`\u{1F680} \u0628\u062F\u0621 \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 push \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
    console.log(`\u{1F4DD} \u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0625\u0634\u0639\u0627\u0631: ${payload.title} - ${payload.body}`);
    const subscriptions = await getUserPushSubscriptions(userId);
    if (subscriptions.length === 0) {
      console.log(`\u2139\uFE0F \u0644\u0627 \u062A\u0648\u062C\u062F \u0627\u0634\u062A\u0631\u0627\u0643\u0627\u062A \u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
      return;
    }
    console.log(`\u{1F4F1} \u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 ${subscriptions.length} \u0627\u0634\u062A\u0631\u0627\u0643 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
    const pushPayload = JSON.stringify({
      title: payload.title,
      body: payload.body,
      data: payload.data || {},
      url: payload.url || "/",
      tag: payload.tag || "notification"
    });
    const promises = subscriptions.map(async (subscription, index2) => {
      try {
        console.log(`\u{1F504} \u0645\u062D\u0627\u0648\u0644\u0629 \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} - \u0627\u0644\u0627\u0634\u062A\u0631\u0627\u0643 ${index2 + 1}/${subscriptions.length}`);
        console.log(`\u{1F4E1} Endpoint: ${subscription.endpoint.substring(0, 50)}...`);
        const result = await webpush.sendNotification(subscription, pushPayload);
        console.log(`\u2705 \u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 push \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} - \u0627\u0644\u0627\u0634\u062A\u0631\u0627\u0643 ${index2 + 1} \u0628\u0646\u062C\u0627\u062D`);
        console.log(`\u{1F4CA} Response status: ${result?.statusCode || "unknown"}`);
        return { success: true, subscription: index2 + 1 };
      } catch (error) {
        console.error(`\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 push \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} - \u0627\u0644\u0627\u0634\u062A\u0631\u0627\u0643 ${index2 + 1}:`);
        console.error(`   Status: ${error.statusCode || "unknown"}`);
        console.error(`   Message: ${error.message || "unknown"}`);
        console.error(`   Body: ${JSON.stringify(error.body || {})}`);
        if (error.statusCode === 410) {
          console.log(`\u{1F5D1}\uFE0F \u062D\u0630\u0641 \u0627\u0644\u0627\u0634\u062A\u0631\u0627\u0643 \u063A\u064A\u0631 \u0627\u0644\u0635\u0627\u0644\u062D \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
          await removePushSubscription(userId, subscription.endpoint);
        }
        return { success: false, subscription: index2 + 1, error: error.message };
      }
    });
    await Promise.all(promises);
  } catch (error) {
    console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631\u0627\u062A push:", error);
  }
}
async function sendPushNotificationToUsers(userIds, payload) {
  const promises = userIds.map(
    (userId) => sendPushNotificationToUser(userId, payload)
  );
  await Promise.all(promises);
}
async function sendPushNotificationToAll(payload) {
  try {
    const result = await db.execute(sql2`
      SELECT DISTINCT user_id FROM push_subscriptions
    `);
    const userIds = result.rows.map((row) => row.user_id);
    await sendPushNotificationToUsers(userIds, payload);
    console.log(`\u2705 \u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 \u0639\u0627\u0645 \u0644\u0640 ${userIds.length} \u0645\u0633\u062A\u062E\u062F\u0645`);
  } catch (error) {
    console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 \u0639\u0627\u0645:", error);
  }
}
var VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY;
var init_push_notifications = __esm({
  "server/push-notifications.ts"() {
    "use strict";
    init_db();
    VAPID_PUBLIC_KEY = "BIOBQqLPWUKpu_E8ZEjqdDY4HyaJ5AeE2URlnHyam3ZSFe-BmodrswOM5-mCrwmQrAkIHOPkrubKcBWTBE2_Gr0";
    VAPID_PRIVATE_KEY = "hXfgrT9wIwcScZ9e6-YTLOTgKssgG6YuyKOuamHomXU";
    webpush.setVapidDetails(
      "mailto:admin@exchange-platform.com",
      VAPID_PUBLIC_KEY,
      VAPID_PRIVATE_KEY
    );
  }
});

// server/storage.ts
var storage_exports = {};
__export(storage_exports, {
  DatabaseStorage: () => DatabaseStorage,
  storage: () => storage
});
import { eq as eq2, and as and2, or, sql as sql3, like, ilike, desc as desc2, asc, isNull, lt, lte, gte } from "drizzle-orm";
import session from "express-session";
import createMemoryStore from "memorystore";
var MemoryStore, DatabaseStorage, storage;
var init_storage = __esm({
  "server/storage.ts"() {
    "use strict";
    init_schema();
    init_db();
    MemoryStore = createMemoryStore(session);
    DatabaseStorage = class {
      sessionStore;
      // Using any to avoid type errors with SessionStore
      constructor() {
        this.sessionStore = new MemoryStore({
          checkPeriod: 864e5
          // prune expired entries every 24h
        });
      }
      async getUser(id) {
        const [user] = await db.select().from(users).where(eq2(users.id, id));
        return user;
      }
      async getUserByEmail(email) {
        const [user] = await db.select().from(users).where(eq2(users.email, email));
        return user;
      }
      async getUserByPhoneOrId(phoneOrId) {
        const [userByAccountNumber] = await db.select().from(users).where(eq2(users.accountNumber, phoneOrId));
        if (userByAccountNumber) return userByAccountNumber;
        const [userByPhone] = await db.select().from(users).where(eq2(users.phone, phoneOrId));
        if (userByPhone) return userByPhone;
        if (!isNaN(Number(phoneOrId))) {
          const [userById] = await db.select().from(users).where(eq2(users.id, Number(phoneOrId)));
          return userById;
        }
        return void 0;
      }
      async getAdminUser() {
        const [admin] = await db.select().from(users).where(eq2(users.type, "admin"));
        return admin;
      }
      async createUser(insertUser) {
        const [user] = await db.insert(users).values(insertUser).returning();
        return user;
      }
      async updateUser(userId, data) {
        const [updated] = await db.update(users).set(data).where(eq2(users.id, userId)).returning();
        return updated;
      }
      async updateUserProfile(userId, data) {
        const [updated] = await db.update(users).set({
          fullName: data.fullName,
          email: data.email,
          phone: data.phone
        }).where(eq2(users.id, userId)).returning();
        return updated;
      }
      async getLastAccountNumber(prefix = "33003") {
        const result = await db.select({ accountNumber: users.accountNumber }).from(users).where(like(users.accountNumber, `${prefix}%`)).orderBy(desc2(users.accountNumber)).limit(1);
        return result.length > 0 ? result[0].accountNumber : null;
      }
      async getUserTransactions(userId) {
        return await db.select().from(transactions).where(eq2(transactions.userId, userId)).orderBy(desc2(transactions.date));
      }
      async createTransaction(transaction) {
        if (!transaction.referenceNumber) {
          const timestamp2 = Date.now();
          const randomId = Math.random().toString(36).substring(2, 8).toUpperCase();
          transaction.referenceNumber = `REF-${timestamp2}-${randomId}`;
        }
        const [newTransaction] = await db.insert(transactions).values(transaction).returning();
        return newTransaction;
      }
      async getUserBalances(userId) {
        return await db.select().from(balances).where(eq2(balances.userId, userId));
      }
      async getUserBalance(userId, currency) {
        const [balance] = await db.select().from(balances).where(
          and2(
            eq2(balances.userId, userId),
            eq2(balances.currency, currency)
          )
        );
        return balance;
      }
      async createOrUpdateBalance(balance) {
        console.log("=== \u0628\u062F\u0627\u064A\u0629 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0635\u064A\u062F ===");
        console.log("\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u0645\u0633\u062A\u0644\u0645\u0629:", balance);
        const existingBalance = await this.getUserBalance(balance.userId, balance.currency);
        console.log("\u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u062D\u0627\u0644\u064A:", existingBalance);
        if (existingBalance) {
          const currentAmount = parseFloat(existingBalance.amount);
          const amountToAdd = parseFloat(balance.amount || "0");
          const newAmount = (currentAmount + amountToAdd).toString();
          console.log(`\u062D\u0633\u0627\u0628 \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u062C\u062F\u064A\u062F: ${currentAmount} + ${amountToAdd} = ${newAmount}`);
          const [updatedBalance] = await db.update(balances).set({
            amount: newAmount
          }).where(
            and2(
              eq2(balances.userId, balance.userId),
              eq2(balances.currency, balance.currency)
            )
          ).returning();
          console.log("\u0627\u0644\u0631\u0635\u064A\u062F \u0628\u0639\u062F \u0627\u0644\u062A\u062D\u062F\u064A\u062B:", updatedBalance);
          return updatedBalance;
        } else {
          console.log("\u0625\u0646\u0634\u0627\u0621 \u0631\u0635\u064A\u062F \u062C\u062F\u064A\u062F \u0644\u0639\u062F\u0645 \u0648\u062C\u0648\u062F \u0631\u0635\u064A\u062F \u0633\u0627\u0628\u0642");
          const [newBalance] = await db.insert(balances).values(balance).returning();
          console.log("\u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u062C\u062F\u064A\u062F:", newBalance);
          return newBalance;
        }
      }
      async setUserBalance(userId, currency, amount) {
        console.log(`=== \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0631\u0635\u064A\u062F \u0645\u0628\u0627\u0634\u0631\u0629 ===`);
        console.log(`\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userId}, \u0627\u0644\u0639\u0645\u0644\u0629: ${currency}, \u0627\u0644\u0645\u0628\u0644\u063A: ${amount}`);
        const parsedAmount = parseFloat(amount);
        const validAmount = isNaN(parsedAmount) ? 0 : parsedAmount;
        const finalAmount = validAmount.toString();
        console.log(`\u0627\u0644\u0645\u0628\u0644\u063A \u0628\u0639\u062F \u0627\u0644\u062A\u062D\u0642\u0642: ${finalAmount}`);
        try {
          const result = await db.execute(sql3`
        INSERT INTO user_balances (user_id, currency, amount)
        VALUES (${userId}, ${currency}, ${finalAmount})
        ON CONFLICT (user_id, currency)
        DO UPDATE SET amount = ${finalAmount}
        RETURNING *
      `);
          const balance = result.rows[0];
          console.log("\u062A\u0645 \u062A\u062D\u062F\u064A\u062B/\u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0631\u0635\u064A\u062F:", balance);
          return balance;
        } catch (error) {
          console.error(`\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0631\u0635\u064A\u062F \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0648\u0627\u0644\u0639\u0645\u0644\u0629 ${currency}:`, error);
          const existingBalance = await this.getUserBalance(userId, currency);
          if (existingBalance) {
            const [updatedBalance] = await db.update(balances).set({ amount: finalAmount }).where(
              and2(
                eq2(balances.userId, userId),
                eq2(balances.currency, currency)
              )
            ).returning();
            return updatedBalance;
          }
          throw error;
        }
      }
      async transferMoney(senderId, receiverId, amount, commission, currency, note) {
        const [transfer] = await db.insert(transfers).values({
          senderId,
          receiverId,
          currency,
          amount: amount.toString(),
          commission: commission.toString(),
          note: note || "",
          status: "completed",
          date: /* @__PURE__ */ new Date()
        }).returning();
        const senderBalance = await this.getUserBalance(senderId, currency);
        const total = amount + commission;
        if (senderBalance) {
          const newAmount = Number(senderBalance.amount) - total;
          await this.createOrUpdateBalance({
            userId: senderId,
            currency,
            amount: newAmount.toString()
          });
        }
        const receiverBalance = await this.getUserBalance(receiverId, currency);
        if (receiverBalance) {
          const newAmount = Number(receiverBalance.amount) + amount;
          await this.createOrUpdateBalance({
            userId: receiverId,
            currency,
            amount: newAmount.toString()
          });
        } else {
          await this.createOrUpdateBalance({
            userId: receiverId,
            currency,
            amount: amount.toString()
          });
        }
        if (commission > 0) {
          const senderUser = await this.getUser(senderId);
          const { allocateFixedReferralReward: allocateFixedReferralReward2 } = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
          const operationType = currency === "LYD" ? "transfer_lyd" : "transfer_usd";
          const referralResult = await allocateFixedReferralReward2(
            transfer.id,
            operationType,
            commission,
            currency,
            senderId
            // المستخدم المُحال هو المرسل
          );
          const netCommission = referralResult.netSystemCommission;
          if (netCommission > 0) {
            await this.addCommissionPoolTransaction({
              sourceType: "user",
              sourceId: senderId,
              sourceName: senderUser?.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645",
              currencyCode: currency,
              amount: netCommission.toString(),
              transactionType: "credit",
              relatedTransactionId: transfer.id,
              description: `\u0639\u0645\u0648\u0644\u0629 \u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A (\u0635\u0627\u0641\u064A \u0628\u0639\u062F \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A) \u0645\u0646 ${senderUser?.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645"}`
            });
            console.log(`\u{1F4B0} \u0625\u0636\u0627\u0641\u0629 \u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 ${netCommission} ${currency} \u0625\u0644\u0649 \u0645\u062C\u0645\u0639 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A (\u0628\u0639\u062F \u062E\u0635\u0645 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 ${commission - netCommission})`);
          }
        }
        return transfer;
      }
      // إنشاء تحويل داخلي
      async createInternalTransfer(transfer) {
        const transferData = {
          senderId: transfer.senderId,
          receiverId: transfer.receiverId,
          amount: transfer.amount,
          commission: transfer.commission || "0",
          currency: transfer.currency || "LYD",
          referenceNumber: transfer.referenceNumber,
          note: transfer.note
        };
        const [newTransfer] = await db.insert(transfers).values(transferData).returning();
        return newTransfer;
      }
      // تحديث رصيد المستخدم (إضافة أو طرح)
      async updateUserBalance(userId, currency, amount) {
        const existingBalance = await this.getUserBalance(userId, currency);
        if (existingBalance) {
          const currentAmount = parseFloat(existingBalance.amount);
          const newAmount = currentAmount + amount;
          const [updatedBalance] = await db.update(balances).set({ amount: newAmount.toString() }).where(
            and2(
              eq2(balances.userId, userId),
              eq2(balances.currency, currency)
            )
          ).returning();
          return updatedBalance;
        } else {
          const [newBalance] = await db.insert(balances).values({
            userId,
            currency,
            amount: Math.max(0, amount).toString()
          }).returning();
          return newBalance;
        }
      }
      async getUserTransfers(userId) {
        return await db.select().from(transfers).where(
          or(
            eq2(transfers.senderId, userId),
            eq2(transfers.receiverId, userId)
          )
        ).orderBy(desc2(transfers.createdAt));
      }
      // طلبات الترقية
      async getPendingUpgradeRequest(userId) {
        const [request] = await db.select().from(upgradeRequests).where(
          and2(
            eq2(upgradeRequests.userId, userId),
            eq2(upgradeRequests.status, "pending")
          )
        );
        return request;
      }
      async getUserUpgradeRequests(userId) {
        return await db.select().from(upgradeRequests).where(eq2(upgradeRequests.userId, userId)).orderBy(desc2(upgradeRequests.createdAt));
      }
      async getAllUpgradeRequests(status) {
        try {
          let query = `
        SELECT 
          ur.id, ur.user_id, ur.request_type, ur.full_name, ur.phone, ur.city,
          ur.commission_rate, ur.message, ur.requested_limits, ur.documents,
          ur.status, ur.created_at, ur.decided_at, ur.decided_by, ur.review_notes,
          u.email as user_email, u.full_name as user_full_name
        FROM upgrade_requests ur
        LEFT JOIN users u ON ur.user_id = u.id
      `;
          const params = [];
          if (status) {
            query += ` WHERE ur.status = $1`;
            params.push(status);
          }
          query += ` ORDER BY ur.created_at DESC`;
          const result = await pool.query(query, params);
          return result.rows.map((row) => ({
            id: row.id,
            userId: row.user_id,
            requestType: row.request_type,
            fullName: row.full_name || row.user_full_name || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
            phone: row.phone || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
            city: row.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
            commissionRate: row.commission_rate ? parseFloat(row.commission_rate) : null,
            message: row.message,
            requestedLimits: row.requested_limits,
            documents: row.documents,
            status: row.status,
            createdAt: row.created_at,
            decidedAt: row.decided_at,
            decidedBy: row.decided_by,
            reviewNotes: row.review_notes,
            userEmail: row.user_email || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"
          }));
        } catch (error) {
          console.error("Error fetching upgrade requests:", error);
          return [];
        }
      }
      async createUpgradeRequest(request) {
        const [newRequest] = await db.insert(upgradeRequests).values(request).returning();
        return newRequest;
      }
      async updateRequestStatus(requestId, status, notes) {
        const updateData = {
          status,
          reviewedAt: /* @__PURE__ */ new Date()
        };
        if (notes) {
          updateData.reviewNotes = notes;
        }
        const [updatedRequest] = await db.update(upgradeRequests).set(updateData).where(eq2(upgradeRequests.id, requestId)).returning();
        if (status === "approved") {
          const request = updatedRequest;
          const updateData2 = {};
          if (request.requestType === "agent_upgrade") {
            updateData2.type = "agent";
            updateData2.city = request.city;
            updateData2.commissionRate = request.commissionRate;
          } else if (request.requestType === "external_transfer") {
            updateData2.extTransferEnabled = true;
            if (request.requestedLimits) {
              const limits = request.requestedLimits;
              if (limits.daily) updateData2.extDailyLimit = limits.daily.toString();
              if (limits.monthly) updateData2.extMonthlyLimit = limits.monthly.toString();
              if (limits.currencies) updateData2.extAllowedCurrencies = limits.currencies;
              if (limits.countries) updateData2.extAllowedCountries = limits.countries;
            }
          }
          await this.updateUser(request.userId, updateData2);
          if (request.requestType === "agent_upgrade") {
            const user = await this.getUser(request.userId);
            if (user) {
              const existingOffices = await db.select().from(agentOffices).where(and2(
                eq2(agentOffices.agentId, request.userId),
                eq2(agentOffices.isActive, true)
              ));
              if (existingOffices.length === 0) {
                const officeCode = `AGT${user.id.toString().padStart(4, "0")}`;
                try {
                  let countryCode = "LY";
                  let cityName = request.city || user.cityName || user.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F";
                  if (request.countryId) {
                    const country = await db.select().from(countries2).where(eq2(countries2.id, request.countryId)).limit(1);
                    if (country.length > 0) {
                      countryCode = country[0].code;
                    }
                  } else if (user.countryId) {
                    const country = await db.select().from(countries2).where(eq2(countries2.id, user.countryId)).limit(1);
                    if (country.length > 0) {
                      countryCode = country[0].code;
                    }
                  }
                  if (user.cityName) {
                    cityName = user.cityName;
                  }
                  if (request.requestType === "external_transfer" && request.cityNameManual) {
                    cityName = request.cityNameManual;
                  }
                  const newOffice = await this.createAgentOffice({
                    agentId: request.userId,
                    countryCode,
                    city: cityName,
                    officeCode,
                    officeName: user.officeName || `\u0645\u0643\u062A\u0628 ${user.fullName}${countryCode !== "LY" ? ` - ${countryCode}` : ""}`,
                    contactInfo: user.phone || request.phone || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
                    address: "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
                    isActive: true
                  });
                  console.log(`\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0645\u0643\u062A\u0628 \u062A\u0644\u0642\u0627\u0626\u064A\u0627\u064B \u0644\u0644\u0648\u0643\u064A\u0644 ${request.userId} \u0628\u0631\u0645\u0632 ${officeCode} \u0641\u064A ${cityName} - ${countryCode} (\u0646\u0648\u0639 \u0627\u0644\u0637\u0644\u0628: ${request.requestType})`);
                  const commissionRate = request.commissionRate ? parseFloat(request.commissionRate) : 1.5;
                  const currencies = ["USD", "LYD"];
                  if (countryCode === "TR") currencies.push("TRY");
                  else if (countryCode === "EG") currencies.push("EGP");
                  else if (countryCode === "TN") currencies.push("TND");
                  else if (countryCode === "AE") currencies.push("AED");
                  else if (countryCode === "GB") currencies.push("GBP");
                  else if (["FR", "DE", "IT", "ES"].includes(countryCode)) currencies.push("EUR");
                  for (const currency of currencies) {
                    try {
                      await this.createOrUpdateAgentCommission({
                        agentId: request.userId,
                        currencyCode: currency,
                        type: "percentage",
                        value: commissionRate.toString()
                      });
                    } catch (commError) {
                      console.error(`\u26A0\uFE0F \u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0639\u0645\u0648\u0644\u0629 ${currency} \u0644\u0644\u0648\u0643\u064A\u0644 ${request.userId}:`, commError);
                    }
                  }
                  console.log(`\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u0648\u0643\u064A\u0644 ${request.userId} \u0628\u0646\u0633\u0628\u0629 ${commissionRate}% \u0644\u0644\u0639\u0645\u0644\u0627\u062A: ${currencies.join(", ")}`);
                } catch (error) {
                  console.error(`\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u062A\u0644\u0642\u0627\u0626\u064A \u0644\u0644\u0648\u0643\u064A\u0644 ${request.userId}:`, error);
                }
              } else {
                console.log(`\u2139\uFE0F \u0627\u0644\u0645\u0643\u062A\u0628 \u0645\u0648\u062C\u0648\u062F \u0645\u0633\u0628\u0642\u0627\u064B \u0644\u0644\u0648\u0643\u064A\u0644 ${request.userId}, \u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0641\u0642\u0637`);
              }
            }
          }
          let notificationTitle = "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0627\u0644\u0637\u0644\u0628";
          let notificationBody = "";
          if (request.requestType === "agent_upgrade") {
            notificationTitle = "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u0627\u0644\u062A\u0631\u0642\u064A\u0629";
            notificationBody = "\u062A\u0647\u0627\u0646\u064A\u0646\u0627! \u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u062D\u0633\u0627\u0628\u0643 \u0625\u0644\u0649 \u0645\u0643\u062A\u0628 \u0635\u0631\u0627\u0641\u0629 \u0648\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0645\u0643\u062A\u0628\u0643 \u062A\u0644\u0642\u0627\u0626\u064A\u0627\u064B. \u064A\u0645\u0643\u0646\u0643 \u0627\u0644\u0622\u0646 \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0645\u064A\u0632\u0627\u062A \u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0648\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646.";
          } else if (request.requestType === "external_transfer") {
            notificationTitle = "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A";
            notificationBody = "\u062A\u0647\u0627\u0646\u064A\u0646\u0627! \u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A. \u064A\u0645\u0643\u0646\u0643 \u0627\u0644\u0622\u0646 \u0625\u062C\u0631\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062F\u0648\u0644\u064A\u0629 \u0636\u0645\u0646 \u0627\u0644\u062D\u062F\u0648\u062F \u0627\u0644\u0645\u0639\u062A\u0645\u062F\u0629.";
          }
          await this.createUserNotification({
            userId: request.userId,
            title: notificationTitle,
            body: notificationBody,
            type: "success",
            isRead: false
          });
        } else if (status === "rejected") {
          await this.createUserNotification({
            userId: updatedRequest.userId,
            title: "\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628 \u0627\u0644\u062A\u0631\u0642\u064A\u0629",
            body: `\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u062D\u0633\u0627\u0628\u0643. ${notes ? "\u0627\u0644\u0633\u0628\u0628: " + notes : ""}`,
            type: "error",
            isRead: false
          });
        }
        return updatedRequest;
      }
      // سوق العملات
      async createMarketOffer(offer) {
        const [newOffer] = await db.insert(marketOffers).values(offer).returning();
        return newOffer;
      }
      async getMarketOffers(filters) {
        let query = db.select().from(marketOffers);
        if (filters) {
          const conditions = [];
          if (filters.status) {
            conditions.push(eq2(marketOffers.status, filters.status));
          }
          if (filters.side) {
            conditions.push(eq2(marketOffers.side, filters.side));
          }
          if (filters.baseCurrency) {
            conditions.push(eq2(marketOffers.baseCurrency, filters.baseCurrency));
          }
          if (filters.quoteCurrency) {
            conditions.push(eq2(marketOffers.quoteCurrency, filters.quoteCurrency));
          }
          if (conditions.length > 0) {
            query = query.where(and2(...conditions));
          }
        }
        return await query.orderBy(desc2(marketOffers.createdAt));
      }
      async getUserMarketOffers(userId) {
        return await db.select().from(marketOffers).where(
          and2(
            eq2(marketOffers.userId, userId),
            eq2(marketOffers.status, "open")
          )
        ).orderBy(desc2(marketOffers.createdAt));
      }
      async getMarketOfferById(id) {
        const [offer] = await db.select().from(marketOffers).where(eq2(marketOffers.id, id));
        return offer;
      }
      async updateMarketOfferStatus(id, status, remainingAmount) {
        const updateData = { status };
        if (remainingAmount !== void 0) {
          updateData.remainingAmount = remainingAmount.toString();
        }
        const [updatedOffer] = await db.update(marketOffers).set(updateData).where(eq2(marketOffers.id, id)).returning();
        return updatedOffer;
      }
      // دالة تنظيف العروض المنتهية الصلاحية مع إرجاع الأموال
      async expireMarketOffers() {
        const now = /* @__PURE__ */ new Date();
        const expiredOffers = await db.select().from(marketOffers).where(
          and2(
            eq2(marketOffers.status, "open"),
            lt(marketOffers.expiresAt, now)
          )
        );
        if (expiredOffers.length === 0) {
          return 0;
        }
        console.log(`\u{1F552} \u0645\u0639\u0627\u0644\u062C\u0629 ${expiredOffers.length} \u0639\u0631\u0636 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629...`);
        for (const offer of expiredOffers) {
          try {
            if (offer.side === "sell" && Number(offer.remainingAmount) > 0) {
              const remainingAmount = Number(offer.remainingAmount);
              console.log(`\u{1F4B0} \u0625\u0631\u062C\u0627\u0639 ${remainingAmount} ${offer.baseCurrency} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${offer.userId} - \u0639\u0631\u0636 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629 ${offer.id}`);
              await this.updateUserBalance(offer.userId, offer.baseCurrency, remainingAmount);
              await this.createTransaction({
                userId: offer.userId,
                type: "exchange",
                amount: remainingAmount.toString(),
                currency: offer.baseCurrency,
                description: `\u0625\u0631\u062C\u0627\u0639 ${remainingAmount} ${offer.baseCurrency} \u0645\u0646 \u0639\u0631\u0636 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629 - \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A: ${offer.id}`,
                referenceNumber: `EXPIRED-${offer.id}`
              });
              console.log(`\u2705 \u062A\u0645 \u0625\u0631\u062C\u0627\u0639 ${remainingAmount} ${offer.baseCurrency} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${offer.userId}`);
            }
            await db.update(marketOffers).set({ status: "cancelled" }).where(eq2(marketOffers.id, offer.id));
          } catch (error) {
            console.error(`\u274C \u062E\u0637\u0623 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0639\u0631\u0636 \u0627\u0644\u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629 ${offer.id}:`, error);
          }
        }
        console.log(`\u2705 \u062A\u0645 \u0645\u0639\u0627\u0644\u062C\u0629 ${expiredOffers.length} \u0639\u0631\u0636 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629 \u0628\u0646\u062C\u0627\u062D`);
        return expiredOffers.length;
      }
      async createMarketTransaction(transaction) {
        const [newTransaction] = await db.insert(marketTransactions).values(transaction).returning();
        return newTransaction;
      }
      async getUserMarketTransactions(userId) {
        return await db.select().from(marketTransactions).where(
          eq2(marketTransactions.buyerId, userId)
        ).orderBy(desc2(marketTransactions.createdAt));
      }
      // حوالات مكاتب الصرافة
      async createAgentTransfer(transfer) {
        const [newTransfer] = await db.insert(agentTransfers).values(transfer).returning();
        return newTransfer;
      }
      async getAgentTransfers(agentId) {
        try {
          console.log("\u0628\u062F\u0621 \u062C\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0644\u0644\u0648\u0643\u064A\u0644:", agentId);
          const query = `
        SELECT * FROM agent_transfers 
        WHERE (sender_id = $1 OR destination_agent_id = $1)
          AND id NOT IN (
            SELECT transfer_id FROM hidden_transfers WHERE user_id = $1
          )
        ORDER BY created_at DESC
      `;
          console.log("\u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u0627\u0633\u062A\u0639\u0644\u0627\u0645:", query, "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A:", [agentId]);
          const result = await pool.query(query, [agentId]);
          console.log("\u062A\u0645 \u062C\u0644\u0628 \u0639\u062F\u062F \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A:", result.rows.length);
          console.log("\u0639\u064A\u0646\u0629 \u0645\u0646 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u064F\u0633\u062A\u0644\u0645\u0629:", result.rows[0] || "\u0644\u0627 \u062A\u0648\u062C\u062F \u0646\u062A\u0627\u0626\u062C");
          const transfers2 = result.rows.map((row) => ({
            id: row.id,
            senderId: row.sender_id,
            receiverId: row.receiver_id,
            agentId: row.agent_id,
            destinationAgentId: row.destination_agent_id,
            amount: row.amount,
            commission: row.commission,
            currency: row.currency,
            transferCode: row.transfer_code,
            // تحويل snake_case إلى camelCase
            receiverCode: row.receiver_code,
            // تحويل snake_case إلى camelCase
            note: row.note,
            status: row.status,
            type: row.type,
            country: row.country,
            city: row.city,
            recipientName: row.recipient_name,
            recipientPhone: row.recipient_phone,
            recipientId: row.recipient_id,
            createdAt: row.created_at,
            completedAt: row.completed_at,
            amountOriginal: row.amount_original,
            commissionSystem: row.commission_system,
            commissionRecipient: row.commission_recipient,
            amountPending: row.amount_pending
          }));
          console.log("\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0625\u0644\u0649 camelCase\u060C \u0639\u062F\u062F \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A:", transfers2.length);
          console.log("\u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u0645\u0648\u062C\u0648\u062F\u0629:", transfers2.map((t) => ({ id: t.id, type: t.type, status: t.status, currency: t.currency })));
          return transfers2;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0645\u0641\u0635\u0644 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A:", error);
          throw error;
        }
      }
      async getAgentTransferByCode(code2) {
        const [transfer] = await db.select().from(agentTransfers).where(eq2(agentTransfers.transferCode, code2));
        return transfer;
      }
      async getAgentTransferByReceiverCode(receiverCode) {
        const [transfer] = await db.select().from(agentTransfers).where(eq2(agentTransfers.receiverCode, receiverCode));
        return transfer;
      }
      async updateAgentTransferStatus(id, status, receiverId) {
        const updateData = { status };
        if (status === "completed") {
          updateData.completedAt = /* @__PURE__ */ new Date();
        }
        if (receiverId) {
          updateData.receiverId = receiverId;
        }
        const [updatedTransfer] = await db.update(agentTransfers).set(updateData).where(eq2(agentTransfers.id, id)).returning();
        return updatedTransfer;
      }
      // تنفيذ دوال إدارة الحوالات بين المدن
      // إنشاء حوالة بين مدينتين
      async createCityTransfer(transfer) {
        const [result] = await db.insert(cityTransfers).values(transfer).returning();
        return result;
      }
      // الحصول على جميع الحوالات المتعلقة بمكتب صرافة معين (إما كمرسل أو مستلم)
      async getCityTransfers(agentId) {
        const result = await db.select().from(cityTransfers).where(
          or(
            eq2(cityTransfers.senderId, agentId),
            eq2(cityTransfers.receiverOfficeId, agentId)
          )
        ).orderBy(desc2(cityTransfers.createdAt));
        return result;
      }
      // البحث عن حوالة بالكود
      async getCityTransferByCode(code2) {
        const result = await db.select().from(cityTransfers).where(eq2(cityTransfers.code, code2)).limit(1);
        return result[0];
      }
      // تحديث حالة الحوالة
      async updateCityTransferStatus(id, status) {
        const updateData = { status };
        if (status === "completed") {
          updateData.completedAt = /* @__PURE__ */ new Date();
        }
        const [result] = await db.update(cityTransfers).set(updateData).where(eq2(cityTransfers.id, id)).returning();
        return result;
      }
      // دوال إدارة الحوالات الدولية
      async createInternationalTransfer(transfer) {
        const [result] = await db.insert(internationalTransfers).values(transfer).returning();
        return result;
      }
      async getInternationalTransfers(agentId) {
        const result = await db.select().from(internationalTransfers).where(
          or(
            eq2(internationalTransfers.senderId, agentId),
            eq2(internationalTransfers.receiverOfficeId, agentId)
          )
        ).orderBy(desc2(internationalTransfers.createdAt));
        return result;
      }
      async getInternationalTransferByCode(code2) {
        const result = await db.select().from(internationalTransfers).where(eq2(internationalTransfers.code, code2)).limit(1);
        return result[0];
      }
      async updateInternationalTransferStatus(id, status) {
        const updateData = { status };
        if (status === "completed") {
          updateData.completedAt = /* @__PURE__ */ new Date();
        }
        const [result] = await db.update(internationalTransfers).set(updateData).where(eq2(internationalTransfers.id, id)).returning();
        return result;
      }
      async cancelInternationalTransfer(id) {
        try {
          const [transfer] = await db.select().from(agentTransfers).where(eq2(agentTransfers.id, id)).limit(1);
          if (!transfer) {
            return { success: false, message: "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" };
          }
          if (transfer.status !== "pending") {
            return { success: false, message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 - \u0627\u0644\u062D\u0627\u0644\u0629 \u0627\u0644\u062D\u0627\u0644\u064A\u0629: " + transfer.status };
          }
          const [cancelledTransfer] = await db.update(agentTransfers).set({ status: "cancelled" }).where(eq2(agentTransfers.id, id)).returning();
          const totalDeducted = parseFloat(transfer.amountPending || transfer.amount) + parseFloat(transfer.commissionSystem || transfer.commission);
          await this.updateUserBalance(transfer.senderId, transfer.currency, totalDeducted);
          return { success: true, transfer: cancelledTransfer };
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A:", error);
          return { success: false, message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644" };
        }
      }
      // دوال إدارة عمولات المكاتب حسب المدن
      async getOfficeCommissions(officeId) {
        return db.select().from(officeCommissions).where(eq2(officeCommissions.officeId, officeId));
      }
      async getOfficeCommissionByCity(officeId, city) {
        const [commission] = await db.select().from(officeCommissions).where(and2(
          eq2(officeCommissions.officeId, officeId),
          eq2(officeCommissions.city, city)
        ));
        return commission;
      }
      async createOrUpdateOfficeCommission(commission) {
        const existing = await this.getOfficeCommissionByCity(commission.officeId, commission.city);
        if (existing) {
          const [updated] = await db.update(officeCommissions).set({ commissionRate: commission.commissionRate }).where(eq2(officeCommissions.id, existing.id)).returning();
          return updated;
        } else {
          const [newCommission] = await db.insert(officeCommissions).values(commission).returning();
          return newCommission;
        }
      }
      async deleteOfficeCommission(id) {
        await db.delete(officeCommissions).where(eq2(officeCommissions.id, id));
      }
      // تنفيذ دوال إدارة عمولات المكاتب حسب الدول
      async getOfficeCountryCommissions(officeId) {
        return db.select().from(officeCountryCommissions).where(eq2(officeCountryCommissions.officeId, officeId));
      }
      async getOfficeCommissionByCountry(officeId, country) {
        const [commission] = await db.select().from(officeCountryCommissions).where(and2(
          eq2(officeCountryCommissions.officeId, officeId),
          eq2(officeCountryCommissions.country, country)
        ));
        return commission;
      }
      async createOrUpdateOfficeCountryCommission(commission) {
        const { officeId, country, commissionRate } = commission;
        const existingCommission = await this.getOfficeCommissionByCountry(officeId, country);
        if (existingCommission) {
          const [updated] = await db.update(officeCountryCommissions).set({ commissionRate }).where(eq2(officeCountryCommissions.id, existingCommission.id)).returning();
          return updated;
        } else {
          const [newCommission] = await db.insert(officeCountryCommissions).values(commission).returning();
          return newCommission;
        }
      }
      async deleteOfficeCountryCommission(id) {
        await db.delete(officeCountryCommissions).where(eq2(officeCountryCommissions.id, id));
      }
      // تنفيذ دوال إعدادات النظام
      async getAdminSetting(key) {
        const [setting] = await db.select().from(adminSettings).where(eq2(adminSettings.key, key));
        return setting;
      }
      async getAdminSettings() {
        return db.select().from(adminSettings);
      }
      async createOrUpdateAdminSetting(setting) {
        const { key, value, description } = setting;
        const existingSetting = await this.getAdminSetting(key);
        if (existingSetting) {
          const [updated] = await db.update(adminSettings).set({
            value,
            description,
            updatedAt: /* @__PURE__ */ new Date()
          }).where(eq2(adminSettings.key, key)).returning();
          return updated;
        } else {
          const [newSetting] = await db.insert(adminSettings).values(setting).returning();
          return newSetting;
        }
      }
      async deleteAdminSetting(key) {
        await db.delete(adminSettings).where(eq2(adminSettings.key, key));
      }
      // وظائف إدارة طلبات توثيق الحسابات
      async getUserVerificationRequest(userId) {
        const [request] = await db.select().from(verificationRequests).where(eq2(verificationRequests.userId, userId));
        return request;
      }
      async getUserVerificationRequestById(requestId) {
        const [request] = await db.select().from(verificationRequests).where(eq2(verificationRequests.id, requestId));
        return request;
      }
      async getAllVerificationRequests(status) {
        console.log(`\u{1F50D} \u062C\u0644\u0628 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642 - \u0627\u0644\u0641\u0644\u062A\u0631: ${status || "\u0627\u0644\u0643\u0644"}`);
        let query = db.select({
          request: verificationRequests,
          user: {
            id: users.id,
            fullName: users.fullName,
            email: users.email,
            phone: users.phone
          }
        }).from(verificationRequests).innerJoin(users, eq2(verificationRequests.userId, users.id)).orderBy(desc2(verificationRequests.createdAt));
        if (status) {
          query = query.where(eq2(verificationRequests.status, status));
        }
        const results = await query;
        console.log(`\u{1F4CB} \u0639\u062F\u062F \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642 \u0627\u0644\u0645\u064F\u0633\u062A\u0644\u0645\u0629: ${results.length}`);
        const formattedResults = results.map((row) => ({
          ...row.request,
          user: row.user
        }));
        console.log(`\u2705 \u062A\u0646\u0633\u064A\u0642 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642 \u0645\u0643\u062A\u0645\u0644: ${formattedResults.length}`);
        return formattedResults;
      }
      async createVerificationRequest(request) {
        const [newRequest] = await db.insert(verificationRequests).values(request).returning();
        return newRequest;
      }
      async updateVerificationRequestStatus(requestId, status, notes) {
        const [updatedRequest] = await db.update(verificationRequests).set({
          status,
          notes,
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq2(verificationRequests.id, requestId)).returning();
        if (updatedRequest) {
          const userId = updatedRequest.userId;
          if (status === "approved") {
            await db.update(users).set({ verified: true }).where(eq2(users.id, userId));
            const user = await this.getUser(userId);
            if (user && user.type === "agent") {
              const existingOffice = await db.select().from(agentOffices).where(eq2(agentOffices.agentId, userId)).limit(1);
              if (existingOffice.length === 0) {
                const officeCode = `AGT${userId.toString().padStart(3, "0")}`;
                await db.insert(agentOffices).values({
                  agentId: userId,
                  countryCode: "LY",
                  city: user.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
                  officeCode,
                  officeName: `\u0645\u0643\u062A\u0628 ${user.fullName} - ${user.cityName || user.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}`,
                  contactInfo: user.phone || "",
                  address: `${user.cityName || user.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}\u060C ${user.countryName || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}`,
                  isActive: true,
                  commissionRate: user.commissionRate || 3,
                  userId
                });
                console.log(`\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0645\u0643\u062A\u0628 \u0644\u0644\u0648\u0643\u064A\u0644 ${user.fullName} (${userId}) \u0628\u0643\u0648\u062F ${officeCode}`);
              }
            }
            await this.createUserNotification({
              userId,
              title: "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u0627\u0644\u062D\u0633\u0627\u0628",
              body: "\u062A\u0647\u0627\u0646\u064A\u0646\u0627! \u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u062D\u0633\u0627\u0628\u0643 \u0648\u0623\u0635\u0628\u062D \u062D\u0633\u0627\u0628\u0643 \u0645\u0648\u062B\u0642\u064B\u0627 \u0627\u0644\u0622\u0646.",
              type: "success",
              isRead: false
            });
          } else if (status === "rejected") {
            await this.createUserNotification({
              userId,
              title: "\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u0627\u0644\u062D\u0633\u0627\u0628",
              body: notes ? `\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u062D\u0633\u0627\u0628\u0643. \u0627\u0644\u0633\u0628\u0628: ${notes}` : "\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u062D\u0633\u0627\u0628\u0643. \u064A\u0631\u062C\u0649 \u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0625\u062F\u0627\u0631\u0629.",
              type: "error",
              isRead: false
            });
          }
        }
        return updatedRequest;
      }
      // ===== وظائف إدارة الإشعارات =====
      async getUserNotifications(userId) {
        return await db.select().from(userNotifications).where(eq2(userNotifications.userId, userId)).orderBy(desc2(userNotifications.createdAt));
      }
      async createUserNotification(notification) {
        console.log("=== \u0628\u062F\u0627\u064A\u0629 \u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u062C\u062F\u064A\u062F ===");
        console.log("\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0625\u0634\u0639\u0627\u0631:", notification);
        try {
          const [result] = await db.insert(userNotifications).values(notification).returning();
          console.log("\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0628\u0646\u062C\u0627\u062D:", result);
          try {
            const [subscription] = await db.select().from(pushSubscriptions).where(eq2(pushSubscriptions.userId, notification.userId));
            if (subscription) {
              const pushNotifications = await Promise.resolve().then(() => (init_push_notifications(), push_notifications_exports));
              await pushNotifications.sendPushNotificationToUser(notification.userId, {
                title: notification.title,
                body: notification.body || "\u0644\u062F\u064A\u0643 \u0625\u0634\u0639\u0627\u0631 \u062C\u062F\u064A\u062F",
                data: {
                  type: "user_notification",
                  notificationId: result.id,
                  notificationType: notification.type
                },
                url: "/notifications",
                tag: `notification-${result.id}`
              });
              console.log(`\u2705 \u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 push \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${notification.userId}`);
            } else {
              console.log(`\u2139\uFE0F \u0644\u0627 \u062A\u0648\u062C\u062F \u0627\u0634\u062A\u0631\u0627\u0643\u0627\u062A \u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${notification.userId} - \u062A\u0645 \u062A\u062E\u0637\u064A \u0625\u0631\u0633\u0627\u0644 push`);
            }
          } catch (pushError) {
            console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 push \u0644\u0644\u0625\u0634\u0639\u0627\u0631 \u0627\u0644\u062C\u062F\u064A\u062F:", pushError);
          }
          return result;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u0634\u0639\u0627\u0631:", error);
          throw error;
        }
      }
      async markNotificationAsRead(notificationId) {
        const [notification] = await db.update(userNotifications).set({ isRead: true }).where(eq2(userNotifications.id, notificationId)).returning();
        if (!notification) {
          throw new Error("\u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F");
        }
        return notification;
      }
      async markAllUserNotificationsAsRead(userId) {
        await db.update(userNotifications).set({ isRead: true }).where(eq2(userNotifications.userId, userId));
      }
      // ===== وظائف الدردشة الفورية =====
      async getChatRooms() {
        return await db.select().from(chatRooms).orderBy(desc2(chatRooms.createdAt));
      }
      async getPublicChatRoom() {
        const [room] = await db.select().from(chatRooms).where(eq2(chatRooms.isPublic, true)).limit(1);
        return room;
      }
      async getChatMessages(roomId, limit = 50, userId) {
        const messages = await db.select({
          message: chatMessages,
          senderName: users.fullName
        }).from(chatMessages).innerJoin(users, eq2(chatMessages.senderId, users.id)).where(eq2(chatMessages.roomId, roomId)).orderBy(desc2(chatMessages.createdAt)).limit(limit);
        const messagesWithLikes = await Promise.all(messages.map(async (row) => {
          const likesCountResult = await db.select({ count: sql3`count(*)` }).from(messageLikes).where(eq2(messageLikes.messageId, row.message.id));
          const likesCount = Number(likesCountResult[0]?.count || 0);
          let likedByMe = false;
          if (userId) {
            const userLike = await db.select().from(messageLikes).where(
              and2(
                eq2(messageLikes.messageId, row.message.id),
                eq2(messageLikes.userId, userId)
              )
            ).limit(1);
            likedByMe = userLike.length > 0;
          }
          return {
            ...row.message,
            senderName: row.senderName,
            likesCount,
            likedByMe
          };
        }));
        return messagesWithLikes;
      }
      // تبديل إعجاب الرسالة
      async toggleMessageLike(messageId, userId) {
        const existingLike = await db.select().from(messageLikes).where(
          and2(
            eq2(messageLikes.messageId, messageId),
            eq2(messageLikes.userId, userId)
          )
        ).limit(1);
        let liked;
        if (existingLike.length > 0) {
          await db.delete(messageLikes).where(
            and2(
              eq2(messageLikes.messageId, messageId),
              eq2(messageLikes.userId, userId)
            )
          );
          liked = false;
        } else {
          await db.insert(messageLikes).values({
            messageId,
            userId
          });
          liked = true;
        }
        const countResult = await db.select({ count: sql3`count(*)` }).from(messageLikes).where(eq2(messageLikes.messageId, messageId));
        const count = Number(countResult[0]?.count || 0);
        return { liked, count };
      }
      // جلب قائمة المعجبين برسالة
      async getMessageLikes(messageId) {
        const likes = await db.select({
          userId: messageLikes.userId,
          userName: users.fullName
        }).from(messageLikes).innerJoin(users, eq2(messageLikes.userId, users.id)).where(eq2(messageLikes.messageId, messageId)).orderBy(desc2(messageLikes.createdAt));
        return likes;
      }
      async createChatMessage(message) {
        const [newMessage] = await db.insert(chatMessages).values(message).returning();
        return newMessage;
      }
      // ===== وظائف الدردشة الخاصة (1 إلى 1) =====
      async getUserPrivateChats(userId) {
        const result = await db.execute(sql3`
      SELECT pc.*, 
        CASE 
          WHEN pc.user1_id = ${userId} THEN json_build_object('id', u2.id, 'fullName', u2.full_name)
          ELSE json_build_object('id', u1.id, 'fullName', u1.full_name)
        END as other_user
      FROM private_chats pc
      JOIN users u1 ON pc.user1_id = u1.id
      JOIN users u2 ON pc.user2_id = u2.id
      WHERE pc.user1_id = ${userId} OR pc.user2_id = ${userId}
      ORDER BY pc.last_message_at DESC
    `);
        return result.rows.map((row) => ({
          id: row.id,
          user1Id: row.user1_id,
          user2Id: row.user2_id,
          lastMessageAt: row.last_message_at,
          createdAt: row.created_at,
          otherUser: row.other_user
        }));
      }
      async getPrivateChat(user1Id, user2Id) {
        const result = await db.execute(sql3`
      SELECT * FROM private_chats 
      WHERE (user1_id = ${user1Id} AND user2_id = ${user2Id})
         OR (user1_id = ${user2Id} AND user2_id = ${user1Id})
      LIMIT 1
    `);
        return result.rows.length > 0 ? result.rows[0] : void 0;
      }
      async createPrivateChat(user1Id, user2Id) {
        const [firstUserId, secondUserId] = user1Id < user2Id ? [user1Id, user2Id] : [user2Id, user1Id];
        const [newChat] = await db.insert(privateChats).values({
          user1Id: firstUserId,
          user2Id: secondUserId
        }).returning();
        return newChat;
      }
      async getPrivateMessages(chatId, limit = 50) {
        const result = await db.execute(sql3`
      SELECT pm.*, u.full_name as sender_name
      FROM private_messages pm
      JOIN users u ON pm.sender_id = u.id
      WHERE pm.chat_id = ${chatId}
      ORDER BY pm.created_at DESC
      LIMIT ${limit}
    `);
        return result.rows;
      }
      async createPrivateMessage(message) {
        const [newMessage] = await db.insert(privateMessages).values(message).returning();
        await db.update(privateChats).set({ lastMessageAt: /* @__PURE__ */ new Date() }).where(eq2(privateChats.id, message.chatId));
        return newMessage;
      }
      async markMessagesAsRead(chatId, userId) {
        await db.update(privateMessages).set({ isRead: true }).where(
          and2(
            eq2(privateMessages.chatId, chatId),
            // تحديث فقط الرسائل التي تم استلامها (أي ليست مرسلة) من قبل المستخدم
            sql3`sender_id != ${userId}`
          )
        );
      }
      async getUnreadMessagesCount(userId) {
        const result = await db.execute(sql3`
      SELECT pm.chat_id, COUNT(*) as count
      FROM private_messages pm
      JOIN private_chats pc ON pm.chat_id = pc.id
      WHERE (pc.user1_id = ${userId} OR pc.user2_id = ${userId})
        AND pm.sender_id != ${userId}
        AND pm.is_read = false
      GROUP BY pm.chat_id
    `);
        return result.rows.map((row) => ({
          chatId: row.chat_id,
          count: parseInt(row.count)
        }));
      }
      // تنفيذ وظائف محادثات المجموعات
      async createGroupChat(groupChat) {
        const [chat] = await db.insert(groupChats).values(groupChat).returning();
        await db.insert(groupMembers).values({
          groupId: chat.id,
          userId: groupChat.creatorId,
          role: "owner"
        });
        return chat;
      }
      async getGroupChat(groupId) {
        const [chat] = await db.select().from(groupChats).where(eq2(groupChats.id, groupId));
        return chat;
      }
      async getUserGroupChats(userId) {
        const result = await db.execute(sql3`
      SELECT g.*
      FROM group_chats g
      JOIN group_members m ON g.id = m.group_id
      WHERE m.user_id = ${userId}
      ORDER BY g.created_at DESC
    `);
        return result.rows;
      }
      // دالة جديدة للحصول على جميع المجموعات العامة
      async getAllPublicGroupChats() {
        const result = await db.execute(sql3`
      SELECT *
      FROM group_chats
      WHERE is_private = false
      ORDER BY created_at DESC
    `);
        return result.rows;
      }
      async addGroupMember(member) {
        const [result] = await db.insert(groupMembers).values(member).onConflictDoNothing().returning();
        return result;
      }
      async getGroupMembers(groupId) {
        const result = await db.execute(sql3`
      SELECT m.*, u.full_name as "fullName"
      FROM group_members m
      JOIN users u ON m.user_id = u.id
      WHERE m.group_id = ${groupId}
      ORDER BY 
        CASE WHEN m.role = 'admin' THEN 0 ELSE 1 END,
        m.joined_at ASC
    `);
        return result.rows;
      }
      // جلب أعضاء غرفة الدردشة العامة (جميع المستخدمين المفعلين)
      async getRoomMembers(roomId) {
        const result = await db.execute(sql3`
      SELECT id, full_name as "fullName"
      FROM users
      WHERE active = true
      ORDER BY id
    `);
        return result.rows;
      }
      async isGroupMember(groupId, userId) {
        const result = await db.execute(sql3`
      SELECT COUNT(*) as count
      FROM group_members
      WHERE group_id = ${groupId} AND user_id = ${userId}
    `);
        return parseInt(result.rows[0].count) > 0;
      }
      async isGroupAdmin(groupId, userId) {
        const result = await db.execute(sql3`
      SELECT 1
      FROM group_members
      WHERE group_id = ${groupId}
        AND user_id = ${userId}
        AND role = 'admin'
    `);
        return result.rows.length > 0;
      }
      // إدارة أعضاء المجموعات - دوال جديدة
      async getGroupMember(groupId, userId) {
        const [member] = await db.select().from(groupMembers).where(and2(eq2(groupMembers.groupId, groupId), eq2(groupMembers.userId, userId)));
        return member;
      }
      async getUserRoleInGroup(groupId, userId) {
        const result = await db.execute(sql3`
      SELECT role
      FROM group_members
      WHERE group_id = ${groupId} AND user_id = ${userId}
    `);
        return result.rows.length > 0 ? result.rows[0].role : null;
      }
      async setMemberMuteUntil(groupId, userId, until) {
        try {
          const result = await db.execute(sql3`
        UPDATE group_members 
        SET muted_until = ${until}
        WHERE group_id = ${groupId} AND user_id = ${userId}
      `);
          return result.rowCount > 0;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0643\u062A\u0645 \u0627\u0644\u0639\u0636\u0648:", error);
          return false;
        }
      }
      async removeGroupMember(groupId, userId) {
        try {
          const result = await db.execute(sql3`
        DELETE FROM group_members 
        WHERE group_id = ${groupId} AND user_id = ${userId}
      `);
          return result.rowCount > 0;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0639\u0636\u0648:", error);
          return false;
        }
      }
      async deleteGroup(groupId) {
        try {
          await db.execute(sql3`
        DELETE FROM group_messages 
        WHERE group_id = ${groupId}
      `);
          await db.execute(sql3`
        DELETE FROM group_members 
        WHERE group_id = ${groupId}
      `);
          const result = await db.execute(sql3`
        DELETE FROM group_chats 
        WHERE id = ${groupId}
      `);
          return result.rowCount > 0;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629:", error);
          return false;
        }
      }
      async isUserMuted(groupId, userId) {
        const result = await db.execute(sql3`
      SELECT muted_until
      FROM group_members
      WHERE group_id = ${groupId} 
        AND user_id = ${userId}
        AND muted_until IS NOT NULL 
        AND muted_until > NOW()
    `);
        return result.rows.length > 0;
      }
      async isUserBanned(groupId, userId) {
        const result = await db.execute(sql3`
      SELECT is_banned
      FROM group_members
      WHERE group_id = ${groupId} 
        AND user_id = ${userId}
        AND is_banned = true
    `);
        return result.rows.length > 0;
      }
      async banGroupMember(groupId, userId, bannedBy, reason) {
        try {
          const result = await db.execute(sql3`
        UPDATE group_members 
        SET is_banned = true,
            banned_by = ${bannedBy},
            banned_at = NOW(),
            ban_reason = ${reason || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}
        WHERE group_id = ${groupId} AND user_id = ${userId}
      `);
          return result.rowCount > 0;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0638\u0631 \u0627\u0644\u0639\u0636\u0648:", error);
          return false;
        }
      }
      async unbanGroupMember(groupId, userId) {
        try {
          const result = await db.execute(sql3`
        UPDATE group_members 
        SET is_banned = false,
            banned_by = NULL,
            banned_at = NULL,
            ban_reason = NULL
        WHERE group_id = ${groupId} AND user_id = ${userId}
      `);
          return result.rowCount > 0;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u062D\u0638\u0631 \u0627\u0644\u0639\u0636\u0648:", error);
          return false;
        }
      }
      async createGroupMessage(message) {
        const [result] = await db.insert(groupMessages).values(message).returning();
        return result;
      }
      async getGroupMessages(groupId, limit = 50) {
        const query = sql3`
      SELECT m.*, u.full_name as "senderName"
      FROM group_messages m
      JOIN users u ON m.sender_id = u.id
      WHERE m.group_id = ${groupId}
      ORDER BY m.created_at DESC
      LIMIT ${limit}
    `;
        const result = await db.execute(query);
        return result.rows;
      }
      // Agent commission methods implementation
      async getAgentCommissions(agentId) {
        return db.select().from(agentCommissions).where(eq2(agentCommissions.agentId, agentId)).orderBy(agentCommissions.currencyCode);
      }
      async getAllAgentCommissions() {
        const result = await db.select({
          id: agentCommissions.id,
          agentId: agentCommissions.agentId,
          currencyCode: agentCommissions.currencyCode,
          type: agentCommissions.type,
          value: agentCommissions.value,
          createdAt: agentCommissions.createdAt,
          updatedAt: agentCommissions.updatedAt,
          agentName: users.fullName
        }).from(agentCommissions).innerJoin(users, eq2(agentCommissions.agentId, users.id)).orderBy(agentCommissions.currencyCode);
        return result.filter((item) => item.agentName);
      }
      async getAgentCommissionByCurrency(agentId, currencyCode) {
        const [commission] = await db.select().from(agentCommissions).where(and2(
          eq2(agentCommissions.agentId, agentId),
          eq2(agentCommissions.currencyCode, currencyCode)
        ));
        return commission;
      }
      async createOrUpdateAgentCommission(commission) {
        const existing = await this.getAgentCommissionByCurrency(commission.agentId, commission.currencyCode);
        if (existing) {
          const [updated] = await db.update(agentCommissions).set({
            type: commission.type,
            value: commission.value,
            updatedAt: /* @__PURE__ */ new Date()
          }).where(eq2(agentCommissions.id, existing.id)).returning();
          return updated;
        } else {
          const [newCommission] = await db.insert(agentCommissions).values(commission).returning();
          return newCommission;
        }
      }
      async deleteAgentCommission(id) {
        await db.delete(agentCommissions).where(eq2(agentCommissions.id, id));
      }
      // City Transfer Commission Tiers
      async getCityTransferCommissions(agentId) {
        return await db.select().from(cityTransferCommissions).where(eq2(cityTransferCommissions.agentId, agentId)).orderBy(asc(cityTransferCommissions.currencyCode), asc(cityTransferCommissions.minAmount));
      }
      async createCityTransferCommission(commission) {
        const [newCommission] = await db.insert(cityTransferCommissions).values(commission).returning();
        return newCommission;
      }
      async updateCityTransferCommission(id, commission) {
        const [updated] = await db.update(cityTransferCommissions).set({ ...commission, updatedAt: /* @__PURE__ */ new Date() }).where(eq2(cityTransferCommissions.id, id)).returning();
        return updated;
      }
      async deleteCityTransferCommission(id) {
        await db.delete(cityTransferCommissions).where(eq2(cityTransferCommissions.id, id));
      }
      async findApplicableCityCommission(agentId, amount, currency, originCity, destinationCity) {
        const tiers = await db.select().from(cityTransferCommissions).where(
          and2(
            eq2(cityTransferCommissions.agentId, agentId),
            eq2(cityTransferCommissions.currencyCode, currency),
            // Match specific cities or general tiers
            or(
              isNull(cityTransferCommissions.originCity),
              eq2(cityTransferCommissions.originCity, originCity || "")
            ),
            or(
              isNull(cityTransferCommissions.destinationCity),
              eq2(cityTransferCommissions.destinationCity, destinationCity || "")
            )
          )
        ).orderBy(
          // Prioritize specific city matches over general ones
          desc2(cityTransferCommissions.originCity),
          desc2(cityTransferCommissions.destinationCity),
          asc(cityTransferCommissions.minAmount)
        );
        for (const tier of tiers) {
          const minAmount = parseFloat(tier.minAmount);
          const maxAmount = tier.maxAmount ? parseFloat(tier.maxAmount) : Infinity;
          if (amount >= minAmount && amount <= maxAmount) {
            return tier;
          }
        }
        return null;
      }
      // Commission pool methods implementation
      async getCommissionPoolBalance(currencyCode) {
        let query = db.select({
          currencyCode: commissionPoolTransactions.currencyCode,
          totalCredits: sql3`COALESCE(SUM(CASE WHEN transaction_type = 'credit' THEN CAST(amount AS DECIMAL) ELSE 0 END), 0)`,
          totalWithdrawals: sql3`COALESCE(SUM(CASE WHEN transaction_type = 'withdrawal' THEN CAST(amount AS DECIMAL) ELSE 0 END), 0)`
        }).from(commissionPoolTransactions).groupBy(commissionPoolTransactions.currencyCode);
        if (currencyCode) {
          query = query.where(eq2(commissionPoolTransactions.currencyCode, currencyCode));
        }
        const results = await query;
        const balances3 = {};
        results.forEach((result) => {
          const credits = parseFloat(result.totalCredits) || 0;
          const withdrawals = parseFloat(result.totalWithdrawals) || 0;
          const balance = credits - withdrawals;
          balances3[result.currencyCode] = balance.toFixed(2);
          console.log(`\u0631\u0635\u064A\u062F \u062D\u0633\u0627\u0628 \u0627\u0644\u062A\u062C\u0645\u064A\u0639 ${result.currencyCode}: \u0627\u0644\u0625\u064A\u062F\u0627\u0639\u0627\u062A=${credits}, \u0627\u0644\u0633\u062D\u0648\u0628\u0627\u062A=${withdrawals}, \u0627\u0644\u0631\u0635\u064A\u062F=${balance}`);
        });
        if (!currencyCode) {
          const allCurrencies = ["LYD", "USD", "EUR", "TRY", "AED", "EGP", "TND", "GBP"];
          allCurrencies.forEach((currency) => {
            if (!balances3[currency]) {
              balances3[currency] = "0.00";
            }
          });
        }
        return balances3;
      }
      async getCommissionPoolTransactions(filters) {
        let query = db.select().from(commissionPoolTransactions);
        if (filters?.currencyCode) {
          query = query.where(eq2(commissionPoolTransactions.currencyCode, filters.currencyCode));
        }
        if (filters?.sourceType) {
          const currentCondition = filters.currencyCode ? and2(eq2(commissionPoolTransactions.currencyCode, filters.currencyCode), eq2(commissionPoolTransactions.sourceType, filters.sourceType)) : eq2(commissionPoolTransactions.sourceType, filters.sourceType);
          query = query.where(currentCondition);
        }
        query = query.orderBy(desc2(commissionPoolTransactions.createdAt));
        if (filters?.limit) {
          query = query.limit(filters.limit);
        }
        if (filters?.offset) {
          query = query.offset(filters.offset);
        }
        return query;
      }
      async addCommissionPoolTransaction(transaction) {
        console.log(`\u{1F50D} addCommissionPoolTransaction: \u0628\u062F\u0621 \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 - \u0627\u0644\u0645\u0628\u0644\u063A: ${transaction.amount}, \u0627\u0644\u0646\u0648\u0639: ${transaction.transactionType}, \u0627\u0644\u0645\u0635\u062F\u0631: ${transaction.sourceId}, \u0627\u0644\u0648\u0635\u0641: "${transaction.description}"`);
        if (transaction.transactionType === "credit" && parseFloat(transaction.amount) > 0) {
          try {
            const { allocateFixedReferralReward: allocateFixedReferralReward2 } = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
            let operationType = "transfer_lyd";
            if (transaction.description?.includes("\u0633\u0648\u0642") || transaction.description?.includes("market") || transaction.description?.includes("\u0639\u0631\u0636") || transaction.description?.includes("\u0635\u0641\u0642\u0629")) {
              operationType = "market_sell";
              console.log(`\u{1F3AF} \u062A\u062D\u062F\u064A\u062F \u0646\u0648\u0639 \u0627\u0644\u0639\u0645\u0644\u064A\u0629: ${operationType} (\u0633\u0648\u0642/\u0639\u0631\u0636 \u0645\u0648\u062C\u0648\u062F \u0641\u064A \u0627\u0644\u0648\u0635\u0641)`);
            } else if (transaction.currencyCode === "USD") {
              operationType = "transfer_usd";
              console.log(`\u{1F3AF} \u062A\u062D\u062F\u064A\u062F \u0646\u0648\u0639 \u0627\u0644\u0639\u0645\u0644\u064A\u0629: ${operationType} (\u0639\u0645\u0644\u0629 USD)`);
            } else {
              console.log(`\u{1F3AF} \u062A\u062D\u062F\u064A\u062F \u0646\u0648\u0639 \u0627\u0644\u0639\u0645\u0644\u064A\u0629: ${operationType} (\u0627\u0641\u062A\u0631\u0627\u0636\u064A)`);
            }
            const shouldApplyReferral = !transaction.description?.includes("\u0635\u0627\u0641\u064A") && !transaction.description?.includes("\u0628\u0639\u062F \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A") && !transaction.description?.includes("\u0628\u0639\u062F \u062E\u0635\u0645") && !transaction.description?.includes("withdrawal");
            console.log(`\u{1F50D} \u0641\u062D\u0635 \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A: \u0627\u0644\u0639\u0645\u0648\u0644\u0629=${transaction.amount}, \u0627\u0644\u0648\u0635\u0641="${transaction.description}", \u0646\u0648\u0639 \u0627\u0644\u0639\u0645\u0644\u064A\u0629=${operationType}, \u0633\u064A\u062A\u0645 \u0627\u0644\u062A\u0637\u0628\u064A\u0642=${shouldApplyReferral}, \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645=${transaction.sourceId}`);
            if (shouldApplyReferral) {
              console.log(`\u{1F680} \u0628\u062F\u0621 \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A...`);
              const referralResult = await allocateFixedReferralReward2(
                transaction.relatedTransactionId || 0,
                operationType,
                parseFloat(transaction.amount),
                transaction.currencyCode,
                transaction.sourceId || 0
              );
              console.log(`\u{1F4CA} \u0646\u062A\u064A\u062C\u0629 \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A: hasReferral=${referralResult.hasReferral}, rewardAmount=${referralResult.rewardAmount}, netSystemCommission=${referralResult.netSystemCommission}`);
              if (referralResult.hasReferral) {
                const originalAmount = parseFloat(transaction.amount);
                const rewardDeducted = originalAmount - referralResult.netSystemCommission;
                console.log(`\u{1F4B0} \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u062A\u0644\u0642\u0627\u0626\u064A\u0627\u064B: \u0627\u0644\u0639\u0645\u0648\u0644\u0629 ${originalAmount} \u2192 \u0635\u0627\u0641\u064A ${referralResult.netSystemCommission} (\u0645\u0643\u0627\u0641\u0623\u0629: ${rewardDeducted.toFixed(6)})`);
                transaction.amount = referralResult.netSystemCommission.toString();
                if (rewardDeducted > 0) {
                  transaction.description += ` (\u0635\u0627\u0641\u064A \u0628\u0639\u062F \u062E\u0635\u0645 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 ${rewardDeducted.toFixed(2)})`;
                }
              } else {
                console.log(`\u2139\uFE0F \u0644\u0627 \u062A\u0648\u062C\u062F \u0625\u062D\u0627\u0644\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${transaction.sourceId} \u0623\u0648 \u0627\u0644\u0646\u0638\u0627\u0645 \u063A\u064A\u0631 \u0645\u064F\u0641\u0639\u0644`);
              }
            } else {
              console.log(`\u23ED\uFE0F \u062A\u0645 \u062A\u062E\u0637\u064A \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0628\u0633\u0628\u0628 \u0627\u0644\u0648\u0635\u0641 \u0623\u0648 \u0627\u0644\u0646\u0648\u0639`);
            }
          } catch (error) {
            console.log("\u26A0\uFE0F \u062A\u0639\u0630\u0631 \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0639\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
          }
        } else {
          console.log(`\u23ED\uFE0F \u062A\u0645 \u062A\u062E\u0637\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A - \u0627\u0644\u0646\u0648\u0639: ${transaction.transactionType}, \u0627\u0644\u0645\u0628\u0644\u063A: ${transaction.amount}`);
        }
        const [newTransaction] = await db.insert(commissionPoolTransactions).values(transaction).returning();
        return newTransaction;
      }
      async withdrawFromCommissionPool(currencyCode, amount, description) {
        const balances3 = await this.getCommissionPoolBalance(currencyCode);
        const currentBalance = parseFloat(balances3[currencyCode] || "0");
        const withdrawalAmount = parseFloat(amount);
        if (currentBalance < withdrawalAmount) {
          throw new Error(`\u0631\u0635\u064A\u062F \u063A\u064A\u0631 \u0643\u0627\u0641\u064A. \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u0645\u062A\u0627\u062D: ${currentBalance.toFixed(2)} ${currencyCode}`);
        }
        const withdrawalTransaction = await this.addCommissionPoolTransaction({
          sourceType: "system",
          sourceId: null,
          sourceName: "\u0627\u0644\u0646\u0638\u0627\u0645",
          currencyCode,
          amount,
          transactionType: "withdrawal",
          relatedTransactionId: null,
          description
        });
        const admin = await this.getAdminUser();
        if (admin) {
          try {
            const adminBalance = await this.getUserBalance(admin.id, currencyCode);
            const currentAmount = parseFloat(adminBalance?.amount || "0");
            const newAmount = (currentAmount + withdrawalAmount).toString();
            console.log(`\u0625\u0636\u0627\u0641\u0629 ${withdrawalAmount} ${currencyCode} \u0625\u0644\u0649 \u0631\u0635\u064A\u062F \u0627\u0644\u0645\u062F\u064A\u0631. \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u062D\u0627\u0644\u064A: ${currentAmount}, \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u062C\u062F\u064A\u062F: ${newAmount}`);
            await this.setUserBalance(admin.id, currencyCode, newAmount);
            await this.createTransaction({
              userId: admin.id,
              type: "commission_withdrawal",
              amount: withdrawalAmount.toString(),
              currency: currencyCode,
              description: `\u0633\u062D\u0628 \u0645\u0646 \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A: ${description}`
            });
            console.log(`\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0631\u0635\u064A\u062F \u0627\u0644\u0645\u062F\u064A\u0631 \u0648\u0625\u0646\u0634\u0627\u0621 \u0645\u0639\u0627\u0645\u0644\u0629 \u0633\u062D\u0628 \u0628\u0645\u0628\u0644\u063A ${withdrawalAmount} ${currencyCode}`);
          } catch (error) {
            console.error(`\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0645\u0628\u0644\u063A \u0644\u0631\u0635\u064A\u062F \u0627\u0644\u0645\u062F\u064A\u0631:`, error);
            throw error;
          }
        }
        return withdrawalTransaction;
      }
      // نسب العمولة الافتراضية للنظام
      async createSystemCommissionRate(rate) {
        console.log("\u{1F4BE} \u062D\u0641\u0638 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0641\u064A \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A:", rate);
        const [newRate] = await db.insert(systemCommissionRates).values(rate).returning();
        console.log("\u{1F4CA} \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u064F\u062D\u0641\u0648\u0638\u0629:", newRate);
        return newRate;
      }
      async getSystemCommissionRates() {
        return await db.select().from(systemCommissionRates).orderBy(systemCommissionRates.transferType, systemCommissionRates.currency);
      }
      async getSystemCommissionRate(transferType, currency) {
        const [rate] = await db.select().from(systemCommissionRates).where(
          and2(
            eq2(systemCommissionRates.transferType, transferType),
            eq2(systemCommissionRates.currency, currency),
            eq2(systemCommissionRates.isActive, true)
          )
        );
        return rate;
      }
      async updateSystemCommissionRate(id, rate) {
        const [updatedRate] = await db.update(systemCommissionRates).set({ ...rate, updatedAt: /* @__PURE__ */ new Date() }).where(eq2(systemCommissionRates.id, id)).returning();
        return updatedRate || null;
      }
      async deleteSystemCommissionRate(id) {
        await db.delete(systemCommissionRates).where(eq2(systemCommissionRates.id, id));
      }
      // إدارة الدول
      // حذف الوظيفة المكررة - موجودة في مكان آخر
      // حذف الوظيفة المكررة - موجودة في مكان آخر
      // إدارة مكاتب الوكلاء
      async getAgentOfficesByCountry(countryCode) {
        return await db.select().from(agentOffices).where(
          and2(
            eq2(agentOffices.countryCode, countryCode),
            eq2(agentOffices.isActive, true)
          )
        ).orderBy(agentOffices.city, agentOffices.officeName);
      }
      async createAgentOffice(office) {
        const [newOffice] = await db.insert(agentOffices).values(office).returning();
        return newOffice;
      }
      async getAgentOfficeById(id) {
        const [office] = await db.select().from(agentOffices).where(eq2(agentOffices.id, id));
        return office;
      }
      // حذف الوظيفة المكررة - موجودة في مكان آخر
      async getInternationalTransfersByAgent(agentId) {
        return await this.getInternationalTransfers(agentId);
      }
      // إدارة الدول (للمدراء)
      async getAllCountries() {
        const result = await db.select().from(countries2).where(eq2(countries2.isActive, true)).orderBy(countries2.name);
        console.log("Database countries query result:", result);
        return result;
      }
      async getCountryById(id) {
        const [country] = await db.select().from(countries2).where(eq2(countries2.id, id));
        return country;
      }
      async getCityById(id) {
        const [city] = await db.select().from(cities).where(eq2(cities.id, id));
        return city;
      }
      // حذف الوظيفة المكررة - موجودة في مكان آخر
      async deleteCountry(id) {
        await db.delete(countries2).where(eq2(countries2.id, id));
      }
      // جلب المستخدمين الذين لديهم حسابات مكاتب صرافة (وكلاء ومدراء)
      async getExchangeOfficeUsers() {
        return await db.select({
          id: users.id,
          fullName: users.fullName,
          accountNumber: users.accountNumber,
          type: users.type,
          city: users.city,
          email: users.email
        }).from(users).where(or(eq2(users.type, "agent"), eq2(users.type, "admin"))).orderBy(users.fullName);
      }
      // إدارة مكاتب الوكلاء (للمدراء) مع معلومات المالك
      async getAllAgentOfficesWithOwners() {
        return await db.select({
          id: agentOffices.id,
          officeName: agentOffices.officeName,
          city: agentOffices.city,
          countryCode: agentOffices.countryCode,
          contactInfo: agentOffices.contactInfo,
          address: agentOffices.address,
          agentId: agentOffices.agentId,
          ownerName: users.fullName,
          ownerAccountNumber: users.accountNumber,
          ownerType: users.type
        }).from(agentOffices).leftJoin(users, eq2(agentOffices.agentId, users.id)).orderBy(agentOffices.officeName);
      }
      // إدارة مكاتب الوكلاء (للمدراء)
      async getAllAgentOffices() {
        return await db.select().from(agentOffices).orderBy(agentOffices.officeName);
      }
      // جلب مكاتب الوكلاء الدوليين (الذين يمكنهم التعامل مع التحويلات الدولية)
      async getInternationalAgentOffices() {
        const result = await db.select().from(agentOffices).innerJoin(users, eq2(agentOffices.agentId, users.id)).where(and2(
          eq2(users.type, "agent"),
          eq2(users.extTransferEnabled, true),
          eq2(agentOffices.isActive, true)
        )).orderBy(agentOffices.officeName);
        return result.map((row) => ({
          id: row.agent_offices.id,
          agentId: row.agent_offices.agentId,
          countryCode: row.agent_offices.countryCode,
          city: row.agent_offices.city,
          officeCode: row.agent_offices.officeCode,
          officeName: row.agent_offices.officeName,
          contactInfo: row.agent_offices.contactInfo,
          address: row.agent_offices.address,
          isActive: row.agent_offices.isActive,
          createdAt: row.agent_offices.createdAt,
          commissionRate: row.agent_offices.commissionRate,
          userId: row.agent_offices.userId,
          agentName: row.users.fullName
        }));
      }
      async deleteAgentOffice(id) {
        await db.delete(agentOffices).where(eq2(agentOffices.id, id));
      }
      async getAgentOfficeByUserId(userId) {
        const [office] = await db.select().from(agentOffices).where(eq2(agentOffices.agentId, userId));
        return office;
      }
      // جلب المكاتب للتحويل بينها
      async getOfficeUsers() {
        return await db.select({
          id: users.id,
          fullName: users.fullName,
          accountNumber: users.accountNumber,
          city: users.city,
          type: users.type
        }).from(users).where(or(eq2(users.type, "agent"), eq2(users.type, "admin")));
      }
      // حذف الوظيفة المكررة - موجودة في مكان آخر
      // جلب سجل التحويلات بين المكاتب
      async getInterOfficeTransfers(userId) {
        const transfersOut = await db.select({
          id: transactions.id,
          receiverName: sql3`'تحويل صادر'`,
          amount: transactions.amount,
          currency: transactions.currency,
          commission: sql3`'0'`,
          city: sql3`'--'`,
          status: sql3`'completed'`,
          createdAt: transactions.date
        }).from(transactions).where(and2(
          eq2(transactions.userId, userId),
          eq2(transactions.type, "inter_office_transfer_out")
        )).orderBy(desc2(transactions.date)).limit(10);
        return transfersOut;
      }
      // دالة للحصول على مكتب وكيل واحد
      async getAgentOffice(id) {
        const [office] = await db.select().from(agentOffices).where(eq2(agentOffices.id, id));
        return office;
      }
      // إعدادات استقبال الحوالات للمستخدمين
      async getUserReceiveSettings(userId) {
        const settings = await db.select().from(userReceiveSettings2).where(eq2(userReceiveSettings2.userId, userId)).orderBy(userReceiveSettings2.createdAt);
        return settings;
      }
      async createUserReceiveSettings(settings) {
        const [newSettings] = await db.insert(userReceiveSettings2).values(settings).returning();
        return newSettings;
      }
      async updateUserReceiveSettings(id, settings) {
        const [updatedSettings] = await db.update(userReceiveSettings2).set({ ...settings, updatedAt: /* @__PURE__ */ new Date() }).where(eq2(userReceiveSettings2.id, id)).returning();
        return updatedSettings;
      }
      async deleteUserReceiveSettings(id) {
        await db.delete(userReceiveSettings2).where(eq2(userReceiveSettings2.id, id));
      }
      async getUserReceiveSettingsByCountry(userId, countryId) {
        const [settings] = await db.select().from(userReceiveSettings2).where(
          and2(
            eq2(userReceiveSettings2.userId, userId),
            eq2(userReceiveSettings2.countryId, countryId),
            eq2(userReceiveSettings2.isActive, true)
          )
        );
        return settings || null;
      }
      async getCountryById(id) {
        const [country] = await db.select().from(countries2).where(eq2(countries2.id, id));
        return country || null;
      }
      // دالة لإضافة مبلغ لحساب تجميع العمولات
      async addToCommissionPool(amount, currency, source) {
        await db.insert(commissionPoolTransactions).values({
          amount: amount.toString(),
          currencyCode: currency,
          sourceType: "system",
          sourceId: 1,
          sourceName: source,
          transactionType: "credit",
          description: `\u0639\u0645\u0648\u0644\u0629 \u0645\u0646 ${source}`
        });
      }
      // دوال إدارة الحوالات الدولية الجديدة - نظام التجميد والخصم
      async createInternationalTransferNew(transfer) {
        const [newTransfer] = await db.insert(internationalTransfersNew).values(transfer).returning();
        return newTransfer;
      }
      async getInternationalTransferNewByCode(code2) {
        const [transfer] = await db.select({
          ...internationalTransfersNew,
          senderName: users.fullName
        }).from(internationalTransfersNew).leftJoin(users, eq2(internationalTransfersNew.senderAgentId, users.id)).where(eq2(internationalTransfersNew.transferCode, code2));
        return transfer;
      }
      async confirmInternationalTransferNew(transferCode, receiverId) {
        const [updatedTransfer] = await db.update(internationalTransfersNew).set({
          status: "completed",
          completedAt: /* @__PURE__ */ new Date()
        }).where(eq2(internationalTransfersNew.transferCode, transferCode)).returning();
        return updatedTransfer;
      }
      async calculateInternationalTransferCosts(amount, currencyCode) {
        let systemCommissionRate = 0.015;
        let recipientCommissionRate = 0.01;
        try {
          const systemRate = await this.getSystemCommissionRate("international", currencyCode);
          if (systemRate) {
            if (systemRate.fixedAmount && parseFloat(systemRate.fixedAmount) > 0) {
              const commissionSystem2 = parseFloat(systemRate.fixedAmount);
              const commissionRecipient2 = amount * recipientCommissionRate;
              const amountPending2 = amount - commissionSystem2 - commissionRecipient2;
              console.log(`\u{1F4B0} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0639\u0645\u0648\u0644\u0629 \u062B\u0627\u0628\u062A\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062F\u0648\u0644\u064A\u0629: ${commissionSystem2} ${currencyCode}`);
              return {
                commissionSystem: parseFloat(commissionSystem2.toFixed(2)),
                commissionRecipient: parseFloat(commissionRecipient2.toFixed(2)),
                amountPending: parseFloat(amountPending2.toFixed(2))
              };
            } else if (systemRate.commissionRate) {
              systemCommissionRate = parseFloat(systemRate.commissionRate);
            } else if (systemRate.perMilleRate) {
              systemCommissionRate = parseFloat(systemRate.perMilleRate) / 1e3;
            }
            console.log(`\u{1F4CA} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0645\u0646 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A: ${systemCommissionRate * 100}% \u0644\u0644\u0639\u0645\u0644\u0629 ${currencyCode}`);
          } else {
            console.log(`\u26A0\uFE0F \u0644\u0645 \u062A\u0648\u062C\u062F \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062F\u0648\u0644\u064A\u0629 \u0628\u0627\u0644\u0639\u0645\u0644\u0629 ${currencyCode}\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0642\u064A\u0645\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629`);
          }
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
        }
        const commissionSystem = amount * systemCommissionRate;
        const commissionRecipient = amount * recipientCommissionRate;
        const amountPending = amount - commissionSystem - commissionRecipient;
        return {
          commissionSystem: parseFloat(commissionSystem.toFixed(2)),
          commissionRecipient: parseFloat(commissionRecipient.toFixed(2)),
          amountPending: parseFloat(amountPending.toFixed(2))
        };
      }
      async generateInternationalTransferCode() {
        const timestamp2 = Date.now();
        const random = Math.floor(Math.random() * 1e3).toString().padStart(3, "0");
        return `INT${timestamp2}${random}`;
      }
      async cancelInternationalTransferNew(transferCode) {
        try {
          const transfer = await this.getInternationalTransferNewByCode(transferCode);
          if (!transfer) {
            return { success: false, message: "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" };
          }
          if (transfer.status !== "pending") {
            return { success: false, message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 - \u0627\u0644\u062D\u0627\u0644\u0629 \u0627\u0644\u062D\u0627\u0644\u064A\u0629: " + transfer.status };
          }
          const [cancelledTransfer] = await db.update(internationalTransfersNew).set({ status: "cancelled" }).where(eq2(internationalTransfersNew.transferCode, transferCode)).returning();
          const senderBalance = await this.getUserBalance(transfer.senderAgentId, transfer.currencyCode);
          const currentBalance = parseFloat(senderBalance?.amount || "0");
          const originalAmount = parseFloat(transfer.amountOriginal);
          const newBalance = currentBalance + originalAmount;
          await this.setUserBalance(transfer.senderAgentId, transfer.currencyCode, newBalance.toString());
          await this.createTransaction({
            userId: transfer.senderAgentId,
            type: "international_transfer_refund",
            amount: transfer.amountOriginal,
            currency: transfer.currencyCode,
            description: `\u0625\u0631\u062C\u0627\u0639 \u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 \u0645\u0644\u063A\u0627\u0629 - \u0631\u0645\u0632: ${transferCode}`
          });
          console.log(`\u2705 \u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A ${transferCode} \u0648\u0625\u0631\u062C\u0627\u0639 ${originalAmount} ${transfer.currencyCode} \u0644\u0644\u0645\u0631\u0633\u0644`);
          return { success: true, transfer: cancelledTransfer };
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A:", error);
          return { success: false, message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644" };
        }
      }
      // External transfer upgrade requests
      async createExternalTransferRequest(data) {
        const [request] = await db.insert(upgradeRequests).values({
          userId: data.userId,
          requestType: "external_transfer",
          phone: data.phone,
          city: data.city,
          requestedLimits: data.requestedLimits,
          message: data.message,
          documents: data.documents,
          status: "pending"
        }).returning();
        return request;
      }
      async getExternalTransferRequests() {
        const requests = await db.select().from(upgradeRequests).where(eq2(upgradeRequests.requestType, "external_transfer")).orderBy(desc2(upgradeRequests.createdAt));
        return requests;
      }
      async getExternalTransferRequestsByUser(userId) {
        const requests = await db.select().from(upgradeRequests).where(
          and2(
            eq2(upgradeRequests.userId, userId),
            eq2(upgradeRequests.requestType, "external_transfer")
          )
        ).orderBy(desc2(upgradeRequests.createdAt));
        return requests;
      }
      async updateExternalTransferRequest(id, data) {
        const [updated] = await db.update(upgradeRequests).set({
          ...data,
          decidedAt: /* @__PURE__ */ new Date()
        }).where(eq2(upgradeRequests.id, id)).returning();
        return updated;
      }
      async getUserExternalTransferLimits(userId) {
        const [user] = await db.select({
          extTransferEnabled: users.extTransferEnabled,
          extDailyLimit: users.extDailyLimit,
          extMonthlyLimit: users.extMonthlyLimit,
          extAllowedCurrencies: users.extAllowedCurrencies,
          extAllowedCountries: users.extAllowedCountries
        }).from(users).where(eq2(users.id, userId));
        return user;
      }
      async getUserDailyTransferAmount(userId, currency) {
        const today = /* @__PURE__ */ new Date();
        today.setHours(0, 0, 0, 0);
        console.log(`\u{1F50D} \u062D\u0633\u0627\u0628 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0628\u0627\u0644\u0639\u0645\u0644\u0629 ${currency}`);
        const transfersResult = await db.select({
          total: sql3`COALESCE(SUM(${transfers.amount}), 0)`
        }).from(transfers).where(
          and2(
            eq2(transfers.senderId, userId),
            eq2(transfers.currency, currency),
            eq2(transfers.transferKind, "external"),
            sql3`${transfers.createdAt} >= ${today.toISOString()}`
          )
        );
        const internationalResult = await pool.query(
          `SELECT COALESCE(SUM(CAST(amount AS DECIMAL)), 0) as total 
       FROM international_transfers 
       WHERE agent_id = $1 AND currency_code = $2 AND created_at >= $3 AND status != 'canceled'`,
          [userId, currency, today.toISOString()]
        );
        const agentTransfersResult = await pool.query(
          `SELECT COALESCE(SUM(CAST(amount AS DECIMAL)), 0) as total 
       FROM agent_transfers 
       WHERE sender_id = $1 AND currency = $2 AND created_at >= $3 AND status != 'canceled' AND type = 'international'`,
          [userId, currency, today.toISOString()]
        );
        const transfersTotal = parseFloat(transfersResult[0]?.total || "0");
        const internationalTotal = parseFloat(internationalResult.rows[0]?.total || "0");
        const agentTransfersTotal = parseFloat(agentTransfersResult.rows[0]?.total || "0");
        console.log(`\u{1F4CA} \u062A\u0641\u0627\u0635\u064A\u0644 \u062D\u0633\u0627\u0628 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A:`, {
          transfers: transfersTotal,
          international: internationalTotal,
          agentTransfers: agentTransfersTotal,
          total: transfersTotal + internationalTotal + agentTransfersTotal
        });
        return transfersTotal + internationalTotal + agentTransfersTotal;
      }
      async getUserMonthlyTransferAmount(userId, currency) {
        const startOfMonth = /* @__PURE__ */ new Date();
        startOfMonth.setDate(1);
        startOfMonth.setHours(0, 0, 0, 0);
        console.log(`\u{1F50D} \u062D\u0633\u0627\u0628 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u0634\u0647\u0631\u064A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0628\u0627\u0644\u0639\u0645\u0644\u0629 ${currency}`);
        const transfersResult = await db.select({
          total: sql3`COALESCE(SUM(${transfers.amount}), 0)`
        }).from(transfers).where(
          and2(
            eq2(transfers.senderId, userId),
            eq2(transfers.currency, currency),
            eq2(transfers.transferKind, "external"),
            sql3`${transfers.createdAt} >= ${startOfMonth.toISOString()}`
          )
        );
        const internationalResult = await pool.query(
          `SELECT COALESCE(SUM(CAST(amount AS DECIMAL)), 0) as total 
       FROM international_transfers 
       WHERE agent_id = $1 AND currency_code = $2 AND created_at >= $3 AND status != 'canceled'`,
          [userId, currency, startOfMonth.toISOString()]
        );
        const agentTransfersResult = await pool.query(
          `SELECT COALESCE(SUM(CAST(amount AS DECIMAL)), 0) as total 
       FROM agent_transfers 
       WHERE sender_id = $1 AND currency = $2 AND created_at >= $3 AND status != 'canceled' AND type = 'international'`,
          [userId, currency, startOfMonth.toISOString()]
        );
        const transfersTotal = parseFloat(transfersResult[0]?.total || "0");
        const internationalTotal = parseFloat(internationalResult.rows[0]?.total || "0");
        const agentTransfersTotal = parseFloat(agentTransfersResult.rows[0]?.total || "0");
        console.log(`\u{1F4CA} \u062A\u0641\u0627\u0635\u064A\u0644 \u062D\u0633\u0627\u0628 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u0634\u0647\u0631\u064A:`, {
          transfers: transfersTotal,
          international: internationalTotal,
          agentTransfers: agentTransfersTotal,
          total: transfersTotal + internationalTotal + agentTransfersTotal
        });
        return transfersTotal + internationalTotal + agentTransfersTotal;
      }
      async updateUserExternalTransferSettings(userId, settings) {
        const [updated] = await db.update(users).set(settings).where(eq2(users.id, userId)).returning({
          id: users.id,
          extTransferEnabled: users.extTransferEnabled,
          extDailyLimit: users.extDailyLimit,
          extMonthlyLimit: users.extMonthlyLimit,
          extAllowedCurrencies: users.extAllowedCurrencies,
          extAllowedCountries: users.extAllowedCountries
        });
        return updated;
      }
      // وظائف إدارة الدول
      async getCountries() {
        return await db.select().from(countries2).orderBy(countries2.name);
      }
      async getCountryById(id) {
        const [country] = await db.select().from(countries2).where(eq2(countries2.id, id));
        return country;
      }
      async getCountryByCode(code2) {
        const [country] = await db.select().from(countries2).where(eq2(countries2.code, code2));
        return country;
      }
      // وظائف إدارة المدن
      async getCities(countryId, search) {
        const query = db.select().from(cities);
        if (countryId) {
          query.where(eq2(cities.countryId, countryId));
        }
        if (search && search.trim()) {
          const searchTerm = `%${search.trim()}%`;
          if (countryId) {
            query.where(and2(
              eq2(cities.countryId, countryId),
              or(
                ilike(cities.nameAr, searchTerm),
                ilike(cities.nameEn, searchTerm)
              )
            ));
          } else {
            query.where(or(
              ilike(cities.nameAr, searchTerm),
              ilike(cities.nameEn, searchTerm)
            ));
          }
        }
        return await query.orderBy(cities.nameAr);
      }
      async getCityById(id) {
        const [city] = await db.select().from(cities).where(eq2(cities.id, id));
        return city;
      }
      // طلبات ترقية التحويل الخارجي
      async createExternalTransferRequest(request) {
        const existingRequest = await db.select().from(upgradeRequests).where(and2(
          eq2(upgradeRequests.userId, request.userId),
          eq2(upgradeRequests.requestType, "external_transfer"),
          eq2(upgradeRequests.status, "pending")
        ));
        if (existingRequest.length > 0) {
          throw new Error("\u0644\u062F\u064A\u0643 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0645\u0639\u0644\u0642 \u0628\u0627\u0644\u0641\u0639\u0644");
        }
        const [created] = await db.insert(upgradeRequests).values(request).returning();
        return created;
      }
      // البحث في طلبات الترقية الخارجية للإدارة
      async getUpgradeRequestsWithDetails(type, status) {
        let query = db.select({
          id: upgradeRequests.id,
          userId: upgradeRequests.userId,
          requestType: upgradeRequests.requestType,
          fullName: upgradeRequests.fullName,
          phone: upgradeRequests.phone,
          city: upgradeRequests.city,
          commissionRate: upgradeRequests.commissionRate,
          countryId: upgradeRequests.countryId,
          cityId: upgradeRequests.cityId,
          cityNameManual: upgradeRequests.cityNameManual,
          message: upgradeRequests.message,
          requestedLimits: upgradeRequests.requestedLimits,
          documents: upgradeRequests.documents,
          status: upgradeRequests.status,
          createdAt: upgradeRequests.createdAt,
          decidedAt: upgradeRequests.decidedAt,
          decidedBy: upgradeRequests.decidedBy,
          reviewNotes: upgradeRequests.reviewNotes,
          userEmail: users.email
        }).from(upgradeRequests).leftJoin(users, eq2(upgradeRequests.userId, users.id));
        const conditions = [];
        if (type) {
          conditions.push(eq2(upgradeRequests.requestType, type));
        }
        if (status) {
          conditions.push(eq2(upgradeRequests.status, status));
        }
        if (conditions.length > 0) {
          query = query.where(conditions.length === 1 ? conditions[0] : and2(...conditions));
        }
        const results = await query.orderBy(desc2(upgradeRequests.createdAt));
        return results.map((result) => ({
          ...result,
          userEmail: result.userEmail || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          requestedLimits: result.requestedLimits || null,
          documents: result.documents || null
        }));
      }
      // وظائف السجلات الأمنية
      async addSecurityLog(logData) {
        try {
          const [securityLog] = await db.insert(securityLogs).values({
            email: logData.email,
            username: logData.username,
            eventType: logData.eventType,
            fingerprint: logData.fingerprint,
            ipAddress: logData.ipAddress,
            userAgent: logData.userAgent,
            country: logData.country,
            city: logData.city,
            platform: logData.platform,
            language: logData.language,
            screen: logData.screen,
            timezone: logData.timezone,
            attempts: logData.attempts,
            imageFilename: logData.imageFilename,
            blocked: logData.blocked,
            reportType: logData.reportType,
            metadata: logData.metadata || {}
          }).returning();
          return securityLog;
        } catch (error) {
          console.error("Failed to add security log:", error);
          throw error;
        }
      }
      async getSecurityLogs(filters) {
        try {
          let query = db.select().from(securityLogs);
          if (filters?.startDate && filters?.endDate) {
            query = query.where(and2(
              gte(securityLogs.createdAt, filters.startDate),
              lte(securityLogs.createdAt, filters.endDate)
            ));
          }
          const logs = await query.orderBy(desc2(securityLogs.createdAt)).limit(filters?.limit || 100).offset(filters?.offset || 0);
          return logs;
        } catch (error) {
          console.error("Failed to get security logs:", error);
          throw error;
        }
      }
      async deleteSecurityLog(id) {
        try {
          console.log(`\u{1F5D1}\uFE0F \u062D\u0630\u0641 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0623\u0645\u0646\u064A ID: ${id} \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A...`);
          const result = await db.delete(securityLogs).where(eq2(securityLogs.id, id)).returning({ id: securityLogs.id });
          const deleted = result.length > 0;
          if (deleted) {
            console.log(`\u2705 \u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0623\u0645\u0646\u064A ID: ${id} \u0628\u0646\u062C\u0627\u062D`);
          } else {
            console.log(`\u274C \u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0623\u0645\u0646\u064A ID: ${id}`);
          }
          return deleted;
        } catch (error) {
          console.error("Failed to delete security log:", error);
          throw error;
        }
      }
    };
    storage = new DatabaseStorage();
  }
});

// server/receipt-services/market-receipt-generator.ts
var market_receipt_generator_exports = {};
__export(market_receipt_generator_exports, {
  MarketReceiptGenerator: () => MarketReceiptGenerator
});
import sharp2 from "sharp";
var MarketReceiptGenerator;
var init_market_receipt_generator = __esm({
  "server/receipt-services/market-receipt-generator.ts"() {
    "use strict";
    MarketReceiptGenerator = class {
      /**
       * إنشاء إيصال سوق العملات بصيغة حرارية 72mm
       */
      static async generateMarketReceipt(data) {
        const width = 272;
        const padding = 12;
        const contentWidth = width - padding * 2;
        const htmlContent = `
      <div style="width: ${width}px; font-family: 'Amiri', 'Noto Sans Arabic', Arial, sans-serif; direction: rtl; text-align: right; background: white; padding: ${padding}px; box-sizing: border-box;">
        <!-- \u0627\u0644\u0639\u0646\u0648\u0627\u0646 -->
        <div style="text-align: center; margin-bottom: 16px; border-bottom: 2px solid #000; padding-bottom: 8px;">
          <h1 style="font-size: 16px; font-weight: bold; margin: 0; color: #000;">\u0625\u064A\u0635\u0627\u0644 \u0633\u0648\u0642 \u0627\u0644\u0639\u0645\u0644\u0627\u062A</h1>
          <p style="font-size: 10px; margin: 4px 0 0 0; color: #666;">\u0631\u0642\u0645 \u0627\u0644\u0625\u064A\u0635\u0627\u0644: ${data.receiptNumber}</p>
        </div>

        <!-- \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 -->
        <div style="margin-bottom: 12px;">
          <div style="font-size: 11px; line-height: 1.4; margin-bottom: 8px;">
            <strong>\u0631\u0642\u0645 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:</strong> ${data.transactionId}
          </div>
          <div style="font-size: 10px; line-height: 1.3; margin-bottom: 6px;">
            <strong>\u0627\u0644\u062A\u0627\u0631\u064A\u062E:</strong> ${data.date} - ${data.time}
          </div>
        </div>

        <!-- \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062D\u0633\u0627\u0628\u0627\u062A -->
        <div style="border: 1px solid #ddd; padding: 8px; margin-bottom: 12px; background: #f9f9f9;">
          <div style="font-size: 10px; line-height: 1.4; margin-bottom: 3px;">
            <strong>\u062D\u0633\u0627\u0628 \u0627\u0644\u0628\u0627\u0626\u0639:</strong> ${data.sellerAccount}
          </div>
          <div style="font-size: 10px; line-height: 1.4; margin-bottom: 3px;">
            <strong>\u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0634\u062A\u0631\u064A:</strong> ${data.buyerAccount}
          </div>
          <div style="font-size: 10px; line-height: 1.4;">
            <strong>\u062D\u0633\u0627\u0628 \u0627\u0644\u0646\u0638\u0627\u0645:</strong> ${data.systemAccount}
          </div>
        </div>

        <!-- \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0635\u0631\u0641 -->
        <div style="border: 1px solid #333; padding: 8px; margin-bottom: 12px; background: #f5f5f5;">
          <div style="font-size: 11px; line-height: 1.4; margin-bottom: 4px;">
            <strong>\u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u0628\u0627\u0639:</strong> ${data.soldAmount} ${data.fromCurrency}
          </div>
          <div style="font-size: 11px; line-height: 1.4; margin-bottom: 4px;">
            <strong>\u0642\u064A\u0645\u0629 \u0627\u0644\u0634\u0631\u0627\u0621:</strong> ${data.purchaseValue} ${data.toCurrency}
          </div>
          <div style="font-size: 10px; line-height: 1.4; margin-bottom: 4px;">
            <strong>\u0633\u0639\u0631 \u0627\u0644\u0635\u0631\u0641:</strong> 1 ${data.fromCurrency} = ${data.exchangeRate} ${data.toCurrency}
          </div>
          <div style="font-size: 10px; line-height: 1.4;">
            <strong>\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645:</strong> ${data.commission} ${data.commissionCurrency}
          </div>
        </div>

        <!-- \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u062A\u062D\u0642\u0642 -->
        <div style="border-top: 1px dashed #666; padding-top: 8px; margin-top: 12px;">
          <div style="font-size: 8px; line-height: 1.3; margin-bottom: 6px; color: #666;">
            <strong>\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642:</strong><br>
            <span style="font-family: monospace; word-break: break-all; font-size: 7px;">
              ${data.verificationHash.substring(0, 40)}...
            </span>
          </div>
          <div style="font-size: 8px; text-align: center; color: #666; margin-top: 8px;">
            \u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 - \u0646\u0638\u0627\u0645 \u0625\u064A\u0635\u0627\u0644\u0627\u062A \u0631\u0642\u0645\u064A\u0629 \u0622\u0645\u0646
          </div>
        </div>
      </div>
    `;
        const lines = [
          "\u0625\u064A\u0635\u0627\u0644 \u0633\u0648\u0642 \u0627\u0644\u0639\u0645\u0644\u0627\u062A",
          `\u0631\u0642\u0645 \u0627\u0644\u0625\u064A\u0635\u0627\u0644: ${data.receiptNumber}`,
          "",
          `\u0631\u0642\u0645 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629: ${data.transactionId}`,
          `\u0627\u0644\u062A\u0627\u0631\u064A\u062E: ${data.date} - ${data.time}`,
          "",
          "\u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062D\u0633\u0627\u0628\u0627\u062A:",
          `\u062D\u0633\u0627\u0628 \u0627\u0644\u0628\u0627\u0626\u0639: ${data.sellerAccount}`,
          `\u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0634\u062A\u0631\u064A: ${data.buyerAccount}`,
          `\u062D\u0633\u0627\u0628 \u0627\u0644\u0646\u0638\u0627\u0645: ${data.systemAccount}`,
          "",
          "\u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0635\u0631\u0641:",
          `\u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u0628\u0627\u0639: ${data.soldAmount} ${data.fromCurrency}`,
          `\u0642\u064A\u0645\u0629 \u0627\u0644\u0634\u0631\u0627\u0621: ${data.purchaseValue} ${data.toCurrency}`,
          `\u0633\u0639\u0631 \u0627\u0644\u0635\u0631\u0641: 1 ${data.fromCurrency} = ${data.exchangeRate} ${data.toCurrency}`,
          `\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645: ${data.commission} ${data.commissionCurrency}`,
          "",
          "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642:",
          data.verificationHash.substring(0, 40) + "...",
          "",
          "\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 - \u0646\u0638\u0627\u0645 \u0625\u064A\u0635\u0627\u0644\u0627\u062A \u0631\u0642\u0645\u064A\u0629 \u0622\u0645\u0646"
        ];
        const lineHeight = 20;
        const height = lines.length * lineHeight + 40;
        const canvas = sharp2({
          create: {
            width,
            height,
            channels: 4,
            background: { r: 255, g: 255, b: 255, alpha: 1 }
          }
        });
        const textSvg = `
      <svg width="${width}" height="${height}">
        ${lines.map((line, index2) => {
          const y = 30 + index2 * lineHeight;
          const fontSize = line === "\u0625\u064A\u0635\u0627\u0644 \u0633\u0648\u0642 \u0627\u0644\u0639\u0645\u0644\u0627\u062A" ? "16" : "12";
          const fontWeight = line === "\u0625\u064A\u0635\u0627\u0644 \u0633\u0648\u0642 \u0627\u0644\u0639\u0645\u0644\u0627\u062A" || line.includes(":") ? "bold" : "normal";
          return `<text x="${width / 2}" y="${y}" font-family="Arial" font-size="${fontSize}" font-weight="${fontWeight}" text-anchor="middle" fill="black">${line}</text>`;
        }).join("")}
      </svg>
    `;
        const imageBuffer = await canvas.composite([{ input: Buffer.from(textSvg), top: 0, left: 0 }]).png().toBuffer();
        return imageBuffer;
      }
      /**
       * إعداد بيانات الإيصال من معاملة السوق
       */
      static async prepareMarketReceiptData(marketTransaction) {
        const buyerData = await Promise.resolve().then(() => (init_db(), db_exports)).then(
          ({ db: db2 }) => db2.query.users.findFirst({
            where: (users3, { eq: eq11 }) => eq11(users3.id, marketTransaction.buyer_id)
          })
        );
        const sellerData = await Promise.resolve().then(() => (init_db(), db_exports)).then(
          ({ db: db2 }) => db2.query.users.findFirst({
            where: (users3, { eq: eq11 }) => eq11(users3.id, marketTransaction.seller_id)
          })
        );
        const now = /* @__PURE__ */ new Date();
        const receiptNumber = `MKT-${marketTransaction.id}-${Date.now()}`;
        return {
          receiptNumber,
          transactionId: `REF-${marketTransaction.id}`,
          buyerAccount: buyerData?.accountNumber || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          sellerAccount: sellerData?.accountNumber || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          systemAccount: "33003001",
          // حساب النظام الثابت
          fromCurrency: marketTransaction.from_currency,
          toCurrency: marketTransaction.to_currency,
          soldAmount: parseFloat(marketTransaction.amount).toFixed(2),
          purchaseValue: parseFloat(marketTransaction.total_cost).toFixed(2),
          exchangeRate: parseFloat(marketTransaction.rate).toFixed(4),
          commission: parseFloat(marketTransaction.commission || "0").toFixed(2),
          commissionCurrency: marketTransaction.to_currency,
          // عادة ما تكون العمولة بعملة الدفع
          date: now.toLocaleDateString("ar-EG"),
          time: now.toLocaleTimeString("ar-EG"),
          verificationHash: await this.generateVerificationHash(marketTransaction),
          verificationUrl: `${process.env.BASE_URL || "http://localhost:5000"}/verify/market/${marketTransaction.id}`
        };
      }
      /**
       * إنشاء رمز تحقق للمعاملة
       */
      static async generateVerificationHash(transaction) {
        const crypto3 = await import("crypto");
        const data = `${transaction.id}-${transaction.buyer_id}-${transaction.seller_id}-${transaction.amount}-${transaction.total_cost}-${transaction.created_at}`;
        return crypto3.createHash("sha256").update(data).digest("hex");
      }
    };
  }
});

// server/receipt-services/thermal-receipt-generator.ts
var thermal_receipt_generator_exports = {};
__export(thermal_receipt_generator_exports, {
  ThermalReceiptGenerator: () => ThermalReceiptGenerator
});
import moment from "moment-timezone";
import QRCode from "qrcode";
import puppeteer from "puppeteer";
var ThermalReceiptGenerator;
var init_thermal_receipt_generator = __esm({
  "server/receipt-services/thermal-receipt-generator.ts"() {
    "use strict";
    ThermalReceiptGenerator = class {
      /**
       * إنشاء إيصال حراري بالحجم المطلوب
       */
      static async generateThermalReceipt(data) {
        let browser;
        try {
          browser = await puppeteer.launch({
            headless: true,
            args: [
              "--no-sandbox",
              "--disable-setuid-sandbox",
              "--disable-dev-shm-usage",
              "--disable-gpu",
              "--disable-extensions",
              "--disable-plugins",
              "--disable-background-timer-throttling",
              "--disable-backgrounding-occluded-windows",
              "--disable-renderer-backgrounding",
              "--disable-web-security",
              "--disable-features=VizDisplayCompositor"
            ],
            executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || "/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium"
          });
          const page = await browser.newPage();
          await page.setViewport({ width: 272, height: 363, deviceScaleFactor: 1 });
          const html = await this.generateThermalReceiptHTML(data);
          await page.setContent(html, { waitUntil: "networkidle0", timeout: 3e4 });
          const imageBuffer = await page.screenshot({
            type: "png",
            clip: {
              x: 0,
              y: 0,
              width: 272,
              height: 363
            },
            omitBackground: false
          });
          return Buffer.from(imageBuffer);
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u062D\u0631\u0627\u0631\u064A:", error);
          throw error;
        } finally {
          if (browser) {
            await browser.close();
          }
        }
      }
      /**
       * إنشاء HTML للإيصال الحراري
       */
      static async generateThermalReceiptHTML(data) {
        let qrCodeDataUrl = "";
        try {
          if (data.verificationInfo.verificationUrl) {
            qrCodeDataUrl = await QRCode.toDataURL(data.verificationInfo.verificationUrl, {
              width: 80,
              margin: 1
            });
          }
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 QR code:", error);
        }
        const dateStr = moment(data.transaction.executed_at || /* @__PURE__ */ new Date()).tz("Africa/Tripoli").format("DD-MM-YYYY | HH:mm");
        const typeMapping = {
          "internal_transfer_out": "\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A",
          "internal_transfer_in": "\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A",
          "inter_office_transfer": "\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628",
          "international_transfer": "\u062A\u062D\u0648\u064A\u0644 \u062F\u0648\u0644\u064A"
        };
        const transactionType = typeMapping[data.transaction.txn_type] || "\u0639\u0645\u0644\u064A\u0629 \u0645\u0627\u0644\u064A\u0629";
        const amount = data.transaction.amount_src?.value || "0";
        const currency = data.transaction.amount_src?.ccy || "";
        return `
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>\u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629</title>
    <style>
        @page {
            size: 72mm 96mm;
            margin: 2mm;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, sans-serif;
            font-size: 12px;
            background: white;
            color: #000;
            line-height: 1.4;
            padding: 4px;
            direction: rtl;
            width: 68mm;
            height: 92mm;
        }
        
        .receipt {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        
        .header {
            text-align: center;
            margin-bottom: 8px;
        }
        
        .company-name {
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 4px;
        }
        
        .company-desc {
            font-size: 10px;
            color: #666;
        }
        
        .separator {
            border-bottom: 1px dashed #000;
            margin: 6px 0;
            height: 1px;
        }
        
        .transaction-info {
            margin-bottom: 6px;
        }
        
        .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 3px;
            font-size: 11px;
        }
        
        .info-label {
            font-weight: bold;
        }
        
        .info-value {
            text-align: left;
            direction: ltr;
        }
        
        .amount-section {
            text-align: center;
            margin: 8px 0;
            padding: 6px;
            border: 1px solid #000;
        }
        
        .amount {
            font-size: 16px;
            font-weight: bold;
        }
        
        .footer {
            text-align: center;
            font-size: 10px;
        }
        
        .qr-code {
            text-align: center;
            margin: 4px 0;
        }
        
        .qr-code img {
            width: 60px;
            height: 60px;
        }
        
        .verification-code {
            font-family: 'Courier New', monospace;
            font-size: 8px;
            word-break: break-all;
            margin-top: 4px;
        }
        
        .transaction-id {
            font-family: 'Courier New', monospace;
            direction: ltr;
            text-align: left;
        }
    </style>
</head>
<body>
    <div class="receipt">
        <!-- Header -->
        <div class="header">
            <div class="company-name">${data.companyInfo.name}</div>
            <div class="company-desc">\u0645\u0643\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A</div>
        </div>
        
        <div class="separator"></div>
        
        <!-- Transaction Info -->
        <div class="transaction-info">
            <div class="info-row">
                <span class="info-label">\u0646\u0648\u0639 \u0627\u0644\u0639\u0645\u0644\u064A\u0629:</span>
                <span class="info-value">${transactionType}</span>
            </div>
            
            <div class="info-row">
                <span class="info-label">\u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A:</span>
                <span class="info-value transaction-id">${data.transaction.referenceNumber || `REF-${data.transaction.txn_id}`}</span>
            </div>
            
            <div class="separator"></div>
            
            <div class="info-row">
                <span class="info-label">\u0645\u0646 \u062D\u0633\u0627\u0628:</span>
                <span class="info-value">${data.senderInfo.accountNumber}</span>
            </div>
            
            <div class="info-row">
                <span class="info-label">\u0627\u0644\u0627\u0633\u0645:</span>
                <span class="info-value">${data.senderInfo.name}</span>
            </div>
            
            <div class="separator"></div>
            
            <div class="info-row">
                <span class="info-label">\u0625\u0644\u0649 \u062D\u0633\u0627\u0628:</span>
                <span class="info-value">${data.beneficiaryInfo.accountNumber || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</span>
            </div>
            
            <div class="info-row">
                <span class="info-label">\u0627\u0644\u0627\u0633\u0645:</span>
                <span class="info-value">${data.beneficiaryInfo.name}</span>
            </div>
            
            <div class="separator"></div>
            
            <div class="info-row">
                <span class="info-label">\u0627\u0644\u062A\u0627\u0631\u064A\u062E \u0648\u0627\u0644\u0648\u0642\u062A:</span>
                <span class="info-value">${dateStr}</span>
            </div>
        </div>
        
        <!-- Amount -->
        <div class="amount-section">
            <div class="amount">${amount} ${currency}</div>
        </div>
        
        <div class="separator"></div>
        
        <!-- QR Code -->
        ${qrCodeDataUrl ? `
        <div class="qr-code">
            <img src="${qrCodeDataUrl}" alt="QR Code" />
        </div>
        ` : ""}
        
        <!-- Footer -->
        <div class="footer">
            <div class="verification-code">
                \u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642: ${data.verificationInfo.hash.substring(0, 16)}...
            </div>
            <div style="margin-top: 4px; font-size: 9px;">
                \u0634\u0643\u0631\u0627\u064B \u0644\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u062E\u062F\u0645\u0627\u062A\u0646\u0627
            </div>
        </div>
    </div>
</body>
</html>`;
      }
      /**
       * إنشاء إيصال كشف الحساب
       */
      static async generateStatementReceipt(statementData) {
        const currentDate = (/* @__PURE__ */ new Date()).toLocaleDateString("ar-LY");
        return `<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>\u0643\u0634\u0641 \u0627\u0644\u062D\u0633\u0627\u0628</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Courier New', monospace;
            font-size: 10px;
            line-height: 1.2;
            background: white;
            color: black;
            direction: rtl;
        }
        
        .statement {
            width: 210mm;
            min-height: 297mm;
            padding: 15mm;
            margin: 0 auto;
            background: white;
        }
        
        .header {
            text-align: center;
            margin-bottom: 20px;
            border-bottom: 2px solid #000;
            padding-bottom: 10px;
        }
        
        .header h1 {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .header h2 {
            font-size: 14px;
            margin-bottom: 5px;
        }
        
        .statement-info {
            margin-bottom: 15px;
        }
        
        .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 3px;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
            margin: 10px 0;
        }
        
        .table th,
        .table td {
            border: 1px solid #000;
            padding: 5px;
            text-align: center;
            font-size: 9px;
        }
        
        .table th {
            background-color: #f0f0f0;
            font-weight: bold;
        }
        
        .amount {
            text-align: left;
            direction: ltr;
        }
        
        .totals {
            margin-top: 20px;
            border: 2px solid #000;
            padding: 10px;
        }
        
        .total-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        
        .footer {
            margin-top: 30px;
            text-align: center;
            font-size: 8px;
            border-top: 1px solid #000;
            padding-top: 10px;
        }
    </style>
</head>
<body>
    <div class="statement">
        <!-- Header -->
        <div class="header">
            <h1>\u0645\u0643\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A</h1>
            <h2>\u0643\u0634\u0641 \u0627\u0644\u062D\u0633\u0627\u0628</h2>
        </div>
        
        <!-- Statement Info -->
        <div class="statement-info">
            <div class="info-row">
                <span><strong>\u062A\u0627\u0631\u064A\u062E \u0627\u0644\u0625\u0635\u062F\u0627\u0631:</strong> ${currentDate}</span>
                <span><strong>\u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u0627\u0641\u062A\u062A\u0627\u062D\u064A:</strong> ${statementData.openingBalance}</span>
            </div>
        </div>
        
        <!-- Transactions Table -->
        <table class="table">
            <thead>
                <tr>
                    <th>\u0627\u0644\u062A\u0627\u0631\u064A\u062E</th>
                    <th>\u0627\u0644\u0646\u0648\u0639</th>
                    <th>\u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A</th>
                    <th>\u0627\u0644\u0648\u0635\u0641</th>
                    <th>\u0627\u0644\u0645\u0628\u0644\u063A</th>
                    <th>\u0627\u0644\u0639\u0645\u0644\u0629</th>
                    <th>\u0627\u0644\u0631\u0635\u064A\u062F</th>
                </tr>
            </thead>
            <tbody>
                ${statementData.rows.map((row) => `
                <tr>
                    <td>${row.date}</td>
                    <td>${row.type}</td>
                    <td class="amount">${row.referenceNumber || row.id}</td>
                    <td>${row.description}</td>
                    <td class="amount">${row.amount}</td>
                    <td>${row.currency}</td>
                    <td class="amount">${row.balance}</td>
                </tr>
                `).join("")}
            </tbody>
        </table>
        
        <!-- Totals -->
        <div class="totals">
            <h3 style="text-align: center; margin-bottom: 10px;">\u0645\u0644\u062E\u0635 \u0627\u0644\u062D\u0633\u0627\u0628</h3>
            <div class="total-row">
                <span>\u0625\u062C\u0645\u0627\u0644\u064A \u0627\u0644\u0625\u064A\u062F\u0627\u0639\u0627\u062A:</span>
                <span class="amount">${statementData.totals.credits}</span>
            </div>
            <div class="total-row">
                <span>\u0625\u062C\u0645\u0627\u0644\u064A \u0627\u0644\u0633\u062D\u0648\u0628\u0627\u062A:</span>
                <span class="amount">${statementData.totals.debits}</span>
            </div>
            <div class="total-row">
                <span>\u0625\u062C\u0645\u0627\u0644\u064A \u0627\u0644\u0631\u0633\u0648\u0645:</span>
                <span class="amount">${statementData.totals.fees}</span>
            </div>
            <div class="total-row" style="font-weight: bold; border-top: 1px solid #000; padding-top: 5px;">
                <span>\u0627\u0644\u0635\u0627\u0641\u064A:</span>
                <span class="amount">${statementData.totals.net}</span>
            </div>
        </div>
        
        <!-- Footer -->
        <div class="footer">
            <p>\u0647\u0630\u0627 \u0627\u0644\u0643\u0634\u0641 \u0645\u064F\u0646\u062A\u062C \u0622\u0644\u064A\u0627\u064B \u0645\u0646 \u0646\u0638\u0627\u0645 \u0625\u062F\u0627\u0631\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629</p>
            <p>\u062A\u0627\u0631\u064A\u062E \u0627\u0644\u0637\u0628\u0627\u0639\u0629: ${(/* @__PURE__ */ new Date()).toLocaleString("ar-LY")}</p>
        </div>
    </div>
</body>
</html>`;
      }
    };
  }
});

// server/receipt-services/html-image-generator.ts
var html_image_generator_exports = {};
__export(html_image_generator_exports, {
  HtmlImageGenerator: () => HtmlImageGenerator
});
import puppeteer2 from "puppeteer";
import moment2 from "moment-timezone";
import QRCode2 from "qrcode";
var HtmlImageGenerator;
var init_html_image_generator = __esm({
  "server/receipt-services/html-image-generator.ts"() {
    "use strict";
    HtmlImageGenerator = class {
      /**
       * Generate receipt as PNG image using HTML/CSS and Puppeteer
       */
      static async generateReceipt(data) {
        let browser;
        try {
          browser = await puppeteer2.launch({
            headless: true,
            args: [
              "--no-sandbox",
              "--disable-setuid-sandbox",
              "--disable-dev-shm-usage",
              "--disable-gpu",
              "--disable-extensions",
              "--disable-plugins",
              "--disable-background-timer-throttling",
              "--disable-backgrounding-occluded-windows",
              "--disable-renderer-backgrounding",
              "--disable-web-security",
              "--disable-features=VizDisplayCompositor"
            ],
            executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || "/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium"
          });
          const page = await browser.newPage();
          await page.setViewport({ width: 272, height: 363, deviceScaleFactor: 1 });
          await page.addStyleTag({
            content: `
          @page {
            size: 72mm 96mm;
            margin: 0;
          }
        `
          });
          const html = await this.generateReceiptHTML(data);
          await page.setContent(html, { waitUntil: "networkidle0", timeout: 3e4 });
          const imageBuffer = await page.screenshot({
            type: "png",
            clip: {
              x: 0,
              y: 0,
              width: 272,
              height: 363
            },
            omitBackground: false
          });
          return Buffer.from(imageBuffer);
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0628\u0627\u0633\u062A\u062E\u062F\u0627\u0645 Puppeteer:", error);
          return this.generateSimpleTextReceipt(data);
        } finally {
          if (browser) {
            await browser.close();
          }
        }
      }
      /**
       * إنشاء HTML للإيصال مع تصميم عربي احترافي
       */
      static async generateReceiptHTML(data) {
        let qrCodeDataUrl = "";
        try {
          if (data.verificationInfo.verificationUrl) {
            qrCodeDataUrl = await QRCode2.toDataURL(data.verificationInfo.verificationUrl, {
              width: 50,
              margin: 1
            });
          }
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 QR code:", error);
        }
        const dateStr = moment2(data.transaction.executed_at || /* @__PURE__ */ new Date()).tz("Africa/Tripoli").format("YYYY-MM-DD HH:mm:ss");
        const typeMapping = {
          "internal_transfer_out": "\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A - \u0635\u0627\u062F\u0631",
          "internal_transfer_in": "\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A - \u0648\u0627\u0631\u062F",
          "inter_office_transfer": "\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628",
          "international_transfer": "\u062A\u062D\u0648\u064A\u0644 \u062F\u0648\u0644\u064A"
        };
        const transactionType = typeMapping[data.transaction.txn_type] || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F";
        const amount = data.transaction.amount_src?.value || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F";
        const currency = data.transaction.amount_src?.ccy || "";
        return `
<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>\u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic:wght@400;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Noto Sans Arabic', Arial, sans-serif;
            background: #ffffff;
            color: #1a1a1a;
            line-height: 1.2;
            padding: 8px;
            direction: rtl;
            margin: 0;
            width: 72mm;
            height: 96mm;
            font-size: 8px;
        }
        
        .receipt {
            width: 100%;
            height: 100%;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .header {
            background: linear-gradient(135deg, #1e40af, #3b82f6);
            color: white;
            padding: 8px;
            text-align: center;
            flex-shrink: 0;
        }
        
        .header h1 {
            font-size: 12px;
            font-weight: 700;
            margin-bottom: 2px;
        }
        
        .header p {
            font-size: 8px;
            opacity: 0.9;
        }
        
        .content {
            padding: 8px;
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        
        .receipt-info {
            background: #f8fafc;
            padding: 4px;
            border-radius: 2px;
            margin-bottom: 4px;
            border-right: 2px solid #1e40af;
        }
        
        .section {
            margin-bottom: 4px;
        }
        
        .section-title {
            font-size: 9px;
            font-weight: 700;
            color: #1e40af;
            margin-bottom: 2px;
            padding-bottom: 2px;
            border-bottom: 1px solid #e5e7eb;
        }
        
        .detail-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 2px 0;
            border-bottom: 1px solid #f1f5f9;
            font-size: 7px;
        }
        
        .detail-row:last-child {
            border-bottom: none;
        }
        
        .detail-label {
            font-weight: 600;
            color: #374151;
        }
        
        .detail-value {
            font-weight: 400;
            color: #1f2937;
        }
        
        .amount-highlight {
            background: #dcfce7;
            color: #166534;
            padding: 4px;
            border-radius: 2px;
            text-align: center;
            font-size: 10px;
            font-weight: 700;
            margin: 4px 0;
        }
        
        .qr-section {
            text-align: center;
            margin: 4px 0;
            padding: 4px;
            background: #f8fafc;
            border-radius: 2px;
        }
        
        .qr-code {
            margin: 2px 0;
        }
        
        .verification {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            padding: 4px;
            border-radius: 2px;
            margin-top: 4px;
            font-size: 6px;
        }
        
        .hash {
            font-family: 'Courier New', monospace;
            font-size: 11px;
            word-break: break-all;
            color: #374151;
            background: white;
            padding: 8px;
            border-radius: 4px;
            margin-top: 8px;
        }
        
        .footer {
            background: #1f2937;
            color: white;
            padding: 25px;
            text-align: center;
        }
        
        .footer h3 {
            font-size: 18px;
            margin-bottom: 5px;
        }
        
        .footer p {
            font-size: 14px;
            opacity: 0.8;
        }
        
        .security-notice {
            font-size: 12px;
            color: #6b7280;
            text-align: center;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e5e7eb;
        }
    </style>
</head>
<body>
    <div class="receipt">
        <div class="header">
            <h1>\u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629</h1>
            <p>\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A\u0629</p>
        </div>
        
        <div class="content">
            <div class="receipt-info">
                <div class="detail-row">
                    <span class="detail-label">\u0631\u0642\u0645 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:</span>
                    <span class="detail-value">${data.receiptNumber}</span>
                </div>
                <div class="detail-row">
                    <span class="detail-label">\u0627\u0644\u062A\u0627\u0631\u064A\u062E \u0648\u0627\u0644\u0648\u0642\u062A:</span>
                    <span class="detail-value">${dateStr} (\u062A\u0648\u0642\u064A\u062A \u0644\u064A\u0628\u064A\u0627)</span>
                </div>
            </div>
            
            <div class="section">
                <h2 class="section-title">\u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629</h2>
                <div class="detail-row">
                    <span class="detail-label">\u0646\u0648\u0639 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:</span>
                    <span class="detail-value">${transactionType}</span>
                </div>
                <div class="detail-row">
                    <span class="detail-label">\u0627\u0644\u0645\u0628\u0644\u063A:</span>
                    <span class="detail-value">${amount} ${currency}</span>
                </div>
                ${data.transaction.fees && data.transaction.fees.length > 0 ? `
                <div class="detail-row">
                    <span class="detail-label">\u0627\u0644\u0639\u0645\u0648\u0644\u0629:</span>
                    <span class="detail-value">${data.transaction.fees[0].value} ${data.transaction.fees[0].ccy}</span>
                </div>
                ` : ""}
            </div>
            
            ${data.transaction.net_to_beneficiary ? `
            <div class="amount-highlight">
                \u0635\u0627\u0641\u064A \u0627\u0644\u0645\u0628\u0644\u063A \u0644\u0644\u0645\u0633\u062A\u0641\u064A\u062F: ${data.transaction.net_to_beneficiary.value} ${data.transaction.net_to_beneficiary.ccy}
            </div>
            ` : ""}
            
            <div class="section">
                <h2 class="section-title">\u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0623\u0637\u0631\u0627\u0641</h2>
                <div class="detail-row">
                    <span class="detail-label">\u0627\u0644\u0645\u0631\u0633\u0644:</span>
                    <span class="detail-value">${data.transaction.sender_ref || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</span>
                </div>
                <div class="detail-row">
                    <span class="detail-label">\u0627\u0644\u0645\u0633\u062A\u0641\u064A\u062F:</span>
                    <span class="detail-value">${data.transaction.beneficiary_ref || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</span>
                </div>
            </div>
            
            ${qrCodeDataUrl ? `
            <div class="qr-section">
                <h3>\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642</h3>
                <div class="qr-code">
                    <img src="${qrCodeDataUrl}" alt="QR Code" style="max-width: 180px; height: auto;">
                </div>
                <p>\u0627\u0645\u0633\u062D \u0627\u0644\u0631\u0645\u0632 \u0644\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0635\u062D\u0629 \u0627\u0644\u0625\u064A\u0635\u0627\u0644</p>
            </div>
            ` : ""}
            
            <div class="verification">
                <h3>\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0625\u064A\u0635\u0627\u0644</h3>
                <p>\u0627\u0644\u062A\u0648\u0642\u064A\u0639 \u0627\u0644\u0631\u0642\u0645\u064A:</p>
                <div class="hash">${data.verificationInfo.hash.substring(0, 64)}...</div>
            </div>
            
            <div class="security-notice">
                \u0647\u0630\u0627 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0645\u0648\u0642\u0639 \u0631\u0642\u0645\u064A\u0627\u064B \u0648\u0645\u0624\u0645\u0646 \u2022 \u062A\u0627\u0631\u064A\u062E \u0627\u0644\u0625\u0646\u0634\u0627\u0621: ${(/* @__PURE__ */ new Date()).toLocaleDateString("ar")}
            </div>
        </div>
        
        <div class="footer">
            <h3>\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A\u0629</h3>
            <p>\u0637\u0631\u0627\u0628\u0644\u0633\u060C \u0644\u064A\u0628\u064A\u0627</p>
        </div>
    </div>
</body>
</html>`;
      }
      /**
       * إنشاء إيصال نصي بسيط كخيار احتياطي
       */
      static generateSimpleTextReceipt(data) {
        const dateStr = moment2(data.transaction.executed_at || /* @__PURE__ */ new Date()).tz("Africa/Tripoli").format("YYYY-MM-DD HH:mm:ss");
        const receiptText = `
=======================================
            \u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629
        \u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A\u0629
=======================================

\u0631\u0642\u0645 \u0627\u0644\u0625\u064A\u0635\u0627\u0644: ${data.receiptNumber}
\u0627\u0644\u062A\u0627\u0631\u064A\u062E: ${dateStr} (\u062A\u0648\u0642\u064A\u062A \u0644\u064A\u0628\u064A\u0627)

---------------------------------------
\u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:
---------------------------------------
\u0627\u0644\u0646\u0648\u0639: ${data.transaction.txn_type || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}
\u0627\u0644\u0645\u0628\u0644\u063A: ${data.transaction.amount_src?.value || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"} ${data.transaction.amount_src?.ccy || ""}
${data.transaction.fees && data.transaction.fees.length > 0 ? `\u0627\u0644\u0639\u0645\u0648\u0644\u0629: ${data.transaction.fees[0].value} ${data.transaction.fees[0].ccy}` : ""}

---------------------------------------
\u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0623\u0637\u0631\u0627\u0641:
---------------------------------------
\u0627\u0644\u0645\u0631\u0633\u0644: ${data.transaction.sender_ref || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}
\u0627\u0644\u0645\u0633\u062A\u0641\u064A\u062F: ${data.transaction.beneficiary_ref || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}

---------------------------------------
\u0627\u0644\u062A\u062D\u0642\u0642:
---------------------------------------
\u0627\u0644\u062A\u0648\u0642\u064A\u0639: ${data.verificationInfo.hash.substring(0, 40)}...

=======================================
\u0647\u0630\u0627 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0645\u0648\u0642\u0639 \u0631\u0642\u0645\u064A\u0627\u064B \u0648\u0645\u0624\u0645\u0646
=======================================
`;
        return Buffer.from(receiptText, "utf-8");
      }
      /**
       * Generate PDF from HTML content
       */
      static async generatePDF(html, options) {
        let browser;
        try {
          browser = await puppeteer2.launch({
            headless: true,
            args: [
              "--no-sandbox",
              "--disable-setuid-sandbox",
              "--disable-dev-shm-usage",
              "--disable-gpu",
              "--disable-extensions",
              "--disable-plugins",
              "--disable-background-timer-throttling",
              "--disable-backgrounding-occluded-windows",
              "--disable-renderer-backgrounding",
              "--disable-web-security",
              "--disable-features=VizDisplayCompositor"
            ],
            executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || "/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium"
          });
          const page = await browser.newPage();
          await page.setViewport({ width: 794, height: 1123, deviceScaleFactor: 1 });
          await page.setContent(html, { waitUntil: "networkidle0", timeout: 3e4 });
          const pdfBuffer = await page.pdf({
            format: options.format === "A4" ? "a4" : "letter",
            printBackground: options.printBackground,
            margin: {
              top: "10mm",
              bottom: "10mm",
              left: "10mm",
              right: "10mm"
            }
          });
          return Buffer.from(pdfBuffer);
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 PDF:", error);
          throw error;
        } finally {
          if (browser) {
            await browser.close();
          }
        }
      }
    };
  }
});

// server/receipt-services/crypto-service.ts
var crypto_service_exports = {};
__export(crypto_service_exports, {
  CryptoService: () => CryptoService
});
import { generateKeyPairSync, createHash } from "crypto";
import { SignJWT, jwtVerify, importPKCS8, importSPKI } from "jose";
import { eq as eq7, and as and6 } from "drizzle-orm";
var CryptoService;
var init_crypto_service = __esm({
  "server/receipt-services/crypto-service.ts"() {
    "use strict";
    init_db();
    init_schema();
    CryptoService = class {
      /**
       * إنشاء تمثيل قانوني (canonical) للمعاملة
       */
      static createCanonicalJson(transaction) {
        const canonical = {
          amount_dst: transaction.amount_dst,
          amount_src: transaction.amount_src,
          beneficiary_ref: transaction.beneficiary_ref,
          executed_at: transaction.executed_at,
          fees: transaction.fees.sort((a, b) => a.name.localeCompare(b.name)),
          fx_rate: transaction.fx_rate,
          net_to_beneficiary: transaction.net_to_beneficiary,
          office_ref: transaction.office_ref,
          sender_ref: transaction.sender_ref,
          taxes: transaction.taxes.sort((a, b) => a.name.localeCompare(b.name)),
          timezone: transaction.timezone,
          txn_id: transaction.txn_id,
          txn_type: transaction.txn_type,
          version: transaction.version
        };
        Object.keys(canonical).forEach((key) => {
          if (canonical[key] === void 0 || canonical[key] === null) {
            delete canonical[key];
          }
        });
        return JSON.stringify(canonical);
      }
      /**
       * حساب SHA-256 hash للتمثيل القانوني
       */
      static calculateHash(canonicalJson) {
        const hash = createHash("sha256").update(canonicalJson, "utf8").digest();
        return hash.toString("base64url");
      }
      /**
       * إنشاء مفتاح توقيع جديد
       */
      static async generateSigningKey() {
        const { publicKey, privateKey } = generateKeyPairSync("rsa", {
          modulusLength: 2048,
          publicKeyEncoding: {
            type: "spki",
            format: "pem"
          },
          privateKeyEncoding: {
            type: "pkcs8",
            format: "pem"
          }
        });
        const kid = `key_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
        return { kid, publicKey, privateKey };
      }
      /**
       * الحصول على المفتاح النشط الحالي
       */
      static async getActiveSigningKey() {
        try {
          const [activeKey] = await db.select({ kid: signingKeys.kid, privateKey: signingKeys.privateKey }).from(signingKeys).where(and6(eq7(signingKeys.active, true))).limit(1);
          return activeKey || null;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0645\u0641\u062A\u0627\u062D \u0627\u0644\u0646\u0634\u0637:", error);
          return null;
        }
      }
      /**
       * إنشاء مفتاح جديد وحفظه في قاعدة البيانات
       */
      static async createAndStoreSigningKey() {
        const { kid, publicKey, privateKey } = await this.generateSigningKey();
        await db.update(signingKeys).set({ active: false }).where(eq7(signingKeys.active, true));
        await db.insert(signingKeys).values({
          kid,
          publicKey,
          privateKey,
          active: true,
          algorithm: "RS256",
          expiresAt: new Date(Date.now() + 180 * 24 * 60 * 60 * 1e3)
          // 180 يوم
        });
        return kid;
      }
      /**
       * إنشاء JWS token
       */
      static async createJWS(payload) {
        let activeKey = await this.getActiveSigningKey();
        if (!activeKey) {
          const kid = await this.createAndStoreSigningKey();
          activeKey = await this.getActiveSigningKey();
          if (!activeKey) {
            throw new Error("\u0641\u0634\u0644 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0645\u0641\u062A\u0627\u062D \u0627\u0644\u062A\u0648\u0642\u064A\u0639");
          }
        }
        const privateKey = await importPKCS8(activeKey.privateKey, "RS256");
        const jwt6 = await new SignJWT(payload).setProtectedHeader({
          alg: "RS256",
          kid: activeKey.kid,
          typ: "JWT"
        }).setIssuedAt().setExpirationTime("1y").setIssuer("exchange-platform").setAudience("receipt-verification").sign(privateKey);
        return jwt6;
      }
      /**
       * التحقق من صحة JWS token
       */
      static async verifyJWS(token) {
        try {
          const [header] = token.split(".");
          const decodedHeader = JSON.parse(Buffer.from(header, "base64url").toString());
          const kid = decodedHeader.kid;
          if (!kid) {
            return { valid: false, error: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0641\u062A\u0627\u062D \u0645\u0641\u0642\u0648\u062F" };
          }
          const [signingKey] = await db.select({ publicKey: signingKeys.publicKey }).from(signingKeys).where(eq7(signingKeys.kid, kid)).limit(1);
          if (!signingKey) {
            return { valid: false, error: "\u0645\u0641\u062A\u0627\u062D \u0627\u0644\u062A\u0648\u0642\u064A\u0639 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" };
          }
          const publicKey = await importSPKI(signingKey.publicKey, "RS256");
          const { payload } = await jwtVerify(token, publicKey, {
            issuer: "exchange-platform",
            audience: "receipt-verification"
          });
          return { valid: true, payload };
        } catch (error) {
          return { valid: false, error: error.message };
        }
      }
      /**
       * الحصول على JWKS للتحقق الخارجي
       */
      static async getJWKS() {
        try {
          const activeKeys = await db.select({
            kid: signingKeys.kid,
            publicKey: signingKeys.publicKey,
            algorithm: signingKeys.algorithm
          }).from(signingKeys).where(eq7(signingKeys.active, true));
          const keys = await Promise.all(
            activeKeys.map(async (key) => {
              const publicKey = await importSPKI(key.publicKey, "RS256");
              return {
                kty: "RSA",
                kid: key.kid,
                use: "sig",
                alg: key.algorithm,
                // هنا يجب تحويل المفتاح العام إلى تنسيق JWK
                // للبساطة، سنعيد المفتاح بتنسيق PEM
                x5c: [key.publicKey.replace(/-----BEGIN PUBLIC KEY-----|\n|-----END PUBLIC KEY-----/g, "")]
              };
            })
          );
          return { keys };
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 JWKS:", error);
          return { keys: [] };
        }
      }
    };
  }
});

// server/receipt-services/international-receipt-service.ts
var international_receipt_service_exports = {};
__export(international_receipt_service_exports, {
  InternationalReceiptService: () => InternationalReceiptService
});
import { sql as sql9 } from "drizzle-orm";
import path5 from "path";
import fs5 from "fs/promises";
var InternationalReceiptService;
var init_international_receipt_service = __esm({
  "server/receipt-services/international-receipt-service.ts"() {
    "use strict";
    init_db();
    init_schema();
    init_crypto_service();
    init_thermal_receipt_generator();
    InternationalReceiptService = class {
      static STORAGE_BASE_PATH = "./public/receipts";
      static VERIFICATION_BASE_URL = process.env.VERIFICATION_BASE_URL || "https://localhost:3000";
      /**
       * إنشاء إيصال خاص بالتحويل الدولي
       */
      static async generateInternationalTransferReceipt(transactionData, locale = "ar") {
        try {
          const canonicalTransaction = await this.createCanonicalTransaction(transactionData);
          const canonicalJson = CryptoService.createCanonicalJson(canonicalTransaction);
          const hash = CryptoService.calculateHash(canonicalJson);
          const payload = {
            txn_id: transactionData.id,
            hash,
            canonical: canonicalTransaction,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          };
          const jwsToken = await CryptoService.createJWS(payload);
          const receiptNumber = this.generateInternationalReceiptNumber(transactionData.id, transactionData.receiverCode || "");
          const receiptData = {
            receiptNumber,
            transaction: canonicalTransaction,
            // تحويل النوع مؤقتاً
            companyInfo: await this.getCompanyInfo(),
            senderInfo: await this.getSenderInfo(transactionData.userId),
            beneficiaryInfo: await this.getBeneficiaryInfo(transactionData),
            transferInfo: {
              receiverCode: transactionData.receiverCode || "",
              destinationCountry: transactionData.destinationCountry || "",
              transferType: "international"
            },
            verificationInfo: {
              hash,
              jwsToken,
              verificationUrl: `${this.VERIFICATION_BASE_URL}/r/${transactionData.id}?t=${jwsToken}`
            },
            locale
          };
          const adaptedData = this.adaptReceiptData(receiptData);
          const imageBuffer = await ThermalReceiptGenerator.generateThermalReceipt(adaptedData);
          const storagePath = await this.saveReceiptFile(transactionData.id, imageBuffer, locale, "png");
          const [receipt] = await db.insert(receipts2).values({
            txnId: transactionData.id,
            version: 1,
            locale,
            storagePath,
            sha256Base64url: hash,
            jwsToken,
            pdfSigned: false,
            revoked: false,
            createdBy: "system",
            publicCopy: true
          }).returning({ id: receipts2.id });
          await this.logAuditAction(receipt.id, "generate", "system", {
            txnId: transactionData.id,
            locale,
            receiptNumber,
            type: "international_transfer",
            receiverCode: transactionData.receiverCode
          });
          return receipt.id;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A:", error);
          throw new Error("\u0641\u0634\u0644 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A");
        }
      }
      /**
       * تحويل بيانات الإيصال الدولي إلى التنسيق المطلوب
       */
      static adaptReceiptData(data) {
        return {
          receiptNumber: data.receiptNumber,
          transaction: {
            transaction_id: data.transaction.txn_id,
            user_id: "1",
            transaction_type: data.transaction.txn_type,
            amount_original: data.transaction.amount_src.value,
            commission_system: data.transaction.fees.length > 0 ? data.transaction.fees[0].value : "0",
            currency_code: data.transaction.amount_src.ccy,
            counterparty_name: data.beneficiaryInfo.name,
            reference_number: data.transaction.beneficiary_ref,
            notes: `\u062A\u062D\u0648\u064A\u0644 \u062F\u0648\u0644\u064A \u0625\u0644\u0649 ${data.transferInfo.destinationCountry}`,
            executed_at: data.transaction.executed_at,
            status: "completed",
            receiver_code: data.transferInfo.receiverCode,
            destination_country: data.transferInfo.destinationCountry
          },
          companyInfo: data.companyInfo,
          senderInfo: data.senderInfo,
          beneficiaryInfo: data.beneficiaryInfo,
          verificationInfo: data.verificationInfo,
          locale: data.locale
        };
      }
      /**
       * إنشاء رقم الإيصال الخاص بالتحويل الدولي
       */
      static generateInternationalReceiptNumber(txnId, receiverCode) {
        const timestamp2 = Date.now();
        const prefix = "INT";
        return `${prefix}-${timestamp2}-${receiverCode}`;
      }
      /**
       * تحويل بيانات المعاملة إلى تنسيق قانوني
       */
      static async createCanonicalTransaction(data) {
        const commissionAmount = parseFloat(data.commission || "0");
        return {
          txn_id: data.id,
          txn_type: "international_transfer",
          executed_at: data.executedAt.toISOString(),
          timezone: "Africa/Tripoli",
          amount_src: {
            ccy: data.currency,
            value: data.amount
          },
          net_to_beneficiary: {
            ccy: data.currency,
            value: data.amount
          },
          fees: commissionAmount > 0 ? [
            {
              name: "commission",
              ccy: data.currency,
              value: data.commission || "0"
            }
          ] : [],
          taxes: [],
          // مصفوفة فارغة للضرائب
          sender_ref: data.ref || "",
          beneficiary_ref: data.referenceNumber || data.receiverCode || "",
          office_ref: data.receiverCode || "",
          version: 1
        };
      }
      /**
       * الحصول على معلومات الشركة
       */
      static async getCompanyInfo() {
        return {
          name: "\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A\u0629",
          nameEn: "Libya Exchange Platform",
          address: "\u0637\u0631\u0627\u0628\u0644\u0633\u060C \u0644\u064A\u0628\u064A\u0627",
          addressEn: "Tripoli, Libya",
          phone: "+218-XXX-XXXXXX",
          email: "info@example.com",
          registrationNumber: "REG-2024-001",
          taxNumber: "TAX-2024-001"
        };
      }
      /**
       * الحصول على معلومات المرسل
       */
      static async getSenderInfo(userId) {
        const result = await db.execute(sql9`
      SELECT full_name, account_number, city 
      FROM users 
      WHERE id = ${userId}
    `);
        const user = result.rows[0];
        return {
          name: user?.full_name || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          accountNumber: user?.account_number || `#${userId}`,
          city: user?.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"
        };
      }
      /**
       * الحصول على معلومات المستفيد
       */
      static async getBeneficiaryInfo(data) {
        return {
          name: data.counterparty || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          accountNumber: data.referenceNumber || "",
          city: "",
          country: data.destinationCountry || "",
          phone: data.recipientPhone || ""
        };
      }
      /**
       * حفظ ملف الإيصال
       */
      static async saveReceiptFile(txnId, buffer, locale, format) {
        const timestamp2 = (/* @__PURE__ */ new Date()).toISOString().slice(0, 10);
        const filename = `international-${txnId}-${locale}-${Date.now()}.${format}`;
        const filePath = path5.join(this.STORAGE_BASE_PATH, timestamp2, filename);
        await fs5.mkdir(path5.dirname(filePath), { recursive: true });
        await fs5.writeFile(filePath, buffer);
        return filePath;
      }
      /**
       * تسجيل إجراءات التدقيق
       */
      static async logAuditAction(receiptId, action, userId, metadata) {
        await db.insert(receiptAuditLog2).values({
          receiptId,
          action,
          userId,
          metadata: metadata ? JSON.stringify(metadata) : null,
          timestamp: /* @__PURE__ */ new Date()
        });
      }
      /**
       * تحويل رمز الدولة إلى اسم
       */
      static getCountryName(countryCode) {
        const countries3 = {
          "AE": "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
          "EG": "\u0645\u0635\u0631",
          "SA": "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
          "TN": "\u062A\u0648\u0646\u0633",
          "MA": "\u0627\u0644\u0645\u063A\u0631\u0628",
          "JO": "\u0627\u0644\u0623\u0631\u062F\u0646",
          "LB": "\u0644\u0628\u0646\u0627\u0646",
          "SY": "\u0633\u0648\u0631\u064A\u0627",
          "IQ": "\u0627\u0644\u0639\u0631\u0627\u0642",
          "KW": "\u0627\u0644\u0643\u0648\u064A\u062A",
          "BH": "\u0627\u0644\u0628\u062D\u0631\u064A\u0646",
          "QA": "\u0642\u0637\u0631",
          "OM": "\u0639\u064F\u0645\u0627\u0646",
          "YE": "\u0627\u0644\u064A\u0645\u0646",
          "PS": "\u0641\u0644\u0633\u0637\u064A\u0646",
          "SD": "\u0627\u0644\u0633\u0648\u062F\u0627\u0646",
          "DZ": "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
          "LY": "\u0644\u064A\u0628\u064A\u0627",
          "TR": "\u062A\u0631\u0643\u064A\u0627",
          "US": "\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
          "GB": "\u0628\u0631\u064A\u0637\u0627\u0646\u064A\u0627",
          "DE": "\u0623\u0644\u0645\u0627\u0646\u064A\u0627",
          "FR": "\u0641\u0631\u0646\u0633\u0627",
          "IT": "\u0625\u064A\u0637\u0627\u0644\u064A\u0627",
          "ES": "\u0625\u0633\u0628\u0627\u0646\u064A\u0627",
          "CA": "\u0643\u0646\u062F\u0627",
          "AU": "\u0623\u0633\u062A\u0631\u0627\u0644\u064A\u0627",
          "BR": "\u0627\u0644\u0628\u0631\u0627\u0632\u064A\u0644",
          "CN": "\u0627\u0644\u0635\u064A\u0646",
          "JP": "\u0627\u0644\u064A\u0627\u0628\u0627\u0646",
          "IN": "\u0627\u0644\u0647\u0646\u062F",
          "RU": "\u0631\u0648\u0633\u064A\u0627"
        };
        return countries3[countryCode] || countryCode;
      }
      /**
       * نص حالة التحويل
       */
      static getStatusText(status) {
        const statusMap = {
          "pending": "\u0641\u064A \u0627\u0644\u0627\u0646\u062A\u0638\u0627\u0631",
          "completed": "\u0645\u0643\u062A\u0645\u0644\u0629",
          "cancelled": "\u0645\u0644\u063A\u064A\u0629",
          "failed": "\u0641\u0627\u0634\u0644\u0629"
        };
        return statusMap[status] || status;
      }
    };
  }
});

// server/receipt-services/receipt-service.ts
var receipt_service_exports = {};
__export(receipt_service_exports, {
  ReceiptService: () => ReceiptService
});
import { eq as eq8, desc as desc6, sql as sql10 } from "drizzle-orm";
import moment3 from "moment-timezone";
import path6 from "path";
import fs6 from "fs/promises";
var ReceiptService;
var init_receipt_service = __esm({
  "server/receipt-services/receipt-service.ts"() {
    "use strict";
    init_db();
    init_schema();
    init_crypto_service();
    ReceiptService = class {
      static STORAGE_BASE_PATH = "./public/receipts";
      static VERIFICATION_BASE_URL = process.env.VERIFICATION_BASE_URL || "https://localhost:3000";
      /**
       * إنشاء إيصال لمعاملة
       */
      static async generateReceipt(transactionData, locale = "ar") {
        try {
          const canonicalTransaction = await this.createCanonicalTransaction(transactionData);
          const canonicalJson = CryptoService.createCanonicalJson(canonicalTransaction);
          const hash = CryptoService.calculateHash(canonicalJson);
          const payload = {
            txn_id: transactionData.id,
            hash,
            canonical: canonicalTransaction,
            timestamp: (/* @__PURE__ */ new Date()).toISOString()
          };
          const jwsToken = await CryptoService.createJWS(payload);
          const receiptNumber = this.generateReceiptNumber(transactionData.id, 1);
          const receiptData = {
            receiptNumber,
            transaction: canonicalTransaction,
            companyInfo: await this.getCompanyInfo(),
            senderInfo: await this.getSenderInfo(transactionData.userId),
            beneficiaryInfo: await this.getBeneficiaryInfo(transactionData),
            verificationInfo: {
              hash,
              jwsToken,
              verificationUrl: `${this.VERIFICATION_BASE_URL}/r/${transactionData.id}?t=${jwsToken}`
            },
            locale
          };
          const { ThermalReceiptGenerator: ThermalReceiptGenerator2 } = await Promise.resolve().then(() => (init_thermal_receipt_generator(), thermal_receipt_generator_exports));
          const imageBuffer = await ThermalReceiptGenerator2.generateThermalReceipt(receiptData);
          const storagePath = await this.saveReceiptFile(transactionData.id, imageBuffer, locale, "png");
          const [receipt] = await db.insert(receipts2).values({
            txnId: transactionData.id,
            version: 1,
            locale,
            storagePath,
            sha256Base64url: hash,
            jwsToken,
            pdfSigned: false,
            revoked: false,
            createdBy: "system",
            publicCopy: true
          }).returning({ id: receipts2.id });
          await this.logAuditAction(receipt.id, "generate", "system", {
            txnId: transactionData.id,
            locale,
            receiptNumber
          });
          return receipt.id;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
          throw new Error("\u0641\u0634\u0644 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644");
        }
      }
      /**
       * التحقق من صحة إيصال
       */
      static async verifyReceipt(receiptId, token) {
        try {
          const [receipt] = await db.select().from(receipts2).where(eq8(receipts2.id, receiptId)).limit(1);
          if (!receipt) {
            return { valid: false, reasons: ["\u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F"] };
          }
          const reasons = [];
          if (receipt.revoked) {
            reasons.push("\u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0645\u0644\u063A\u064A");
          }
          if (token) {
            const verificationResult = await CryptoService.verifyJWS(token);
            if (!verificationResult.valid) {
              reasons.push(`\u062A\u0648\u0642\u064A\u0639 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D: ${verificationResult.error}`);
            } else {
              const payloadHash = verificationResult.payload?.hash;
              if (payloadHash !== receipt.sha256Base64url) {
                reasons.push("\u0639\u062F\u0645 \u062A\u0637\u0627\u0628\u0642 \u0627\u0644\u0647\u0627\u0634");
              }
            }
          }
          if (reasons.length === 0) {
            await db.update(receipts2).set({ verifiedAt: /* @__PURE__ */ new Date() }).where(eq8(receipts2.id, receiptId));
            await this.logAuditAction(receiptId, "verify", "public");
          }
          return {
            valid: reasons.length === 0,
            reasons,
            summary: {
              receiptId,
              txnId: receipt.txnId,
              version: receipt.version,
              locale: receipt.locale,
              createdAt: receipt.createdAt,
              verifiedAt: receipt.verifiedAt
            }
          };
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
          return { valid: false, reasons: ["\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645"] };
        }
      }
      /**
       * إبطال إيصال
       */
      static async revokeReceipt(receiptId, reason, userId) {
        try {
          const [updated] = await db.update(receipts2).set({ revoked: true }).where(eq8(receipts2.id, receiptId)).returning({ id: receipts2.id });
          if (updated) {
            await this.logAuditAction(receiptId, "revoke", userId, { reason });
            return true;
          }
          return false;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0628\u0637\u0627\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
          return false;
        }
      }
      /**
       * إعادة إصدار إيصال بإصدار جديد
       */
      static async regenerateReceipt(txnId, locale = "ar", reason, userId) {
        try {
          const [currentReceipt] = await db.select({ version: receipts2.version }).from(receipts2).where(eq8(receipts2.txnId, txnId)).orderBy(desc6(receipts2.version)).limit(1);
          const newVersion = currentReceipt ? currentReceipt.version + 1 : 1;
          await db.update(receipts2).set({ revoked: true }).where(eq8(receipts2.txnId, txnId));
          const [transaction] = await db.select().from(transactions).where(eq8(transactions.id, parseInt(txnId))).limit(1);
          if (!transaction) {
            throw new Error("\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629");
          }
          const transactionData = {
            id: txnId,
            type: transaction.type,
            userId: transaction.userId,
            amount: transaction.amount,
            currency: transaction.currency,
            commission: "0",
            counterparty: "",
            ref: "",
            referenceNumber: transaction.referenceNumber || `REF-${txnId}`,
            note: transaction.description || "",
            executedAt: transaction.date || /* @__PURE__ */ new Date(),
            status: "completed"
          };
          const receiptId = await this.generateReceipt(transactionData, locale);
          await db.update(receipts2).set({ version: newVersion }).where(eq8(receipts2.id, receiptId));
          await this.logAuditAction(receiptId, "regenerate", userId, {
            reason,
            oldVersion: currentReceipt?.version || 0,
            newVersion
          });
          return receiptId;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0639\u0627\u062F\u0629 \u0625\u0635\u062F\u0627\u0631 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
          return null;
        }
      }
      /**
       * الحصول على قائمة الإيصالات لمعاملة
       */
      static async getReceiptsByTransaction(txnId) {
        try {
          return await db.select({
            id: receipts2.id,
            version: receipts2.version,
            locale: receipts2.locale,
            revoked: receipts2.revoked,
            createdAt: receipts2.createdAt,
            verifiedAt: receipts2.verifiedAt,
            filePath: receipts2.storagePath,
            // إضافة مسار الملف
            sha256Hash: receipts2.sha256Base64url,
            jwsToken: receipts2.jwsToken
          }).from(receipts2).where(eq8(receipts2.txnId, txnId)).orderBy(desc6(receipts2.version));
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A:", error);
          return [];
        }
      }
      /**
       * إنشاء رابط تحميل آمن للإيصال
       */
      static async getDownloadUrl(receiptId, userId) {
        try {
          const [receipt] = await db.select().from(receipts2).where(eq8(receipts2.id, receiptId)).limit(1);
          if (!receipt || receipt.revoked) {
            return null;
          }
          await this.logAuditAction(receiptId, "download", userId || "anonymous");
          return `/api/receipts/${receiptId}/file`;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0631\u0627\u0628\u0637 \u0627\u0644\u062A\u062D\u0645\u064A\u0644:", error);
          return null;
        }
      }
      /**
       * تحويل بيانات المعاملة إلى تنسيق قانوني
       */
      static async createCanonicalTransaction(data) {
        const canonicalTxn = {
          txn_id: data.id,
          txn_type: data.type,
          executed_at: moment3(data.executedAt).utc().toISOString(),
          timezone: "Africa/Tripoli",
          amount_src: {
            ccy: data.currency,
            value: parseFloat(data.amount).toFixed(2)
          },
          fees: data.commission ? [{
            name: "commission",
            ccy: data.currency,
            value: parseFloat(data.commission).toFixed(2)
          }] : [],
          taxes: [],
          net_to_beneficiary: {
            ccy: data.currency,
            value: (parseFloat(data.amount) - parseFloat(data.commission || "0")).toFixed(2)
          },
          sender_ref: this.maskAccountNumber(data.userId.toString()),
          beneficiary_ref: data.counterparty || "N/A",
          office_ref: "Main-Office",
          version: 1
        };
        if (data.referenceNumber) {
          canonicalTxn.referenceNumber = data.referenceNumber;
        }
        return canonicalTxn;
      }
      /**
       * إنشاء رقم إيصال
       */
      static generateReceiptNumber(txnId, version) {
        const date = /* @__PURE__ */ new Date();
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        const shortTxn = txnId.substring(0, 8);
        return `R-${year}${month}${day}-${shortTxn}-v${version}`;
      }
      /**
       * الحصول على معلومات الشركة
       */
      static async getCompanyInfo() {
        return {
          name: "\u0645\u0643\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A",
          nameEn: "Libyan Exchange Office",
          address: "\u0637\u0631\u0627\u0628\u0644\u0633\u060C \u0644\u064A\u0628\u064A\u0627",
          addressEn: "Tripoli, Libya",
          phone: "+218-21-1234567",
          email: "info@exchange.ly",
          registrationNumber: "REG-2024-001",
          taxNumber: "TAX-123456789"
        };
      }
      /**
       * الحصول على معلومات المرسل
       */
      static async getSenderInfo(userId) {
        return {
          name: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0631\u0642\u0645 " + userId,
          accountNumber: userId.toString(),
          city: "\u0637\u0631\u0627\u0628\u0644\u0633"
        };
      }
      /**
       * الحصول على معلومات المستفيد
       */
      static async getBeneficiaryInfo(data) {
        return {
          name: data.counterparty || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          accountNumber: data.ref || "N/A",
          city: "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          country: "\u0644\u064A\u0628\u064A\u0627"
        };
      }
      /**
       * حفظ ملف الإيصال
       */
      static async saveReceiptFile(txnId, fileBuffer, locale, extension = "pdf") {
        const dir = path6.join(this.STORAGE_BASE_PATH, txnId);
        await fs6.mkdir(dir, { recursive: true });
        const filename = `receipt_${locale}_${Date.now()}.${extension}`;
        const filePath = path6.join(dir, filename);
        await fs6.writeFile(filePath, fileBuffer);
        return path6.relative(this.STORAGE_BASE_PATH, filePath);
      }
      /**
       * تسجيل عملية في سجل التدقيق
       */
      static async logAuditAction(receiptId, action, userId, metadata, ipAddress, userAgent) {
        try {
          await db.insert(receiptAuditLog2).values({
            receiptId,
            action,
            userId,
            metadata: metadata ? JSON.stringify(metadata) : null,
            ipAddress,
            userAgent
          });
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0633\u062C\u0644 \u0627\u0644\u062A\u062F\u0642\u064A\u0642:", error);
        }
      }
      /**
       * إخفاء رقم الحساب
       */
      static maskAccountNumber(accountNumber) {
        if (accountNumber.length <= 4) return accountNumber;
        const visiblePart = accountNumber.slice(-4);
        const maskedPart = "*".repeat(accountNumber.length - 4);
        return `user:${maskedPart}${visiblePart}`;
      }
      /**
       * إخفاء اسم المستخدم
       */
      static maskName(name) {
        const parts = name.trim().split(" ");
        if (parts.length === 1) {
          if (parts[0].length <= 2) return parts[0];
          return parts[0].charAt(0) + "*".repeat(parts[0].length - 1);
        }
        return parts[0] + " " + parts[1].charAt(0) + ".";
      }
      /**
       * الحصول على قائمة بجميع الإيصالات (للمدير)
       */
      static async getAllReceipts(limit = 50, offset = 0) {
        try {
          return await db.select({
            id: receipts2.id,
            txnId: receipts2.txnId,
            version: receipts2.version,
            locale: receipts2.locale,
            revoked: receipts2.revoked,
            createdAt: receipts2.createdAt,
            hash: receipts2.sha256Base64url
          }).from(receipts2).orderBy(desc6(receipts2.createdAt)).limit(limit).offset(offset);
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A:", error);
          return [];
        }
      }
      /**
       * الحصول على إحصائيات نظام الإيصالات
       */
      static async getReceiptStats() {
        try {
          const now = /* @__PURE__ */ new Date();
          const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1e3);
          const [totalResult] = await db.select({ count: sql10`count(*)` }).from(receipts2);
          const [revokedResult] = await db.select({ count: sql10`count(*)` }).from(receipts2).where(eq8(receipts2.revoked, true));
          const [recent24hResult] = await db.select({ count: sql10`count(*)` }).from(receipts2).where(sql10`${receipts2.createdAt} >= ${yesterday}`);
          const total = totalResult?.count || 0;
          const revoked = revokedResult?.count || 0;
          const recent24h = recent24hResult?.count || 0;
          const active = total - revoked;
          return {
            total,
            revoked,
            active,
            recent24h
          };
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A:", error);
          return { total: 0, revoked: 0, active: 0, recent24h: 0 };
        }
      }
      /**
       * تحديث إعداد نظام الإيصالات
       */
      static async updateReceiptSetting(key, value, updatedBy) {
        try {
          await db.insert(receiptSettings).values({
            key,
            value,
            updatedBy,
            updatedAt: /* @__PURE__ */ new Date()
          }).onConflictDoUpdate({
            target: receiptSettings.key,
            set: {
              value,
              updatedBy,
              updatedAt: /* @__PURE__ */ new Date()
            }
          });
          return true;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
          return false;
        }
      }
      /**
       * الحصول على إعداد نظام الإيصالات
       */
      static async getReceiptSetting(key) {
        try {
          const [setting] = await db.select({ value: receiptSettings.value }).from(receiptSettings).where(eq8(receiptSettings.key, key)).limit(1);
          return setting?.value || null;
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
          return null;
        }
      }
    };
  }
});

// server/admin-transactions-fixed.ts
var admin_transactions_fixed_exports = {};
__export(admin_transactions_fixed_exports, {
  AdminTransactionsFixed: () => AdminTransactionsFixed
});
import { sql as sql11 } from "drizzle-orm";
var AdminTransactionsFixed;
var init_admin_transactions_fixed = __esm({
  "server/admin-transactions-fixed.ts"() {
    "use strict";
    init_db();
    AdminTransactionsFixed = class {
      static async getAllTransactions(filters = {}) {
        const page = filters.page || 1;
        const pageSize = filters.pageSize || 50;
        const offset = (page - 1) * pageSize;
        console.log("\u{1F50D} \u062C\u0644\u0628 \u062C\u0645\u064A\u0639 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A...");
        console.log("\u{1F3AF} \u0627\u0644\u0641\u0644\u0627\u062A\u0631 \u0627\u0644\u0645\u0633\u062A\u0644\u0645\u0629:", JSON.stringify(filters, null, 2));
        try {
          let adminQuery = `
        SELECT 
          'admin' as source,
          at.id::text,
          at.ref_no as refNo,
          at.type,
          COALESCE(at.status, 'completed') as status,
          at.created_at as createdAt,
          at.amount,
          at.currency,
          at.notes as description,
          u.full_name as userName,
          u.account_number as userAccountNumber
        FROM admin_transactions at
        LEFT JOIN users u ON at.user_id = u.id
        WHERE 1=1
      `;
          let regularQuery = `
        SELECT 
          'regular' as source,
          t.id::text,
          COALESCE(t.reference_number, 'TX-' || t.id) as refNo,
          t.type,
          'completed' as status,
          t.date as createdAt,
          t.amount,
          t.currency,
          t.description,
          u.full_name as userName,
          u.account_number as userAccountNumber
        FROM transactions t
        LEFT JOIN users u ON t.user_id = u.id
        WHERE 1=1
      `;
          const queryParams = [];
          let paramIndex = 1;
          if (filters.dateFrom) {
            adminQuery += ` AND at.created_at >= '${filters.dateFrom}'`;
            regularQuery += ` AND t.date >= '${filters.dateFrom}'`;
          }
          if (filters.dateTo) {
            adminQuery += ` AND at.created_at <= '${filters.dateTo}'`;
            regularQuery += ` AND t.date <= '${filters.dateTo}'`;
          }
          if (filters.q) {
            const searchTerm = `%${filters.q}%`;
            adminQuery += ` AND (at.ref_no ILIKE '${searchTerm}' OR at.notes ILIKE '${searchTerm}' OR u.full_name ILIKE '${searchTerm}' OR u.account_number ILIKE '${searchTerm}')`;
            regularQuery += ` AND (t.reference_number ILIKE '${searchTerm}' OR t.description ILIKE '${searchTerm}' OR u.full_name ILIKE '${searchTerm}' OR u.account_number ILIKE '${searchTerm}')`;
          }
          if (filters.type) {
            adminQuery += ` AND at.type = '${filters.type}'`;
            regularQuery += ` AND t.type = '${filters.type}'`;
          }
          if (filters.status) {
            adminQuery += ` AND COALESCE(at.status, 'completed') = '${filters.status}'`;
            if (filters.status !== "completed") {
              regularQuery += ` AND 1=0`;
            }
          }
          if (filters.currency) {
            adminQuery += ` AND at.currency = '${filters.currency}'`;
            regularQuery += ` AND t.currency = '${filters.currency}'`;
          }
          if (filters.amountMin) {
            adminQuery += ` AND CAST(at.amount AS DECIMAL) >= ${filters.amountMin}`;
            regularQuery += ` AND CAST(t.amount AS DECIMAL) >= ${filters.amountMin}`;
          }
          if (filters.amountMax) {
            adminQuery += ` AND CAST(at.amount AS DECIMAL) <= ${filters.amountMax}`;
            regularQuery += ` AND CAST(t.amount AS DECIMAL) <= ${filters.amountMax}`;
          }
          console.log("\u{1F4CB} \u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u0627\u0633\u062A\u0639\u0644\u0627\u0645\u0627\u062A \u0645\u0646\u0641\u0635\u0644\u0629...");
          const [adminQueryResult, regularQueryResult] = await Promise.all([
            db.execute(sql11.raw(adminQuery)),
            db.execute(sql11.raw(regularQuery))
          ]);
          const adminResults = Array.isArray(adminQueryResult) ? adminQueryResult : adminQueryResult.rows || [];
          const regularResults = Array.isArray(regularQueryResult) ? regularQueryResult : regularQueryResult.rows || [];
          const allResults = [...adminResults, ...regularResults];
          allResults.sort((a, b) => {
            const dateA = new Date(a.createdat || a.createdAt).getTime();
            const dateB = new Date(b.createdat || b.createdAt).getTime();
            return dateB - dateA;
          });
          console.log(`\u{1F4CA} \u0625\u062C\u0645\u0627\u0644\u064A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A: ${allResults.length} (${adminResults.length} \u0625\u062F\u0627\u0631\u064A\u0629 + ${regularResults.length} \u0639\u0627\u062F\u064A\u0629)`);
          let totalAmount = 0;
          const byCurrency = {};
          allResults.forEach((row) => {
            const amount = parseFloat(row.amount || "0");
            const currency = row.currency || "LYD";
            totalAmount += Math.abs(amount);
            if (!byCurrency[currency]) {
              byCurrency[currency] = { count: 0, amount: "0" };
            }
            byCurrency[currency].count += 1;
            byCurrency[currency].amount = (parseFloat(byCurrency[currency].amount) + Math.abs(amount)).toString();
          });
          const summary = {
            totalCount: allResults.length,
            totalAmount: totalAmount.toString(),
            byCurrency
          };
          const paginatedResults = allResults.slice(offset, offset + pageSize);
          const rows = paginatedResults.map((row) => ({
            id: row.id,
            refNo: row.refno || `REF-${row.id}`,
            type: row.type,
            status: row.status,
            createdAt: new Date(row.createdat).toISOString(),
            amount: row.amount,
            currency: row.currency,
            description: row.description || "",
            userName: row.username || `\u0645\u0633\u062A\u062E\u062F\u0645 ${row.id}`,
            userAccountNumber: row.useraccountnumber || "",
            source: row.source
          }));
          console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${rows.length} \u0645\u0639\u0627\u0645\u0644\u0629 \u0645\u0646 \u0623\u0635\u0644 ${allResults.length}`);
          return {
            rows,
            summary,
            pagination: {
              page,
              pageSize,
              total: allResults.length,
              totalPages: Math.ceil(allResults.length / pageSize),
              hasNext: offset + pageSize < allResults.length,
              hasPrevious: page > 1
            }
          };
        } catch (error) {
          console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A:", error);
          throw new Error(`\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A: ${error?.message || "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"}`);
        }
      }
    };
  }
});

// server/index.ts
import express2 from "express";
import cors from "cors";

// server/routes.ts
import { createServer } from "http";
import { Server as SocketIOServer } from "socket.io";

// server/realtime-events.ts
var RealtimeEvents = class {
  io;
  constructor(io) {
    this.io = io;
  }
  // ================================
  // أحداث الأرصدة
  // ================================
  emitBalanceUpdate(userId, currency, amount) {
    const payload = {
      userId,
      currency,
      amount,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F4B0} Broadcasting balance update: User ${userId}, ${currency}: ${amount}`);
    this.io.to(`user-${userId}`).emit("balance.updated", payload);
    this.io.to(`balance-${userId}-${currency}`).emit("balance.updated", payload);
  }
  // ================================
  // أحداث التحويلات الداخلية
  // ================================
  emitInternalTransferCreated(transfer) {
    const payload = {
      id: transfer.id,
      senderId: transfer.senderId,
      receiverId: transfer.receiverId,
      amount: transfer.amount,
      currency: transfer.currency,
      status: "completed",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F4E4} Broadcasting internal transfer: ${transfer.senderId} \u2192 ${transfer.receiverId}`);
    this.io.to(`user-${transfer.senderId}`).emit("transfer.internal.created", {
      ...payload,
      type: "sent",
      message: `\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 ${transfer.amount} ${transfer.currency} \u0625\u0644\u0649 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${transfer.receiverId}`
    });
    this.io.to(`user-${transfer.receiverId}`).emit("transfer.internal.created", {
      ...payload,
      type: "received",
      message: `\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 ${transfer.amount} ${transfer.currency} \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${transfer.senderId}`
    });
    this.io.to("type-admin").emit("transfer.internal.created", payload);
  }
  // ================================
  // أحداث تحويلات المدن
  // ================================
  emitCityTransferCreated(transfer) {
    const payload = {
      id: transfer.id,
      senderId: transfer.senderId,
      amount: transfer.amount,
      currency: transfer.currency,
      toOfficeId: transfer.toOfficeId,
      code: transfer.code,
      status: "pending",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F3E2} Broadcasting city transfer: ${transfer.senderId} \u2192 Office ${transfer.toOfficeId}`);
    this.io.to(`user-${transfer.senderId}`).emit("transfer.city.created", payload);
    this.io.to(`office-${transfer.toOfficeId}`).emit("transfer.city.created", payload);
    this.io.to("type-agent").emit("transfer.city.created", payload);
    this.io.to("type-admin").emit("transfer.city.created", payload);
  }
  emitCityTransferCompleted(transfer) {
    const payload = {
      id: transfer.id,
      senderId: transfer.senderId,
      code: transfer.code,
      status: "completed",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u2705 Broadcasting city transfer completed: ${transfer.code}`);
    this.io.to(`user-${transfer.senderId}`).emit("transfer.city.completed", payload);
    if (transfer.fromOfficeId) {
      this.io.to(`office-${transfer.fromOfficeId}`).emit("transfer.city.completed", payload);
    }
    if (transfer.toOfficeId) {
      this.io.to(`office-${transfer.toOfficeId}`).emit("transfer.city.completed", payload);
    }
    this.io.to("type-admin").emit("transfer.city.completed", payload);
  }
  // ================================
  // أحداث التحويلات الدولية
  // ================================
  emitInternationalTransferCreated(transfer) {
    const payload = {
      id: transfer.id,
      senderId: transfer.senderId,
      amount: transfer.amount,
      currency: transfer.currency,
      country: transfer.country,
      status: "pending",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F30D} Broadcasting international transfer: ${transfer.senderId} \u2192 ${transfer.country}`);
    this.io.to(`user-${transfer.senderId}`).emit("transfer.international.created", payload);
    this.io.to("type-admin").emit("transfer.international.created", payload);
  }
  emitInternationalTransferCompleted(transfer) {
    const payload = {
      id: transfer.id,
      senderId: transfer.senderId,
      status: "completed",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u2705 Broadcasting international transfer completed: ${transfer.id}`);
    this.io.to(`user-${transfer.senderId}`).emit("transfer.international.completed", payload);
    this.io.to("type-admin").emit("transfer.international.completed", payload);
  }
  // ================================
  // أحداث السوق
  // ================================
  emitMarketOrderCreated(order) {
    const payload = {
      id: order.id,
      userId: order.userId,
      side: order.side,
      baseCurrency: order.baseCurrency,
      quoteCurrency: order.quoteCurrency,
      amount: order.amount,
      price: order.price,
      total: order.total,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F4CA} Broadcasting market order: ${order.side} ${order.baseCurrency}/${order.quoteCurrency}`);
    this.io.to(`user-${order.userId}`).emit("market.order.created", payload);
    this.io.to(`market-${order.baseCurrency}-${order.quoteCurrency}`).emit("market.order.created", payload);
    this.emitOrderbookUpdate(order.baseCurrency, order.quoteCurrency);
  }
  emitMarketTradeExecuted(trade) {
    const payload = {
      id: trade.id,
      buyerId: trade.buyerId,
      sellerId: trade.sellerId,
      baseCurrency: trade.baseCurrency,
      quoteCurrency: trade.quoteCurrency,
      amount: trade.amount,
      price: trade.price,
      total: trade.total,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F91D} Broadcasting market trade: ${trade.buyerId} \u2194 ${trade.sellerId}`);
    this.io.to(`user-${trade.buyerId}`).emit("market.trade.executed", {
      ...payload,
      type: "buy",
      message: `\u062A\u0645 \u062A\u0646\u0641\u064A\u0630 \u0637\u0644\u0628 \u0627\u0644\u0634\u0631\u0627\u0621: ${trade.amount} ${trade.baseCurrency} \u0628\u0633\u0639\u0631 ${trade.price}`
    });
    this.io.to(`user-${trade.sellerId}`).emit("market.trade.executed", {
      ...payload,
      type: "sell",
      message: `\u062A\u0645 \u062A\u0646\u0641\u064A\u0630 \u0637\u0644\u0628 \u0627\u0644\u0628\u064A\u0639: ${trade.amount} ${trade.baseCurrency} \u0628\u0633\u0639\u0631 ${trade.price}`
    });
    this.io.to(`market-${trade.baseCurrency}-${trade.quoteCurrency}`).emit("market.trade.executed", payload);
    this.emitOrderbookUpdate(trade.baseCurrency, trade.quoteCurrency);
  }
  emitMarketOrderCanceled(order) {
    const payload = {
      id: order.id,
      userId: order.userId,
      baseCurrency: order.baseCurrency,
      quoteCurrency: order.quoteCurrency,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u274C Broadcasting market order canceled: ${order.id}`);
    this.io.to(`user-${order.userId}`).emit("market.order.canceled", payload);
    this.io.to(`market-${order.baseCurrency}-${order.quoteCurrency}`).emit("market.order.canceled", payload);
    this.emitOrderbookUpdate(order.baseCurrency, order.quoteCurrency);
  }
  async emitOrderbookUpdate(baseCurrency, quoteCurrency) {
    const payload = {
      baseCurrency,
      quoteCurrency,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
      // سنضيف بيانات دفتر الأوامر هنا لاحقاً
    };
    console.log(`\u{1F4CB} Broadcasting orderbook update: ${baseCurrency}/${quoteCurrency}`);
    this.io.to(`market-${baseCurrency}-${quoteCurrency}`).emit("market.orderbook.updated", payload);
  }
  // ================================
  // أحداث الإشعارات
  // ================================
  emitNotification(userId, notification) {
    const payload = {
      id: notification.id,
      userId,
      title: notification.title,
      message: notification.message,
      type: notification.type || "info",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F514} Broadcasting notification to user ${userId}: ${notification.title}`);
    this.io.to(`user-${userId}`).emit("notification.created", payload);
  }
  // ================================
  // أحداث الإدارة
  // ================================
  emitSettingsUpdated(settings) {
    const payload = {
      type: settings.type || "general",
      data: settings,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u2699\uFE0F Broadcasting settings update: ${settings.type}`);
    this.io.emit("admin.settings.updated", payload);
  }
  emitRequestStatusUpdated(userId, request) {
    const payload = {
      id: request.id,
      userId,
      type: request.type,
      status: request.status,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F4CB} Broadcasting request status update: ${request.id} \u2192 ${request.status}`);
    this.io.to(`user-${userId}`).emit("request.status.updated", payload);
    this.io.to("type-admin").emit("request.status.updated", payload);
  }
  // ================================
  // أحداث الشحن والسحب
  // ================================
  emitTopupCreated(userId, topup) {
    const payload = {
      id: topup.id,
      userId,
      amount: topup.amount,
      currency: topup.currency,
      type: "topup",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F4B3} Broadcasting topup: User ${userId}, ${topup.amount} ${topup.currency}`);
    this.io.to(`user-${userId}`).emit("topup.created", payload);
    this.io.to("type-admin").emit("topup.created", payload);
  }
  emitWithdrawCreated(userId, withdraw) {
    const payload = {
      id: withdraw.id,
      userId,
      amount: withdraw.amount,
      currency: withdraw.currency,
      type: "withdraw",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    };
    console.log(`\u{1F4B8} Broadcasting withdraw: User ${userId}, ${withdraw.amount} ${withdraw.currency}`);
    this.io.to(`user-${userId}`).emit("withdraw.created", payload);
    this.io.to("type-admin").emit("withdraw.created", payload);
  }
  // ================================
  // وظائف مساعدة للغرف
  // ================================
  subscribeUserToRoom(userId, room) {
    const userSockets = this.getUserSockets(userId);
    userSockets.forEach((socket) => {
      socket.join(room);
    });
    console.log(`\u{1F4E1} User ${userId} subscribed to room: ${room}`);
  }
  unsubscribeUserFromRoom(userId, room) {
    const userSockets = this.getUserSockets(userId);
    userSockets.forEach((socket) => {
      socket.leave(room);
    });
    console.log(`\u{1F4E1} User ${userId} unsubscribed from room: ${room}`);
  }
  getUserSockets(userId) {
    const sockets = [];
    this.io.sockets.sockets.forEach((socket) => {
      if (socket.userId === userId) {
        sockets.push(socket);
      }
    });
    return sockets;
  }
  // إحصائيات
  getConnectedUsers() {
    return this.io.sockets.sockets.size;
  }
  getUsersInRoom(room) {
    const roomSockets = this.io.sockets.adapter.rooms.get(room);
    return roomSockets ? roomSockets.size : 0;
  }
};
var realtimeEvents = null;
function initializeRealtimeEvents(io) {
  realtimeEvents = new RealtimeEvents(io);
  console.log("\u{1F680} Realtime Events service initialized");
  return realtimeEvents;
}

// server/routes.ts
init_storage();
init_db();

// server/auth.ts
init_storage();
init_schema();
import { scrypt, randomBytes as randomBytes2, timingSafeEqual } from "crypto";
import { promisify } from "util";
import jwt3 from "jsonwebtoken";
import { ZodError } from "zod";
import { fromZodError } from "zod-validation-error";

// server/security.ts
init_storage();
import fs from "fs/promises";
import path from "path";
import sharp from "sharp";
import { randomUUID } from "crypto";
import jwt from "jsonwebtoken";

// server/utils/ip.ts
import axios from "axios";
function isPublicIP(ip) {
  if (!ip || ip === "unknown") return false;
  const cleanIP = ip.replace(/^::ffff:/, "");
  const ipOnly = cleanIP.split(":")[0];
  if (ipOnly === "127.0.0.1" || ipOnly === "localhost" || ipOnly === "::1") return false;
  const parts = ipOnly.split(".");
  if (parts.length !== 4) return false;
  const firstOctet = parseInt(parts[0]);
  const secondOctet = parseInt(parts[1]);
  if (firstOctet === 10) return false;
  if (firstOctet === 172 && secondOctet >= 16 && secondOctet <= 31) return false;
  if (firstOctet === 192 && secondOctet === 168) return false;
  return true;
}
function normalizeIP(ip) {
  if (!ip) return "";
  return ip.replace(/^::ffff:/, "").split(":")[0];
}
function isBehindTrustedProxy(req) {
  const app2 = req.app;
  if (!app2 || !app2.get("trust proxy")) {
    return false;
  }
  const serverDetectedIP = normalizeIP(req.ip || req.socket?.remoteAddress || "");
  const trustedProxyPatterns = [
    /^127\./,
    // localhost
    /^10\./,
    // private network (common in containers)
    /^172\.(1[6-9]|2[0-9]|3[01])\./,
    // private network
    /^192\.168\./
    // private network
  ];
  return trustedProxyPatterns.some((pattern) => pattern.test(serverDetectedIP));
}
function getClientPublicIP(req) {
  const serverDetectedIP = req.ip || req.socket?.remoteAddress || "127.0.0.1";
  const clientReportedIP = req.headers["x-client-ip"];
  const normalizedServerIP = normalizeIP(serverDetectedIP);
  const normalizedClientIP = clientReportedIP ? normalizeIP(clientReportedIP) : null;
  const isBehindProxy = isBehindTrustedProxy(req);
  const trustedHeaderChecks = [
    { header: "cf-connecting-ip", source: "Cloudflare" },
    { header: "fly-client-ip", source: "Fly.io" },
    { header: "x-real-ip", source: "X-Real-IP" }
  ];
  for (const check2 of trustedHeaderChecks) {
    const value = req.headers[check2.header];
    if (value && typeof value === "string") {
      const normalizedIP = normalizeIP(value);
      if (isPublicIP(normalizedIP)) {
        return {
          ip: normalizedIP,
          source: check2.source,
          isPublic: true,
          trusted: true,
          serverDetectedIp: normalizedServerIP,
          clientReportedIp: normalizedClientIP
        };
      }
    }
  }
  const xForwardedFor = req.headers["x-forwarded-for"];
  if (xForwardedFor && typeof xForwardedFor === "string" && isBehindProxy) {
    const ips = xForwardedFor.split(",").map((ip) => normalizeIP(ip.trim()));
    for (const ip of ips) {
      if (isPublicIP(ip)) {
        return {
          ip,
          source: "X-Forwarded-For (trusted proxy)",
          isPublic: true,
          trusted: true,
          serverDetectedIp: normalizedServerIP,
          clientReportedIp: normalizedClientIP
        };
      }
    }
  } else if (xForwardedFor && typeof xForwardedFor === "string" && !isBehindProxy) {
    const ips = xForwardedFor.split(",").map((ip) => normalizeIP(ip.trim()));
    for (const ip of ips) {
      if (isPublicIP(ip)) {
        return {
          ip,
          source: "X-Forwarded-For (untrusted)",
          isPublic: true,
          trusted: false,
          // Not trusted due to lack of proper proxy setup
          serverDetectedIp: normalizedServerIP,
          clientReportedIp: normalizedClientIP,
          fallbackReason: "X-Forwarded-For without trusted proxy configuration"
        };
      }
    }
  }
  if (isPublicIP(normalizedServerIP)) {
    return {
      ip: normalizedServerIP,
      source: "Server-detected",
      isPublic: true,
      trusted: true,
      serverDetectedIp: normalizedServerIP,
      clientReportedIp: normalizedClientIP
    };
  }
  if (normalizedServerIP === "127.0.0.1" && normalizedClientIP && isPublicIP(normalizedClientIP)) {
    return {
      ip: normalizedClientIP,
      source: "Client-provided (localhost fallback)",
      isPublic: true,
      trusted: false,
      // Not trusted for security purposes
      serverDetectedIp: normalizedServerIP,
      clientReportedIp: normalizedClientIP,
      fallbackReason: "Server IP is localhost, using client-reported IP"
    };
  }
  if (normalizedClientIP && isPublicIP(normalizedClientIP)) {
    return {
      ip: normalizedClientIP,
      source: "Client-provided (display only)",
      isPublic: true,
      trusted: false,
      serverDetectedIp: normalizedServerIP,
      clientReportedIp: normalizedClientIP,
      fallbackReason: "No trusted public IP available"
    };
  }
  return {
    ip: normalizedServerIP,
    source: "Fallback (private)",
    isPublic: false,
    trusted: false,
    serverDetectedIp: normalizedServerIP,
    clientReportedIp: normalizedClientIP,
    fallbackReason: "No public IP available"
  };
}
async function getGeoLocation(ip) {
  try {
    if (!isPublicIP(ip)) {
      return {
        country: "Unknown (Local IP)",
        city: "Unknown (Local IP)",
        region: "Unknown (Local IP)",
        timezone: "Unknown (Local IP)"
      };
    }
    const response = await axios.get(`http://ip-api.com/json/${ip}?lang=ar`, { timeout: 3e3 });
    if (response.data && response.data.status === "success") {
      return {
        country: response.data.country || "Unknown",
        city: response.data.city || "Unknown",
        region: response.data.regionName || "Unknown",
        timezone: response.data.timezone || "Unknown"
      };
    }
  } catch (error) {
  }
  return {
    country: "Unknown",
    city: "Unknown",
    region: "Unknown",
    timezone: "Unknown"
  };
}

// server/security.ts
var blockedFingerprints = /* @__PURE__ */ new Set();
var attemptCounters = /* @__PURE__ */ new Map();
async function initSecurityDirectories() {
  const dirs = ["logs", "reports"];
  for (const dir of dirs) {
    try {
      await fs.mkdir(path.join(process.cwd(), dir), { recursive: true });
    } catch (error) {
      console.error(`Failed to create ${dir} directory:`, error);
    }
  }
}
async function loadBlockedFingerprints() {
  try {
    const data = await fs.readFile(path.join(process.cwd(), "logs", "blocked_fingerprints.json"), "utf-8");
    const blocked = JSON.parse(data);
    blocked.forEach((fp) => blockedFingerprints.add(fp));
    console.log(`Loaded ${blocked.length} blocked fingerprints`);
  } catch (error) {
    console.log("No blocked fingerprints file found, starting fresh");
  }
}
async function saveBlockedFingerprints() {
  try {
    const blocked = Array.from(blockedFingerprints);
    await fs.writeFile(
      path.join(process.cwd(), "logs", "blocked_fingerprints.json"),
      JSON.stringify(blocked, null, 2)
    );
  } catch (error) {
    console.error("Failed to save blocked fingerprints:", error);
  }
}
async function writeSecurityLog(logEntry) {
  try {
    await storage.addSecurityLog({
      email: logEntry.username || null,
      username: logEntry.username || null,
      eventType: logEntry.reportType === "failed_login" ? "FAILED_LOGIN" : "SUSPICIOUS_ACTIVITY",
      fingerprint: logEntry.fingerprint,
      ipAddress: logEntry.ip,
      userAgent: logEntry.userAgent,
      country: logEntry.country,
      city: logEntry.city,
      platform: logEntry.platform,
      language: logEntry.language,
      screen: logEntry.screen,
      timezone: logEntry.timezone,
      attempts: logEntry.attempts || 1,
      imageFilename: logEntry.imageFileName || null,
      blocked: logEntry.blocked || false,
      reportType: logEntry.reportType || "failed_login",
      metadata: {}
    });
    const logFile = path.join(process.cwd(), "logs", "security_logs.json");
    let logs = [];
    try {
      const data = await fs.readFile(logFile, "utf-8");
      logs = JSON.parse(data);
    } catch (error) {
      logs = [];
    }
    logs.push(logEntry);
    await fs.writeFile(logFile, JSON.stringify(logs, null, 2));
    const textLogFile = path.join(process.cwd(), "logs", "login_logs.txt");
    const logLine = JSON.stringify(logEntry) + "\n";
    await fs.appendFile(textLogFile, logLine);
  } catch (error) {
    console.error("Failed to log security event:", error);
  }
}
async function logSecurityEvent(event, securityImage) {
  try {
    const geo = await getGeoLocation(event.ipAddress);
    let attempts = 1;
    if (event.fingerprint) {
      if (event.type === "FAILED_LOGIN") {
        attempts = (attemptCounters.get(event.fingerprint) || 0) + 1;
        attemptCounters.set(event.fingerprint, attempts);
        if (attempts >= 3) {
          blockedFingerprints.add(event.fingerprint);
          await saveBlockedFingerprints();
        }
      } else if (event.type === "SUCCESSFUL_LOGIN") {
        attemptCounters.delete(event.fingerprint);
      }
    }
    let imageFileName = null;
    if (event.type === "FAILED_LOGIN") {
      const fingerprint = event.fingerprint || "unknown";
      if (securityImage) {
        imageFileName = await saveSecurityImage(securityImage, fingerprint);
        if (imageFileName) {
        } else {
          imageFileName = await generateTestSecurityImage(fingerprint);
        }
      } else {
        imageFileName = await generateTestSecurityImage(fingerprint);
        if (imageFileName) {
        }
      }
    }
    const logEntry = {
      id: randomUUID(),
      timestamp: event.timestamp || (/* @__PURE__ */ new Date()).toISOString(),
      ip: event.ipAddress,
      country: geo.country,
      city: geo.city,
      fingerprint: event.fingerprint || "unknown",
      userAgent: event.userAgent,
      platform: "Web",
      language: event.location?.language || "ar",
      screen: event.location?.screen || "unknown",
      timezone: event.location?.timezone || "unknown",
      username: event.username,
      attempts,
      reportType: event.type === "FAILED_LOGIN" ? "failed_login" : "suspicious_activity",
      imageFileName: imageFileName || void 0,
      blocked: event.fingerprint ? blockedFingerprints.has(event.fingerprint) : false
    };
    await writeSecurityLog(logEntry);
  } catch (error) {
    console.error("Failed to log security event:", error);
  }
}
async function saveSecurityImage(imageData, fingerprint) {
  try {
    const base64Data = imageData.replace(/^data:image\/[a-z]+;base64,/, "");
    const buffer = Buffer.from(base64Data, "base64");
    const timestamp2 = (/* @__PURE__ */ new Date()).toISOString().replace(/[:.]/g, "-");
    const filename = `security_${fingerprint.substring(0, 8)}_${timestamp2}.jpg`;
    const filepath = path.join(process.cwd(), "reports", filename);
    await sharp(buffer).jpeg({ quality: 80 }).resize(640, 480, { fit: "cover" }).toFile(filepath);
    return filename;
  } catch (error) {
    console.error("Failed to save security image:", error);
    return null;
  }
}
var SUPER_ADMIN_EMAIL = "ss73ss73ss73@gmail.com";
var SUPER_ADMIN_USER_ID = 4;
function isSuperAdmin(email, userId) {
  if (!email || !userId) return false;
  const emailMatch = email === SUPER_ADMIN_EMAIL;
  const idMatch = userId === SUPER_ADMIN_USER_ID;
  return emailMatch && idMatch;
}
function isSuperAdminEmail(email) {
  return email === SUPER_ADMIN_EMAIL;
}
function isSuperAdminByUser(user) {
  return isSuperAdmin(user.email, user.id);
}
function isAuthorized(email, userId) {
  if (userId) {
    return isSuperAdmin(email, userId);
  }
  return isSuperAdminEmail(email);
}
function isAuthorizedToDelete(email, userId) {
  if (userId) {
    return isSuperAdmin(email, userId);
  }
  return isSuperAdminEmail(email);
}
function canRestrictUser(targetUser, adminUser) {
  if (isSuperAdminByUser(targetUser)) {
    console.log(`\u{1F6A8} SUPER ADMIN PROTECTION: \u0645\u0646\u0639 \u062A\u0642\u064A\u064A\u062F \u0627\u0644\u0633\u0648\u0628\u0631 \u0623\u062F\u0645\u0646 ${targetUser.email} (ID: ${targetUser.id})`);
    return false;
  }
  if (isSuperAdminByUser(adminUser)) {
    return true;
  }
  return true;
}
function canDeleteUser(targetUser, adminUser) {
  if (isSuperAdminByUser(targetUser)) {
    console.log(`\u{1F6A8} SUPER ADMIN PROTECTION: \u0645\u0646\u0639 \u062D\u0630\u0641 \u0627\u0644\u0633\u0648\u0628\u0631 \u0623\u062F\u0645\u0646 ${targetUser.email} (ID: ${targetUser.id})`);
    return false;
  }
  if (isSuperAdminByUser(adminUser)) {
    return true;
  }
  return true;
}
function securityMiddleware(req, res, next) {
  const user = req.user;
  if (user && isSuperAdmin(user.email)) {
    console.log(`\u{1F6E1}\uFE0F Super Admin Access: ${user.email} - \u062A\u062C\u0627\u0648\u0632 \u062C\u0645\u064A\u0639 \u0642\u064A\u0648\u062F \u0627\u0644\u0623\u0645\u0627\u0646`);
    return next();
  }
  if (!user || !isAuthorized(user.email)) {
    return res.status(403).json({
      message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0631\u062F",
      error: "UNAUTHORIZED_ACCESS"
    });
  }
  next();
}
function securityImageMiddleware(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647" });
  }
  const token = authHeader.split(" ")[1];
  try {
    const JWT_SECRET_FROM_ENV = process.env.JWT_SECRET;
    if (!JWT_SECRET_FROM_ENV) {
      console.error("\u{1F6A8} CRITICAL SECURITY ERROR: JWT_SECRET environment variable is required!");
      return res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0623\u0645\u0627\u0646" });
    }
    const decoded = jwt.verify(token, JWT_SECRET_FROM_ENV);
    if (!isSuperAdmin(decoded.email)) {
      return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0635\u0648\u0631 \u0627\u0644\u0623\u0645\u0646\u064A\u0629" });
    }
    req.user = {
      id: decoded.userId,
      email: decoded.email,
      type: decoded.type
    };
    next();
  } catch (error) {
    return res.status(401).json({ message: "\u062A\u0648\u0643\u0646 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D \u0623\u0648 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629" });
  }
}
async function checkBlockedFingerprint(req, res) {
  try {
    const { fingerprint } = req.body;
    if (!fingerprint) {
      return res.status(400).json({ message: "\u0628\u0635\u0645\u0629 \u0627\u0644\u062C\u0647\u0627\u0632 \u0645\u0637\u0644\u0648\u0628\u0629" });
    }
    const blocked = blockedFingerprints.has(fingerprint);
    res.json({ blocked, fingerprint });
  } catch (error) {
    console.error("Error checking blocked fingerprint:", error);
    res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645" });
  }
}
async function generateTestSecurityImage(fingerprint) {
  try {
    const timestamp2 = (/* @__PURE__ */ new Date()).toLocaleString("ar-EG");
    const filename = `security_${fingerprint.substring(0, 8)}_${(/* @__PURE__ */ new Date()).toISOString().replace(/[:.]/g, "-")}.svg`;
    const filepath = path.join(process.cwd(), "reports", filename);
    const svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="640" height="480" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="640" height="480" fill="#1a1a2e"/>
  
  <!-- Border -->
  <rect x="20" y="20" width="600" height="440" fill="none" stroke="#ff4444" stroke-width="4"/>
  
  <!-- Header -->
  <text x="320" y="80" text-anchor="middle" fill="#ffffff" font-family="Arial, sans-serif" font-size="28" font-weight="bold">SECURITY ALERT</text>
  <text x="320" y="110" text-anchor="middle" fill="#ff4444" font-family="Arial, sans-serif" font-size="20" font-weight="bold">\u062A\u0646\u0628\u064A\u0647 \u0623\u0645\u0646\u064A</text>
  
  <!-- Warning Icon -->
  <polygon points="320,130 300,170 340,170" fill="#ff4444"/>
  <text x="320" y="157" text-anchor="middle" fill="#ffffff" font-family="Arial, sans-serif" font-size="20" font-weight="bold">!</text>
  
  <!-- Main Content -->
  <text x="320" y="200" text-anchor="middle" fill="#ffffff" font-family="Arial, sans-serif" font-size="18">Suspicious Login Attempt Detected</text>
  <text x="320" y="225" text-anchor="middle" fill="#ffffff" font-family="Arial, sans-serif" font-size="16">\u062A\u0645 \u0627\u0643\u062A\u0634\u0627\u0641 \u0645\u062D\u0627\u0648\u0644\u0629 \u062F\u062E\u0648\u0644 \u0645\u0634\u0628\u0648\u0647\u0629</text>
  
  <!-- Details -->
  <text x="320" y="270" text-anchor="middle" fill="#cccccc" font-family="Arial, sans-serif" font-size="14">Timestamp: ${timestamp2}</text>
  <text x="320" y="295" text-anchor="middle" fill="#cccccc" font-family="Arial, sans-serif" font-size="14">Device Fingerprint: ${fingerprint.substring(0, 24)}...</text>
  <text x="320" y="320" text-anchor="middle" fill="#cccccc" font-family="Arial, sans-serif" font-size="14">Status: UNAUTHORIZED ACCESS</text>
  
  <!-- Footer Warning -->
  <rect x="50" y="360" width="540" height="60" fill="#ff4444" fill-opacity="0.2" stroke="#ff4444" stroke-width="2"/>
  <text x="320" y="385" text-anchor="middle" fill="#ff4444" font-family="Arial, sans-serif" font-size="16" font-weight="bold">\u26A0\uFE0F SECURITY VIOLATION \u26A0\uFE0F</text>
  <text x="320" y="405" text-anchor="middle" fill="#ffffff" font-family="Arial, sans-serif" font-size="12">This incident has been logged and reported to system administrators</text>
</svg>`;
    await fs.writeFile(filepath, svgContent, "utf-8");
    console.log(`\u{1F3A8} Security alert image generated: ${filename}`);
    return filename;
  } catch (error) {
    console.error("Failed to generate security alert image:", error);
    return null;
  }
}
async function reportSuspiciousActivity(req, res) {
  try {
    const ipResult = getClientPublicIP(req);
    const geo = await getGeoLocation(ipResult.ip);
    console.log(`\u{1F4CD} IP \u0627\u0644\u0645\u064F\u0633\u062A\u062E\u0631\u062C: ${ipResult.ip} \u0645\u0646 ${ipResult.source} (\u0639\u0627\u0645: ${ipResult.isPublic}, \u0645\u0648\u062B\u0648\u0642: ${ipResult.trusted})`);
    if (ipResult.serverDetectedIp !== ipResult.ip) {
      console.log(`\u{1F5A5}\uFE0F Server IP: ${ipResult.serverDetectedIp}, \u{1F4F1} Client IP: ${ipResult.clientReportedIp}`);
    }
    if (ipResult.fallbackReason) {
      console.log(`\u26A0\uFE0F Fallback reason: ${ipResult.fallbackReason}`);
    }
    const {
      fingerprint,
      userAgent,
      platform,
      language,
      screen,
      timezone,
      username,
      attempts,
      securityImage
    } = req.body;
    let currentAttempts = attemptCounters.get(fingerprint) || 0;
    if (!blockedFingerprints.has(fingerprint)) {
      currentAttempts = currentAttempts + 1;
      attemptCounters.set(fingerprint, currentAttempts);
      if (currentAttempts >= 3) {
        blockedFingerprints.add(fingerprint);
        await saveBlockedFingerprints();
        console.log(`\u{1F6AB} Blocked fingerprint due to suspicious activity: ${fingerprint}`);
      }
    } else {
      console.log(`\u{1F6AB} Attempt from already blocked fingerprint: ${fingerprint}`);
    }
    let imageFileName = null;
    if (securityImage) {
      console.log("\u{1F4F7} \u0645\u0639\u0627\u0644\u062C\u0629 \u0635\u0648\u0631\u0629 \u062D\u0642\u064A\u0642\u064A\u0629 \u0645\u0646 \u0627\u0644\u0643\u0627\u0645\u064A\u0631\u0627...");
      imageFileName = await saveSecurityImage(securityImage, fingerprint);
      if (imageFileName) {
        console.log(`\u2705 \u062A\u0645 \u062D\u0641\u0638 \u0627\u0644\u0635\u0648\u0631\u0629 \u0627\u0644\u062D\u0642\u064A\u0642\u064A\u0629: ${imageFileName}`);
      } else {
        console.log("\u274C \u0641\u0634\u0644 \u062D\u0641\u0638 \u0627\u0644\u0635\u0648\u0631\u0629 \u0627\u0644\u062D\u0642\u064A\u0642\u064A\u0629 - \u0625\u0646\u0634\u0627\u0621 \u0635\u0648\u0631\u0629 \u0628\u062F\u064A\u0644\u0629...");
        imageFileName = await generateTestSecurityImage(fingerprint);
      }
    } else {
      console.log("\u{1F3A8} \u0625\u0646\u0634\u0627\u0621 \u0635\u0648\u0631\u0629 \u0623\u0645\u0646\u064A\u0629 \u0628\u062F\u064A\u0644\u0629...");
      imageFileName = await generateTestSecurityImage(fingerprint);
    }
    const logEntry = {
      id: randomUUID(),
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      ip: ipResult.ip,
      country: geo.country,
      city: geo.city,
      fingerprint,
      userAgent: userAgent || "Unknown",
      platform: platform || "Unknown",
      language: language || "Unknown",
      screen: screen || "Unknown",
      timezone: timezone || "Unknown",
      username,
      attempts: currentAttempts,
      reportType: "suspicious_activity",
      imageFileName: imageFileName || void 0,
      blocked: blockedFingerprints.has(fingerprint)
    };
    await writeSecurityLog(logEntry);
    console.log(`\u{1F6A8} Security report logged: ${fingerprint} (${currentAttempts} attempts)`);
    res.json({
      success: true,
      message: "\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0646\u0634\u0627\u0637 \u0627\u0644\u0645\u0634\u0628\u0648\u0647",
      blocked: blockedFingerprints.has(fingerprint)
    });
  } catch (error) {
    console.error("Error reporting suspicious activity:", error);
    res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0646\u0634\u0627\u0637 \u0627\u0644\u0645\u0634\u0628\u0648\u0647" });
  }
}
async function getSecurityLogs(req, res) {
  try {
    console.log("\u{1F50D} \u062C\u0644\u0628 \u0627\u0644\u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0623\u0645\u0646\u064A\u0629 \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A...");
    const databaseLogs = await storage.getSecurityLogs({ limit: 1e3, offset: 0 });
    const logs = databaseLogs.map((log2) => ({
      id: log2.id,
      username: log2.email || log2.username,
      email: log2.email,
      fingerprint: log2.fingerprint,
      ip: log2.ipAddress,
      userAgent: log2.userAgent,
      country: log2.country,
      city: log2.city,
      platform: log2.platform,
      language: log2.language,
      screen: log2.screen,
      timezone: log2.timezone,
      attempts: log2.attempts,
      imageFileName: log2.imageFilename,
      blocked: log2.blocked || blockedFingerprints.has(log2.fingerprint),
      reportType: log2.reportType,
      timestamp: log2.createdAt,
      eventType: log2.eventType,
      metadata: log2.metadata || {}
    }));
    console.log(`\u{1F4CA} \u062A\u0645 \u062C\u0644\u0628 ${logs.length} \u0633\u062C\u0644 \u0623\u0645\u0646\u064A \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A`);
    const sortedLogs = logs.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
    res.json({ logs: sortedLogs, total: sortedLogs.length });
  } catch (error) {
    console.error("Error getting security logs:", error);
    res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0627\u0644\u0633\u062C\u0644\u0627\u062A" });
  }
}
async function blockFingerprint(req, res) {
  try {
    const { fingerprint, reason } = req.body;
    if (!fingerprint) {
      return res.status(400).json({ message: "\u0628\u0635\u0645\u0629 \u0627\u0644\u062C\u0647\u0627\u0632 \u0645\u0637\u0644\u0648\u0628\u0629" });
    }
    blockedFingerprints.add(fingerprint);
    await saveBlockedFingerprints();
    const logEntry = {
      id: randomUUID(),
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      ip: getClientPublicIP(req).ip || "admin",
      country: "Admin Action",
      city: "Manual Block",
      fingerprint,
      userAgent: req.get("User-Agent") || "Admin",
      platform: "Admin Panel",
      language: "ar",
      screen: "N/A",
      timezone: "N/A",
      attempts: 0,
      reportType: "manual_report",
      blocked: true
    };
    await writeSecurityLog(logEntry);
    console.log(`\u{1F528} Manually blocked fingerprint: ${fingerprint} - Reason: ${reason || "Manual block"}`);
    res.json({
      success: true,
      message: "\u062A\u0645 \u062D\u0638\u0631 \u0628\u0635\u0645\u0629 \u0627\u0644\u062C\u0647\u0627\u0632 \u0628\u0646\u062C\u0627\u062D",
      fingerprint
    });
  } catch (error) {
    console.error("Error blocking fingerprint:", error);
    res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u062D\u0638\u0631 \u0628\u0635\u0645\u0629 \u0627\u0644\u062C\u0647\u0627\u0632" });
  }
}
async function unblockFingerprint(req, res) {
  try {
    const { fingerprint } = req.body;
    if (!fingerprint) {
      return res.status(400).json({ message: "\u0628\u0635\u0645\u0629 \u0627\u0644\u062C\u0647\u0627\u0632 \u0645\u0637\u0644\u0648\u0628\u0629" });
    }
    blockedFingerprints.delete(fingerprint);
    attemptCounters.delete(fingerprint);
    await saveBlockedFingerprints();
    const logEntry = {
      id: randomUUID(),
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      ip: getClientPublicIP(req).ip || "admin",
      country: "Admin Action",
      city: "Manual Unblock",
      fingerprint,
      userAgent: req.get("User-Agent") || "Admin",
      platform: "Admin Panel",
      language: "ar",
      screen: "N/A",
      timezone: "N/A",
      attempts: 0,
      reportType: "manual_report",
      blocked: false
    };
    await writeSecurityLog(logEntry);
    console.log(`\u2705 Unblocked fingerprint: ${fingerprint}`);
    res.json({
      success: true,
      message: "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u062D\u0638\u0631 \u0628\u0635\u0645\u0629 \u0627\u0644\u062C\u0647\u0627\u0632 \u0628\u0646\u062C\u0627\u062D",
      fingerprint
    });
  } catch (error) {
    console.error("Error unblocking fingerprint:", error);
    res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u062D\u0638\u0631 \u0628\u0635\u0645\u0629 \u0627\u0644\u062C\u0647\u0627\u0632" });
  }
}
async function deleteSecurityLog(req, res) {
  try {
    const user = req.user;
    if (!user || !isAuthorizedToDelete(user.email)) {
      return res.status(403).json({
        message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0630\u0641 \u0627\u0644\u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0623\u0645\u0646\u064A\u0629 - \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629 \u0645\u062D\u0635\u0648\u0631\u0629 \u0644\u0644\u0645\u062F\u064A\u0631 \u0627\u0644\u0623\u0639\u0644\u0649 \u0641\u0642\u0637",
        error: "UNAUTHORIZED_DELETE_ACCESS"
      });
    }
    const { logId } = req.params;
    if (!logId || typeof logId !== "string" || logId.trim() === "") {
      return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0633\u062C\u0644 \u0645\u0637\u0644\u0648\u0628 \u0648\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0646\u0635\u064B\u0627 \u0635\u062D\u064A\u062D\u064B\u0627" });
    }
    console.log(`\u{1F5D1}\uFE0F \u0645\u062D\u0627\u0648\u0644\u0629 \u062D\u0630\u0641 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0623\u0645\u0646\u064A ID: ${logId}...`);
    const deleted = await storage.deleteSecurityLog(logId);
    if (!deleted) {
      console.log(`\u274C \u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0623\u0645\u0646\u064A ID: ${logId}`);
      return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0645\u062D\u062F\u062F" });
    }
    try {
      const deletionLogEntry = {
        id: randomUUID(),
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        action: "DELETE_SECURITY_LOG",
        deletedLogId: logId,
        performedBy: user.email,
        ip: getClientPublicIP(req).ip,
        userAgent: req.get("User-Agent") || "Admin"
      };
      const auditLogFile = path.join(process.cwd(), "logs", "audit_log.json");
      let auditLogs2 = [];
      try {
        const auditData = await fs.readFile(auditLogFile, "utf-8");
        auditLogs2 = JSON.parse(auditData);
      } catch (error) {
        auditLogs2 = [];
      }
      auditLogs2.push(deletionLogEntry);
      await fs.writeFile(auditLogFile, JSON.stringify(auditLogs2, null, 2));
    } catch (auditError) {
      console.error("Failed to write audit log (non-blocking):", auditError);
    }
    console.log(`\u2705 \u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0623\u0645\u0646\u064A ID: ${logId} \u0628\u0648\u0627\u0633\u0637\u0629 ${user.email}`);
    res.json({
      success: true,
      message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0623\u0645\u0646\u064A \u0628\u0646\u062C\u0627\u062D",
      id: logId
    });
  } catch (error) {
    console.error("Error deleting security log:", error);
    res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0623\u0645\u0646\u064A" });
  }
}
async function clearAllSecurityLogs(req, res) {
  try {
    const user = req.user;
    if (!user || !isAuthorizedToDelete(user.email)) {
      return res.status(403).json({
        message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0645\u0633\u062D \u062C\u0645\u064A\u0639 \u0627\u0644\u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0623\u0645\u0646\u064A\u0629 - \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629 \u0645\u062D\u0635\u0648\u0631\u0629 \u0644\u0644\u0645\u062F\u064A\u0631 \u0627\u0644\u0623\u0639\u0644\u0649 \u0641\u0642\u0637",
        error: "UNAUTHORIZED_DELETE_ACCESS"
      });
    }
    const logsFilePath = path.join(process.cwd(), "logs", "security_logs.json");
    const textLogFile = path.join(process.cwd(), "logs", "login_logs.txt");
    let currentLogs = [];
    let textLogCount = 0;
    try {
      const data = await fs.readFile(logsFilePath, "utf-8");
      currentLogs = JSON.parse(data);
    } catch (error) {
      currentLogs = [];
    }
    try {
      const textData = await fs.readFile(textLogFile, "utf-8");
      textLogCount = textData.trim().split("\n").filter((line) => line.length > 0).length;
    } catch (error) {
      textLogCount = 0;
    }
    const deletedCount = Math.max(currentLogs.length, textLogCount);
    const completeWipe = req.query.complete === "true";
    if (completeWipe) {
      await fs.writeFile(logsFilePath, JSON.stringify([], null, 2));
      await fs.writeFile(textLogFile, "");
      console.log(`\u{1F9F9} COMPLETE WIPE: All security logs cleared by ${user.email}: ${deletedCount} logs deleted`);
      res.json({
        success: true,
        message: `\u062A\u0645 \u0645\u0633\u062D \u062C\u0645\u064A\u0639 \u0627\u0644\u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0623\u0645\u0646\u064A\u0629 \u0628\u0627\u0644\u0643\u0627\u0645\u0644 (${deletedCount} \u0633\u062C\u0644)`,
        deletedCount,
        type: "complete_wipe"
      });
    } else {
      await fs.writeFile(logsFilePath, JSON.stringify([], null, 2));
      await fs.writeFile(textLogFile, "");
      const clearAuditEntry = {
        id: randomUUID(),
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        action: "CLEAR_ALL_SECURITY_LOGS",
        deletedCount,
        performedBy: user.email,
        ip: getClientPublicIP(req).ip || "admin",
        userAgent: req.get("User-Agent") || "Admin"
      };
      const auditLogFile = path.join(process.cwd(), "logs", "audit_log.json");
      let auditLogs2 = [];
      try {
        const auditData = await fs.readFile(auditLogFile, "utf-8");
        auditLogs2 = JSON.parse(auditData);
      } catch (error) {
        auditLogs2 = [];
      }
      auditLogs2.push(clearAuditEntry);
      await fs.writeFile(auditLogFile, JSON.stringify(auditLogs2, null, 2));
      console.log(`\u{1F9F9} All security logs cleared by ${user.email}: ${deletedCount} logs deleted`);
      res.json({
        success: true,
        message: `\u062A\u0645 \u0645\u0633\u062D \u062C\u0645\u064A\u0639 \u0627\u0644\u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0623\u0645\u0646\u064A\u0629 \u0628\u0646\u062C\u0627\u062D (${deletedCount} \u0633\u062C\u0644)`,
        deletedCount
      });
    }
  } catch (error) {
    console.error("Error clearing all security logs:", error);
    res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0645\u0633\u062D \u0627\u0644\u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0623\u0645\u0646\u064A\u0629" });
  }
}
async function getSecurityImage(req, res) {
  try {
    const { filename } = req.params;
    if (!filename || !filename.match(/^security_[a-zA-Z0-9_-]+\.(jpg|svg)$/)) {
      return res.status(400).json({ message: "\u0627\u0633\u0645 \u0645\u0644\u0641 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
    }
    const imagePath = path.join(process.cwd(), "reports", filename);
    try {
      await fs.access(imagePath);
      const ext = path.extname(filename).toLowerCase();
      if (ext === ".svg") {
        res.setHeader("Content-Type", "image/svg+xml");
      } else {
        res.setHeader("Content-Type", "image/jpeg");
      }
      res.setHeader("Cache-Control", "private, no-cache, no-store");
      res.sendFile(path.resolve(imagePath));
      console.log(`\u{1F4F8} Served security image: ${filename}`);
    } catch (fileError) {
      console.log(`\u274C Security image not found: ${filename}`);
      res.status(404).json({ message: "\u0627\u0644\u0635\u0648\u0631\u0629 \u0627\u0644\u0623\u0645\u0646\u064A\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
    }
  } catch (error) {
    console.error("Error getting security image:", error);
    res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0627\u0644\u0635\u0648\u0631\u0629 \u0627\u0644\u0623\u0645\u0646\u064A\u0629" });
  }
}
async function initSecurity() {
  await initSecurityDirectories();
  await loadBlockedFingerprints();
  console.log("\u{1F6E1}\uFE0F Security system initialized");
}
function checkIfBlocked(fingerprint) {
  return blockedFingerprints.has(fingerprint);
}
async function handleSilentCapture(data) {
  try {
    console.log("\u{1F4F8} \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u062A\u0635\u0648\u064A\u0631 \u0627\u0644\u0635\u0627\u0645\u062A - \u0627\u0644\u0628\u062F\u0621");
    console.log(`\u{1F50D} \u0627\u0644\u0628\u0635\u0645\u0629: ${data.fingerprint.substring(0, 10)}...`);
    console.log(`\u{1F4CA} \u0639\u062F\u062F \u0627\u0644\u0645\u062D\u0627\u0648\u0644\u0627\u062A \u0627\u0644\u0641\u0627\u0634\u0644\u0629: ${data.failedAttempts}`);
    let imageFilename = null;
    if (data.imageData) {
      try {
        const base64Data = data.imageData.replace(/^data:image\/[a-z]+;base64,/, "");
        const buffer = Buffer.from(base64Data, "base64");
        const filepath = path.join(process.cwd(), "reports", data.filename);
        await sharp(buffer).jpeg({ quality: 85 }).resize(800, 600, { fit: "cover" }).toFile(filepath);
        imageFilename = data.filename;
        console.log(`\u{1F4BE} \u062A\u0645 \u062D\u0641\u0638 \u0627\u0644\u0635\u0648\u0631\u0629: ${imageFilename}`);
      } catch (imageError) {
        console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062D\u0641\u0638 \u0627\u0644\u0635\u0648\u0631\u0629:", imageError);
      }
    }
    const geo = await getGeoLocation(data.ipAddress || "127.0.0.1");
    const logId = randomUUID();
    const securityLogEntry = {
      id: logId,
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      ip: data.ipAddress || "unknown",
      country: geo.country,
      city: geo.city,
      fingerprint: data.fingerprint,
      userAgent: data.userAgent || "unknown",
      platform: data.location?.platform || "unknown",
      language: data.location?.language || "unknown",
      screen: data.location?.screen || "unknown",
      timezone: data.location?.timezone || "unknown",
      username: "\u0645\u062D\u0627\u0648\u0644\u0629 \u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647\u0627",
      attempts: data.failedAttempts,
      reportType: "failed_login",
      // تصنيف كمحاولة تسجيل دخول فاشلة
      imageFileName: imageFilename || void 0,
      blocked: false
      // لم يتم الحظر بعد، فقط التصوير
    };
    await writeSecurityLog(securityLogEntry);
    console.log("\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0633\u062C\u0644 \u0623\u0645\u0646\u064A \u0644\u0644\u062A\u0635\u0648\u064A\u0631 \u0627\u0644\u0635\u0627\u0645\u062A:");
    console.log(`   \u{1F4CB} \u0645\u0639\u0631\u0641 \u0627\u0644\u0633\u062C\u0644: ${logId}`);
    console.log(`   \u{1F30D} \u0627\u0644\u0645\u0648\u0642\u0639: ${geo.city}, ${geo.country}`);
    console.log(`   \u{1F4F8} \u0627\u0633\u0645 \u0627\u0644\u0635\u0648\u0631\u0629: ${imageFilename || "\u0644\u0627 \u062A\u0648\u062C\u062F"}`);
    console.log(`   \u{1F550} \u0627\u0644\u0648\u0642\u062A: ${(/* @__PURE__ */ new Date()).toLocaleString("ar-EG")}`);
    return {
      success: true,
      logId
    };
  } catch (error) {
    console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u062A\u0635\u0648\u064A\u0631 \u0627\u0644\u0635\u0627\u0645\u062A:", error);
    return {
      success: false,
      error: error.message || "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
    };
  }
}

// server/auth.ts
import bcrypt from "bcrypt";

// server/temp-auth.ts
import jwt2 from "jsonwebtoken";

// server/utils/jwt.ts
import { randomBytes } from "crypto";
var jwtSecret = null;
function getJwtSecret() {
  if (jwtSecret !== null) {
    return jwtSecret;
  }
  if (process.env.JWT_SECRET) {
    jwtSecret = process.env.JWT_SECRET;
    console.log("\u{1F510} JWT_SECRET configured securely from environment variable");
    return jwtSecret;
  }
  if (process.env.NODE_ENV === "production") {
    console.error("\u{1F6A8} PRODUCTION WARNING: JWT_SECRET environment variable is missing!");
    console.error("\u{1F6A8} SECURITY NOTICE: Using auto-generated secret. For better security, please set JWT_SECRET in your deployment environment variables.");
    console.error("\u{1F6A8} This fallback ensures your application starts, but you should add JWT_SECRET to your deployment secrets.");
  } else {
    console.warn("\u26A0\uFE0F DEMO MODE: Generating secure JWT_SECRET automatically for demo purposes");
    console.warn("\u26A0\uFE0F In production, always set JWT_SECRET as an environment variable!");
  }
  const cryptoRandom = randomBytes(64).toString("hex");
  const timestamp2 = Date.now().toString(36);
  const processInfo = process.pid?.toString(36) || "unknownpid";
  const baseSecret = process.env.NODE_ENV === "production" ? `prod_secure_jwt_${cryptoRandom}_${timestamp2}_${processInfo}_replit_exchange_platform_2025` : `demo_secure_jwt_${cryptoRandom}_${timestamp2}_replit_exchange_platform_2025`;
  jwtSecret = baseSecret;
  const mode = process.env.NODE_ENV === "production" ? "production fallback" : "demo";
  console.log(`\u{1F510} JWT_SECRET configured securely (auto-generated for ${mode})`);
  return jwtSecret;
}
function getEnvironmentStatus() {
  return {
    nodeEnv: process.env.NODE_ENV || "undefined",
    jwtSecretConfigured: !!process.env.JWT_SECRET,
    isProduction: process.env.NODE_ENV === "production",
    usingFallback: !process.env.JWT_SECRET
  };
}

// server/temp-auth.ts
var tempUsers = [
  {
    id: 1,
    email: "ss73ss73ss73@gmail.com",
    password: "123456",
    // سيتم تشفيرها
    role: "admin",
    account_number: "ACC001",
    name: "\u0627\u0644\u0645\u0637\u0648\u0631 \u0627\u0644\u0631\u0626\u064A\u0633\u064A",
    status: "active",
    verification_status: "verified"
  },
  {
    id: 2,
    email: "s1@s1.com",
    password: "12345678",
    role: "user",
    account_number: "ACC002",
    name: "\u0645\u0633\u062A\u062E\u062F\u0645 \u062A\u062C\u0631\u064A\u0628\u064A",
    status: "active",
    verification_status: "verified"
  },
  {
    id: 3,
    email: "s2@s2.com",
    password: "123456789",
    role: "user",
    account_number: "ACC003",
    name: "\u0645\u0633\u062A\u062E\u062F\u0645 \u062A\u062C\u0631\u064A\u0628\u064A 2",
    status: "active",
    verification_status: "verified"
  },
  {
    id: 4,
    email: "s3@s3.com",
    password: "12345678",
    role: "user",
    account_number: "ACC004",
    name: "\u0645\u0633\u062A\u062E\u062F\u0645 \u062A\u062C\u0631\u064A\u0628\u064A 3",
    status: "active",
    verification_status: "verified"
  }
];
async function tempLogin(email, password) {
  console.log("\u{1F50D} \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0645\u0624\u0642\u062A:", email);
  const user = tempUsers.find((u) => u.email === email);
  if (!user) {
    console.log("\u274C \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0624\u0642\u062A");
    return null;
  }
  if (password !== user.password) {
    console.log("\u274C \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629");
    return null;
  }
  console.log("\u2705 \u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0648\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0635\u062D\u064A\u062D\u0629");
  const JWT_SECRET3 = getJwtSecret();
  const token = jwt2.sign(
    {
      userId: user.id,
      email: user.email,
      role: user.role
    },
    JWT_SECRET3,
    { expiresIn: "24h" }
  );
  return {
    user: {
      id: user.id,
      email: user.email,
      role: user.role,
      account_number: user.account_number,
      name: user.name,
      status: user.status,
      verification_status: user.verification_status
    },
    token
  };
}
function tempGetUserById(id) {
  return tempUsers.find((u) => u.id === id) || null;
}

// server/auth.ts
import { eq as eq3 } from "drizzle-orm";
var JWT_SECRET = getJwtSecret();
var JWT_EXPIRY = "7d";
async function authMiddleware(req, res, next) {
  const authHeader = req.headers.authorization;
  console.log(`\u{1F510} \u0637\u0644\u0628 \u0645\u0635\u0627\u062F\u0642\u0629: ${req.method} ${req.path}`);
  console.log(`\u{1F4CB} Authorization Header: ${authHeader ? "\u0645\u0648\u062C\u0648\u062F" : "\u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F"}`);
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    console.log(`\u274C \u0641\u0634\u0644 \u0641\u064A \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629: ${!authHeader ? "\u0644\u0627 \u064A\u0648\u062C\u062F authorization header" : "\u0644\u0627 \u064A\u0628\u062F\u0623 \u0628\u0640 Bearer"}`);
    return res.status(401).json({ message: "\u062A\u0648\u0643\u0646 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D \u0623\u0648 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629" });
  }
  const token = authHeader.split(" ")[1];
  console.log(`\u{1F511} \u0627\u0633\u062A\u062E\u0631\u0627\u062C \u0627\u0644\u062A\u0648\u0643\u0646: ${token ? "\u0646\u062C\u062D" : "\u0641\u0634\u0644"} - \u0637\u0648\u0644 \u0627\u0644\u062A\u0648\u0643\u0646: ${token ? token.length : 0}`);
  try {
    const decoded = jwt3.verify(token, JWT_SECRET);
    req.user = {
      id: decoded.userId,
      email: decoded.email,
      type: decoded.type
    };
    try {
      let user;
      try {
        user = await storage.getUser(decoded.userId);
      } catch (dbError) {
        console.log("\u26A0\uFE0F \u0641\u0634\u0644 \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0628\u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0641\u064A middleware\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0624\u0642\u062A");
        user = tempGetUserById(decoded.userId);
        if (user) {
          req.user = {
            id: user.id,
            email: user.email,
            type: user.role,
            fullName: user.name,
            phone: null,
            active: true,
            adminLevel: user.role === "admin" ? 1 : 0,
            extTransferEnabled: true,
            extAllowedCountries: [],
            extAllowedCurrencies: [],
            canManageUsers: user.role === "admin",
            canManageMarket: user.role === "admin",
            canManageChat: user.role === "admin",
            canManageInternalTransfers: user.role === "admin",
            canManageExternalTransfers: user.role === "admin",
            canManageNewAccounts: user.role === "admin",
            canManageSecurity: user.role === "admin",
            canManageSupport: user.role === "admin",
            canManageReports: user.role === "admin",
            canManageSettings: user.role === "admin"
          };
          return next();
        }
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (isSuperAdmin(user.email, user.id)) {
        console.log(`\u{1F6E1}\uFE0F Super Admin Access: ${user.email} (ID: ${user.id}) - \u062A\u062C\u0627\u0648\u0632 \u062C\u0645\u064A\u0639 \u0642\u064A\u0648\u062F \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0628\u0645\u0627 \u0641\u064A \u0630\u0644\u0643 \u062D\u0627\u0644\u0629 \u0627\u0644\u0646\u0634\u0627\u0637`);
        req.user = {
          id: user.id,
          email: user.email,
          type: user.type || "admin",
          fullName: user.fullName,
          phone: user.phone,
          active: true,
          // السوبر أدمن يعتبر نشطاً دائماً
          adminLevel: 999,
          // مستوى إداري أقصى
          extTransferEnabled: true,
          extAllowedCountries: ["all"],
          // جميع الدول
          extAllowedCurrencies: ["all"],
          // جميع العملات
          canManageUsers: true,
          canManageMarket: true,
          canManageChat: true,
          canManageInternalTransfers: true,
          canManageExternalTransfers: true,
          canManageNewAccounts: true,
          canManageSecurity: true,
          canManageSupport: true,
          canManageReports: true,
          canManageSettings: true
        };
        return next();
      }
      const isActiveUser = typeof user.active === "boolean" ? user.active === true : String(user.active) === "t" || String(user.active) === "true";
      if (!isActiveUser) {
        console.log(`\u0645\u0646\u0639 \u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0639\u0637\u0644 \u0645\u0646 \u0627\u0644\u0648\u0635\u0648\u0644: ${decoded.userId}, ${user.fullName}, \u062D\u0627\u0644\u0629 \u0627\u0644\u0646\u0634\u0627\u0637: ${user.active}`);
        return res.status(403).json({
          message: "\u0647\u0630\u0627 \u0627\u0644\u062D\u0633\u0627\u0628 \u0645\u0639\u0637\u0644. \u064A\u0631\u062C\u0649 \u0627\u0644\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u0625\u062F\u0627\u0631\u0629 \u0644\u0625\u0639\u0627\u062F\u0629 \u062A\u0641\u0639\u064A\u0644\u0647."
        });
      }
      req.user = {
        id: decoded.userId,
        email: decoded.email,
        type: user.type,
        // استخدام type من قاعدة البيانات وليس من التوكن
        fullName: user.fullName,
        phone: user.phone,
        active: true,
        adminLevel: user.adminLevel,
        extTransferEnabled: user.extTransferEnabled,
        extAllowedCountries: user.extAllowedCountries,
        extAllowedCurrencies: user.extAllowedCurrencies,
        // الصلاحيات التفصيلية
        canManageUsers: user.canManageUsers,
        canManageMarket: user.canManageMarket,
        canManageChat: user.canManageChat,
        canManageInternalTransfers: user.canManageInternalTransfers,
        canManageExternalTransfers: user.canManageExternalTransfers,
        canManageNewAccounts: user.canManageNewAccounts,
        canManageSecurity: user.canManageSecurity,
        canManageSupport: user.canManageSupport,
        canManageReports: user.canManageReports,
        canManageSettings: user.canManageSettings
      };
      next();
    } catch (userError) {
      console.error("\u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u062D\u0627\u0644\u0629 \u0646\u0634\u0627\u0637 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", userError);
      return res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u062D\u0627\u0644\u0629 \u0627\u0644\u062D\u0633\u0627\u0628" });
    }
  } catch (error) {
    return res.status(401).json({ message: "\u062A\u0648\u0643\u0646 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D \u0623\u0648 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629" });
  }
}
var scryptAsync = promisify(scrypt);
async function generateAccountNumber(countryId) {
  const { storage: storage4 } = await Promise.resolve().then(() => (init_storage(), storage_exports));
  const prefix = countryId === 1 ? "33003" : "44003";
  const lastAccountNumber = await storage4.getLastAccountNumber(prefix);
  if (!lastAccountNumber) {
    return `${prefix}001`;
  }
  const lastNumber = parseInt(lastAccountNumber);
  const nextNumber = lastNumber + 1;
  return nextNumber.toString();
}
async function hashPassword(password) {
  const salt = randomBytes2(16).toString("hex");
  const buf = await scryptAsync(password, salt, 64);
  return `${buf.toString("hex")}.${salt}`;
}
async function comparePasswords(supplied, stored) {
  if (stored.startsWith("$2b$") || stored.startsWith("$2a$")) {
    return await bcrypt.compare(supplied, stored);
  }
  const [hashed, salt] = stored.split(".");
  if (!salt || !hashed) {
    return false;
  }
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = await scryptAsync(supplied, salt, 64);
  return timingSafeEqual(hashedBuf, suppliedBuf);
}
function generateToken(user) {
  const payload = {
    userId: user.id,
    email: user.email,
    type: user.type
  };
  return jwt3.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRY });
}
function hasPermission(user, permission) {
  if (user.email && user.id && isSuperAdmin(user.email, user.id)) {
    console.log(`\u{1F6E1}\uFE0F Super Admin Permission Granted: ${user.email} (ID: ${user.id}) for ${permission} - Dual Verification Passed`);
    return true;
  }
  if (user.adminLevel === 2) {
    return true;
  }
  if (user.type === "admin") {
    switch (permission) {
      case "users":
        return user.canManageUsers === true;
      case "market":
        return user.canManageMarket === true;
      case "chat":
        return user.canManageChat === true;
      case "internal_transfers":
        return user.canManageInternalTransfers === true;
      case "external_transfers":
        return user.canManageExternalTransfers === true;
      case "new_accounts":
        return user.canManageNewAccounts === true;
      case "security":
        return user.canManageSecurity === true;
      case "support":
        return user.canManageSupport === true;
      case "reports":
        return user.canManageReports === true;
      case "settings":
        return user.canManageSettings === true;
      default:
        return false;
    }
  }
  return false;
}
function requirePermission(permission) {
  return async (req, res, next) => {
    const user = req.user;
    if (!user) {
      return res.status(401).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647" });
    }
    if (isSuperAdmin(user.email, user.id)) {
      console.log(`\u{1F6E1}\uFE0F Super Admin Permission Override: ${user.email} bypasses ${permission} check`);
      return next();
    }
    if (!hasPermission(user, permission)) {
      return res.status(403).json({
        message: "\u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0631\u062F",
        required_permission: permission
      });
    }
    next();
  };
}
function setupAuth(app2) {
  app2.post("/api/register", async (req, res, next) => {
    try {
      const { fullName, officeName, officeAddress, email, phone, password, countryId, cityId, countryName, cityName, referralCode } = req.body;
      if (!fullName || !officeName || !email || !password || !countryId || !cityId || !countryName || !cityName) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const existingUser = await storage.getUserByEmail(email);
      if (existingUser) {
        return res.status(400).json({ message: "\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0645\u0633\u062C\u0644 \u0628\u0627\u0644\u0641\u0639\u0644" });
      }
      const accountNumber = await generateAccountNumber(countryId);
      console.log(`\u062A\u0645 \u062A\u0648\u0644\u064A\u062F \u0631\u0642\u0645 \u062D\u0633\u0627\u0628 \u062C\u062F\u064A\u062F: ${accountNumber}`);
      let referrerId = null;
      if (referralCode && referralCode.trim()) {
        try {
          const referralSystem2 = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
          const validation = await referralSystem2.validateReferralCode(referralCode.trim());
          if (validation.valid && validation.referrerId) {
            referrerId = validation.referrerId;
            console.log(`\u2705 \u0631\u0645\u0632 \u0625\u062D\u0627\u0644\u0629 \u0635\u0627\u0644\u062D: ${referralCode.trim()} \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${referrerId}`);
          } else {
            console.log(`\u274C \u0631\u0645\u0632 \u0625\u062D\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D: ${referralCode.trim()}`);
          }
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
        }
      }
      const referralSystem = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
      let newUserReferralCode;
      let isUnique = false;
      let attempts = 0;
      while (!isUnique && attempts < 10) {
        newUserReferralCode = referralSystem.generateReferralCode();
        const validation = await referralSystem.validateReferralCode(newUserReferralCode);
        if (!validation.valid) {
          isUnique = true;
        }
        attempts++;
      }
      if (!isUnique) {
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u062A\u0648\u0644\u064A\u062F \u0631\u0645\u0632 \u0625\u062D\u0627\u0644\u0629 \u0641\u0631\u064A\u062F" });
      }
      const user = await storage.createUser({
        fullName,
        officeName,
        officeAddress,
        email,
        phone,
        accountNumber,
        // استخدام حقل رقم الحساب المخصص
        password: await hashPassword(password),
        countryId,
        cityId,
        countryName,
        cityName,
        referralCode: newUserReferralCode,
        // إضافة رمز الإحالة للمستخدم الجديد
        referredBy: referrerId
        // إضافة معرف المُحيل
      });
      if (referrerId) {
        try {
          const referralSystem2 = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
          await referralSystem2.processNewUserReferral(user.id, referrerId);
          console.log(`\u{1F381} \u062A\u0645 \u0645\u0646\u062D \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${referrerId} \u0639\u0646 \u0625\u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${user.id}`);
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
        }
      }
      const token = generateToken(user);
      const { password: _, ...userWithoutPassword } = user;
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0633\u0627\u0628 \u0628\u0646\u062C\u0627\u062D",
        token,
        user: userWithoutPassword
      });
    } catch (error) {
      if (error instanceof ZodError) {
        const validationError = fromZodError(error);
        return res.status(400).json({ message: validationError.message });
      }
      next(error);
    }
  });
  app2.post("/api/login", async (req, res, next) => {
    try {
      console.log("\u{1F4CA} \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0648\u0627\u0631\u062F\u0629 \u0645\u0646 \u0627\u0644\u0639\u0645\u064A\u0644:");
      console.log("\u{1F4E6} \u062C\u0645\u064A\u0639 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0637\u0644\u0628:", JSON.stringify(req.body, null, 2));
      const { email, password, fingerprint, location, ipAddress, userAgent, securityImage, ...deviceInfo } = req.body;
      console.log("\u{1F4E7} \u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A:", email);
      console.log("\u{1F511} \u0627\u0644\u0628\u0635\u0645\u0629:", fingerprint);
      console.log("\u{1F512} \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0645\u0648\u062C\u0648\u062F\u0629:", !!password);
      console.log("\u{1F4F7} \u0627\u0644\u0635\u0648\u0631\u0629 \u0627\u0644\u0623\u0645\u0646\u064A\u0629 \u0645\u0648\u062C\u0648\u062F\u0629:", !!securityImage);
      if (securityImage) {
        console.log("\u{1F4CF} \u062D\u062C\u0645 \u0627\u0644\u0635\u0648\u0631\u0629 \u0627\u0644\u062D\u0642\u064A\u0642\u064A\u0629:", Math.round(securityImage.length / 1024) + "KB");
        console.log("\u{1F3AF} \u0623\u0648\u0644 50 \u062D\u0631\u0641 \u0645\u0646 \u0627\u0644\u0635\u0648\u0631\u0629:", securityImage.substring(0, 50) + "...");
      } else {
        console.log("\u274C \u0627\u0644\u0635\u0648\u0631\u0629 \u0627\u0644\u0623\u0645\u0646\u064A\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0641\u064A \u0627\u0644\u0637\u0644\u0628 - \u0627\u0644\u0648\u0627\u062C\u0647\u0629 \u0627\u0644\u0623\u0645\u0627\u0645\u064A\u0629 \u0644\u0627 \u062A\u0631\u0633\u0644 \u0635\u0648\u0631\u0629");
      }
      console.log("\u{1F310} \u0639\u0646\u0648\u0627\u0646 IP:", ipAddress);
      console.log("\u{1F5A5}\uFE0F \u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062A\u0635\u0641\u062D:", userAgent);
      const result = loginSchema.safeParse({ email, password });
      if (!result.success) {
        const validationError = fromZodError(result.error);
        return res.status(400).json({ message: validationError.message });
      }
      if (fingerprint) {
        const blocked = checkIfBlocked(fingerprint);
        if (blocked) {
          console.warn(`\u{1F6A8} Blocked login attempt from fingerprint: ${fingerprint}`);
          await logSecurityEvent({
            type: "BLOCKED_LOGIN_ATTEMPT",
            fingerprint,
            ipAddress: getClientPublicIP(req).ip,
            userAgent: userAgent || req.headers["user-agent"] || "",
            username: email,
            location: location || null,
            severity: "HIGH"
          });
          return res.status(403).json({ message: "\u0647\u0630\u0627 \u0627\u0644\u062C\u0647\u0627\u0632 \u0645\u062D\u0638\u0648\u0631 \u0645\u0646 \u0627\u0644\u062F\u062E\u0648\u0644 \u0644\u0644\u0646\u0638\u0627\u0645" });
        }
      }
      let user;
      try {
        user = await storage.getUserByEmail(email);
      } catch (dbError) {
        console.log("\u26A0\uFE0F \u0641\u0634\u0644 \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0628\u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0624\u0642\u062A");
        const tempResult = await tempLogin(email, password);
        if (tempResult) {
          console.log("\u2705 \u0646\u062C\u062D \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0628\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0624\u0642\u062A");
          const token2 = jwt3.sign(
            { userId: tempResult.user.id, email: tempResult.user.email, type: tempResult.user.role },
            JWT_SECRET,
            { expiresIn: JWT_EXPIRY }
          );
          return res.json({
            message: "\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0628\u0646\u062C\u0627\u062D (\u0646\u0638\u0627\u0645 \u0645\u0624\u0642\u062A)",
            token: token2,
            user: tempResult.user
          });
        } else {
          return res.status(401).json({ message: "\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0623\u0648 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
        }
      }
      if (!user) {
        console.log(`\u{1F6A8} \u0645\u062D\u0627\u0648\u0644\u0629 \u062F\u062E\u0648\u0644 \u0641\u0627\u0634\u0644\u0629 - \u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F: ${email}, \u0627\u0644\u0628\u0635\u0645\u0629: ${fingerprint}`);
        console.log(`\u{1F4DD} \u062A\u0633\u062C\u064A\u0644 \u0645\u062D\u0627\u0648\u0644\u0629 \u062F\u062E\u0648\u0644 \u0641\u0627\u0634\u0644\u0629 \u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F...`);
        await logSecurityEvent({
          type: "FAILED_LOGIN",
          fingerprint: fingerprint || "unknown",
          ipAddress: getClientPublicIP(req).ip,
          userAgent: userAgent || req.headers["user-agent"] || "Unknown",
          username: email,
          location: location || null,
          severity: "MEDIUM"
        }, securityImage);
        console.log(`\u2705 \u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0645\u062D\u0627\u0648\u0644\u0629 \u0627\u0644\u062F\u062E\u0648\u0644 \u0627\u0644\u0641\u0627\u0634\u0644\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0627\u0644\u0645\u0648\u062C\u0648\u062F \u0641\u064A \u0646\u0638\u0627\u0645 \u0627\u0644\u0623\u0645\u0627\u0646`);
        return res.status(401).json({ message: "\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0623\u0648 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
      }
      const isPasswordValid = await comparePasswords(password, user.password);
      if (!isPasswordValid) {
        console.log(`\u{1F6A8} \u0641\u0634\u0644 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${email}, \u0627\u0644\u0628\u0635\u0645\u0629: ${fingerprint}`);
        if (fingerprint) {
          console.log(`\u{1F4DD} \u062A\u0633\u062C\u064A\u0644 \u0645\u062D\u0627\u0648\u0644\u0629 \u062F\u062E\u0648\u0644 \u0641\u0627\u0634\u0644\u0629 \u0641\u064A \u0646\u0638\u0627\u0645 \u0627\u0644\u0623\u0645\u0627\u0646...`);
          await logSecurityEvent({
            type: "FAILED_LOGIN",
            fingerprint,
            ipAddress: getClientPublicIP(req).ip,
            userAgent: userAgent || req.headers["user-agent"] || "Unknown",
            username: email,
            location: location || null,
            severity: "MEDIUM"
          }, securityImage);
          console.log(`\u2705 \u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0645\u062D\u0627\u0648\u0644\u0629 \u0627\u0644\u062F\u062E\u0648\u0644 \u0627\u0644\u0641\u0627\u0634\u0644\u0629 \u0628\u0643\u0644\u0645\u0629 \u0645\u0631\u0648\u0631 \u062E\u0627\u0637\u0626\u0629 \u0641\u064A \u0646\u0638\u0627\u0645 \u0627\u0644\u0623\u0645\u0627\u0646`);
        }
        return res.status(401).json({ message: "\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0623\u0648 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
      }
      const { user2FAToken } = req.body;
      try {
        const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
        const { user2FA: user2FA2 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
        const [user2faRecord] = await db2.select().from(user2FA2).where(eq3(user2FA2.userId, user.id));
        if (user2faRecord?.isEnabled) {
          if (!user2FAToken) {
            return res.status(202).json({
              message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0631\u0645\u0632 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629",
              requires2FA: true,
              // إرسال token مؤقت للمرحلة الثانية
              tempToken: jwt3.sign(
                { userId: user.id, email: user.email, type: user.type, temp2FA: true },
                JWT_SECRET,
                { expiresIn: "1h" }
                // صالح لـ ساعة كاملة لضمان عدم انتهاء الصلاحية
              )
            });
          }
          const speakeasy = await import("speakeasy");
          let verified = false;
          if (user2FAToken.length === 6 && /^\d{6}$/.test(user2FAToken)) {
            verified = speakeasy.totp.verify({
              secret: user2faRecord.secret,
              encoding: "base32",
              token: user2FAToken,
              window: 2
            });
          }
          if (!verified && user2faRecord.backupCodes && user2faRecord.backupCodes.includes(user2FAToken.toUpperCase())) {
            verified = true;
            const updatedBackupCodes = user2faRecord.backupCodes.filter((code2) => code2 !== user2FAToken.toUpperCase());
            await db2.update(user2FA2).set({
              backupCodes: updatedBackupCodes,
              lastUsedAt: /* @__PURE__ */ new Date()
            }).where(eq3(user2FA2.userId, user.id));
          } else if (verified) {
            await db2.update(user2FA2).set({ lastUsedAt: /* @__PURE__ */ new Date() }).where(eq3(user2FA2.userId, user.id));
          }
          if (!verified) {
            console.log(`\u{1F6A8} \u0641\u0634\u0644 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${email}, \u0627\u0644\u0631\u0645\u0632: ${user2FAToken}`);
            if (fingerprint) {
              await logSecurityEvent({
                type: "FAILED_2FA",
                fingerprint,
                ipAddress: getClientPublicIP(req).ip,
                userAgent: userAgent || req.headers["user-agent"] || "Unknown",
                username: email,
                userId: user.id,
                location: location || null,
                severity: "HIGH"
              }, securityImage);
            }
            return res.status(401).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
          }
          console.log(`\u2705 \u0646\u062C\u062D\u062A \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${email}`);
        }
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629:", error);
      }
      const isActiveUser = typeof user.active === "boolean" ? user.active === true : String(user.active) === "t" || String(user.active) === "true";
      if (!isActiveUser) {
        console.log(`\u0645\u0646\u0639 \u062F\u062E\u0648\u0644 \u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0639\u0637\u0644: ${user.fullName} (${user.id}), \u062D\u0627\u0644\u0629 \u0627\u0644\u0646\u0634\u0627\u0637: [${user.active}]`);
        return res.status(403).json({ message: "\u0647\u0630\u0627 \u0627\u0644\u062D\u0633\u0627\u0628 \u0645\u0639\u0637\u0644. \u064A\u0631\u062C\u0649 \u0627\u0644\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u0625\u062F\u0627\u0631\u0629." });
      }
      if (fingerprint) {
        await logSecurityEvent({
          type: "SUCCESSFUL_LOGIN",
          fingerprint,
          ipAddress: getClientPublicIP(req).ip,
          userAgent: userAgent || req.headers["user-agent"] || "",
          username: email,
          userId: user.id,
          location: location || null,
          severity: "LOW"
        });
      }
      const token = generateToken(user);
      const { password: _, ...userWithoutPassword } = user;
      res.status(200).json({
        message: "\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0628\u0646\u062C\u0627\u062D",
        token,
        user: userWithoutPassword
      });
    } catch (error) {
      next(error);
    }
  });
  app2.post("/api/logout", (_req, res) => {
    res.status(200).json({ message: "\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062E\u0631\u0648\u062C \u0628\u0646\u062C\u0627\u062D" });
  });
  app2.get("/api/user", authMiddleware, async (req, res) => {
    const userId = req.user.id;
    const fullUserData = await storage.getUser(userId);
    if (!fullUserData) {
      return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
    }
    const { password, ...userWithoutPassword } = fullUserData;
    const hasAgentAccess = userWithoutPassword.type === "agent" || userWithoutPassword.type === "office";
    const hasExternalTransferAccess = hasAgentAccess && userWithoutPassword.extTransferEnabled === true;
    const userData = {
      ...userWithoutPassword,
      accountNumber: userWithoutPassword.accountNumber || `20000000${userId.toString().padStart(2, "0")}`,
      hasAgentAccess,
      hasExternalTransferAccess,
      adminLevel: userWithoutPassword.adminLevel || 0
    };
    console.log(`\u{1F50D} \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${fullUserData.fullName} (ID: ${userId}):`, {
      type: userWithoutPassword.type,
      extTransferEnabled: userWithoutPassword.extTransferEnabled,
      hasAgentAccess,
      hasExternalTransferAccess
    });
    res.json(userData);
  });
}

// server/verification-upload-route.ts
init_storage();

// server/file-uploads.ts
import multer from "multer";
import path2 from "path";
import fs2 from "fs";
var createDirectories = () => {
  const dirs = [
    "./public/uploads",
    "./public/uploads/verification",
    "./public/uploads/verification/id",
    "./public/uploads/verification/address"
  ];
  dirs.forEach((dir) => {
    if (!fs2.existsSync(dir)) {
      fs2.mkdirSync(dir, { recursive: true });
    }
  });
};
createDirectories();
var storage2 = multer.diskStorage({
  destination: function(req, file, cb) {
    let uploadPath = "./public/uploads/verification/";
    if (file.fieldname === "id_photo") {
      uploadPath += "id";
    } else if (file.fieldname === "proof_of_address") {
      uploadPath += "address";
    }
    cb(null, uploadPath);
  },
  filename: function(req, file, cb) {
    const userId = req.user?.id || "unknown";
    const timestamp2 = Date.now();
    const fileExt = path2.extname(file.originalname);
    cb(null, `${userId}_${timestamp2}${fileExt}`);
  }
});
var fileFilter = (req, file, cb) => {
  const allowedTypes = [
    "image/jpeg",
    "image/jpg",
    "image/png",
    "image/gif",
    "image/webp",
    "application/pdf",
    "application/msword",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
  ];
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(new Error("\u064A\u064F\u0633\u0645\u062D \u0641\u0642\u0637 \u0628\u0645\u0644\u0641\u0627\u062A \u0627\u0644\u0635\u0648\u0631 (JPG, PNG, GIF, WEBP) \u0648\u0645\u0644\u0641\u0627\u062A PDF \u0648Word"));
  }
};
var upload = multer({
  storage: storage2,
  limits: {
    fileSize: 5 * 1024 * 1024
    // 5MB limit
  },
  fileFilter
});
var handleUploadErrors = (err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    if (err.code === "LIMIT_FILE_SIZE") {
      return res.status(400).json({ message: "\u062D\u062C\u0645 \u0627\u0644\u0645\u0644\u0641 \u0643\u0628\u064A\u0631 \u062C\u062F\u064B\u0627. \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0647\u0648 5 \u0645\u064A\u063A\u0627\u0628\u0627\u064A\u062A." });
    }
    return res.status(400).json({ message: `\u062E\u0637\u0623 \u0641\u064A \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641: ${err.message}` });
  } else if (err) {
    return res.status(400).json({ message: err.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641" });
  }
  next();
};

// server/verification-upload-route.ts
var setupVerificationUploadRoute = (app2) => {
  app2.post("/api/user/verify-account", authMiddleware, upload.fields([
    { name: "id_photo", maxCount: 1 },
    { name: "proof_of_address", maxCount: 1 }
  ]), handleUploadErrors, async (req, res) => {
    try {
      const userId = req.user.id;
      const files = req.files;
      console.log("Files received:", files);
      if (!files.id_photo || !files.proof_of_address) {
        return res.status(400).json({
          message: "\u064A\u062C\u0628 \u062A\u0648\u0641\u064A\u0631 \u0635\u0648\u0631\u0629 \u0627\u0644\u0647\u0648\u064A\u0629 \u0648\u0625\u062B\u0628\u0627\u062A \u0627\u0644\u0639\u0646\u0648\u0627\u0646"
        });
      }
      const existingRequest = await storage.getUserVerificationRequest(userId);
      if (existingRequest) {
        return res.status(400).json({
          message: "\u0644\u062F\u064A\u0643 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u0642\u064A\u062F \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629 \u0628\u0627\u0644\u0641\u0639\u0644",
          request: existingRequest
        });
      }
      const idPhotoUrl = `/uploads/verification/id/${files.id_photo[0].filename}`;
      const proofOfAddressUrl = `/uploads/verification/address/${files.proof_of_address[0].filename}`;
      const request = await storage.createVerificationRequest({
        userId,
        idPhotoUrl,
        proofOfAddressUrl
      });
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642 \u0628\u0646\u062C\u0627\u062D \u0648\u0633\u064A\u062A\u0645 \u0645\u0631\u0627\u062C\u0639\u062A\u0647 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0625\u062F\u0627\u0631\u0629",
        request
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
};

// server/unread-messages.ts
init_db();
init_storage();
import { sql as sql4 } from "drizzle-orm";
import jwt4 from "jsonwebtoken";
var JWT_SECRET2 = (() => {
  const secret = process.env.JWT_SECRET;
  if (!secret) {
    throw new Error("JWT_SECRET environment variable is required for security");
  }
  return secret;
})();
async function ensureAuth(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647" });
  }
  try {
    const token = authHeader.split(" ")[1];
    const payload = jwt4.verify(token, JWT_SECRET2);
    const user = await storage.getUser(payload.userId);
    if (!user) {
      return res.status(401).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
    }
    req.user = user;
    next();
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u062A\u0648\u0643\u0646:", error);
    return res.status(401).json({ message: "\u062A\u0648\u0643\u0646 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
  }
}
function setupUnreadMessagesRoutes(app2) {
  app2.get("/api/chat/unread/public", ensureAuth, async (req, res) => {
    try {
      const userId = req.user.id;
      const result = await db.execute(sql4`
        SELECT chat_messages.room_id as "roomId",
               COUNT(chat_messages.id) as "unreadCount"
        FROM chat_messages
        WHERE chat_messages.id NOT IN (
          SELECT message_id FROM chat_message_reads WHERE user_id = ${userId}
        )
        AND chat_messages.sender_id != ${userId}
        AND chat_messages.is_deleted = false
        GROUP BY chat_messages.room_id
      `);
      res.json(result.rows);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0639\u062F\u062F \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u063A\u064A\u0631 \u0627\u0644\u0645\u0642\u0631\u0648\u0621\u0629 \u0641\u064A \u0627\u0644\u063A\u0631\u0641 \u0627\u0644\u0639\u0627\u0645\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0639\u062F\u062F \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u063A\u064A\u0631 \u0627\u0644\u0645\u0642\u0631\u0648\u0621\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.get("/api/chat/unread/private", ensureAuth, async (req, res) => {
    try {
      const userId = req.user.id;
      const result = await db.execute(sql4`
        SELECT private_messages.chat_id as "chatId",
               COUNT(private_messages.id) as "unreadCount"
        FROM private_messages
        JOIN private_chats ON private_messages.chat_id = private_chats.id
        WHERE private_messages.id NOT IN (
          SELECT message_id FROM private_message_reads WHERE user_id = ${userId}
        )
        AND private_messages.sender_id != ${userId}
        AND private_messages.is_deleted = false
        AND (private_chats.user1_id = ${userId} OR private_chats.user2_id = ${userId})
        GROUP BY private_messages.chat_id
      `);
      res.json(result.rows);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0639\u062F\u062F \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u063A\u064A\u0631 \u0627\u0644\u0645\u0642\u0631\u0648\u0621\u0629 \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0639\u062F\u062F \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u063A\u064A\u0631 \u0627\u0644\u0645\u0642\u0631\u0648\u0621\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.get("/api/chat/unread/groups", ensureAuth, async (req, res) => {
    try {
      const userId = req.user.id;
      const result = await db.execute(sql4`
        SELECT group_messages.group_id as "groupId",
               COUNT(group_messages.id) as "unreadCount"
        FROM group_messages
        JOIN group_members ON group_messages.group_id = group_members.group_id
        WHERE group_messages.id NOT IN (
          SELECT message_id FROM group_message_reads WHERE user_id = ${userId}
        )
        AND group_messages.sender_id != ${userId}
        AND group_messages.is_deleted = false
        AND group_members.user_id = ${userId}
        GROUP BY group_messages.group_id
      `);
      res.json(result.rows);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0639\u062F\u062F \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u063A\u064A\u0631 \u0627\u0644\u0645\u0642\u0631\u0648\u0621\u0629 \u0641\u064A \u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u062F\u0631\u062F\u0634\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0639\u062F\u062F \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u063A\u064A\u0631 \u0627\u0644\u0645\u0642\u0631\u0648\u0621\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.post("/api/chat/mark-read/:roomId", ensureAuth, async (req, res) => {
    try {
      const userId = req.user.id;
      const { roomId } = req.params;
      const unreadMessages = await db.execute(sql4`
        SELECT id FROM chat_messages
        WHERE room_id = ${parseInt(roomId)}
        AND id NOT IN (
          SELECT message_id FROM chat_message_reads WHERE user_id = ${userId}
        )
        AND sender_id != ${userId}
      `);
      const messageIds = unreadMessages.rows.map((row) => row.id);
      if (messageIds.length > 0) {
        for (const messageId of messageIds) {
          await db.execute(sql4`
            INSERT INTO chat_message_reads (message_id, user_id, read_at)
            VALUES (${messageId}, ${userId}, NOW())
            ON CONFLICT (message_id, user_id) DO NOTHING
          `);
        }
      }
      res.json({ success: true, markedCount: messageIds.length });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629 \u0641\u064A \u0627\u0644\u063A\u0631\u0641\u0629 \u0627\u0644\u0639\u0627\u0645\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.post("/api/chat/private/:chatId/mark-read", ensureAuth, async (req, res) => {
    try {
      const userId = req.user.id;
      const { chatId } = req.params;
      const unreadMessages = await db.execute(sql4`
        SELECT id FROM private_messages
        WHERE chat_id = ${parseInt(chatId)}
        AND id NOT IN (
          SELECT message_id FROM private_message_reads WHERE user_id = ${userId}
        )
        AND sender_id != ${userId}
      `);
      const messageIds = unreadMessages.rows.map((row) => row.id);
      if (messageIds.length > 0) {
        for (const messageId of messageIds) {
          await db.execute(sql4`
            INSERT INTO private_message_reads (message_id, user_id, read_at)
            VALUES (${messageId}, ${userId}, NOW())
            ON CONFLICT (message_id, user_id) DO NOTHING
          `);
        }
      }
      res.json({ success: true, markedCount: messageIds.length });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629 \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u0627\u0644\u062E\u0627\u0635\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.post("/api/chat/groups/:groupId/mark-read", ensureAuth, async (req, res) => {
    try {
      const userId = req.user.id;
      const { groupId } = req.params;
      const unreadMessages = await db.execute(sql4`
        SELECT id FROM group_messages
        WHERE group_id = ${parseInt(groupId)}
        AND id NOT IN (
          SELECT message_id FROM group_message_reads WHERE user_id = ${userId}
        )
        AND sender_id != ${userId}
      `);
      const messageIds = unreadMessages.rows.map((row) => row.id);
      if (messageIds.length > 0) {
        for (const messageId of messageIds) {
          await db.execute(sql4`
            INSERT INTO group_message_reads (message_id, user_id, read_at)
            VALUES (${messageId}, ${userId}, NOW())
            ON CONFLICT (message_id, user_id) DO NOTHING
          `);
        }
      }
      res.json({ success: true, markedCount: messageIds.length });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629 \u0641\u064A \u0645\u062C\u0645\u0648\u0639\u0629 \u0627\u0644\u062F\u0631\u062F\u0634\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.post("/api/chat/message-read/:messageType/:messageId", ensureAuth, async (req, res) => {
    try {
      const userId = req.user.id;
      const { messageType, messageId } = req.params;
      let tableName = "";
      if (messageType === "public") {
        tableName = "chat_message_reads";
      } else if (messageType === "private") {
        tableName = "private_message_reads";
      } else if (messageType === "group") {
        tableName = "group_message_reads";
      } else {
        return res.status(400).json({ message: "\u0646\u0648\u0639 \u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      if (messageType === "public") {
        await db.execute(sql4`
          INSERT INTO chat_message_reads (message_id, user_id, read_at)
          VALUES (${parseInt(messageId)}, ${userId}, NOW())
          ON CONFLICT (message_id, user_id) DO NOTHING
        `);
      } else if (messageType === "private") {
        await db.execute(sql4`
          INSERT INTO private_message_reads (message_id, user_id, read_at)
          VALUES (${parseInt(messageId)}, ${userId}, NOW())
          ON CONFLICT (message_id, user_id) DO NOTHING
        `);
      } else if (messageType === "group") {
        await db.execute(sql4`
          INSERT INTO group_message_reads (message_id, user_id, read_at)
          VALUES (${parseInt(messageId)}, ${userId}, NOW())
          ON CONFLICT (message_id, user_id) DO NOTHING
        `);
      }
      res.json({ success: true });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0642\u0631\u0627\u0621\u0629 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0633\u062C\u064A\u0644 \u0642\u0631\u0627\u0621\u0629 \u0627\u0644\u0631\u0633\u0627\u0644\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.post("/api/chat/mark-all-read", ensureAuth, async (req, res) => {
    try {
      const userId = req.user.id;
      const publicUnreadMessages = await db.execute(sql4`
        SELECT id FROM chat_messages
        WHERE id NOT IN (
          SELECT message_id FROM chat_message_reads WHERE user_id = ${userId}
        )
        AND sender_id != ${userId}
      `);
      for (const row of publicUnreadMessages.rows) {
        await db.execute(sql4`
          INSERT INTO chat_message_reads (message_id, user_id, read_at)
          VALUES (${row.id}, ${userId}, NOW())
          ON CONFLICT (message_id, user_id) DO NOTHING
        `);
      }
      const privateUnreadMessages = await db.execute(sql4`
        SELECT pm.id 
        FROM private_messages pm
        JOIN private_chats pc ON pm.chat_id = pc.id
        WHERE pm.id NOT IN (
          SELECT message_id FROM private_message_reads WHERE user_id = ${userId}
        )
        AND pm.sender_id != ${userId}
        AND (pc.user1_id = ${userId} OR pc.user2_id = ${userId})
      `);
      for (const row of privateUnreadMessages.rows) {
        await db.execute(sql4`
          INSERT INTO private_message_reads (message_id, user_id, read_at)
          VALUES (${row.id}, ${userId}, NOW())
          ON CONFLICT (message_id, user_id) DO NOTHING
        `);
      }
      const groupUnreadMessages = await db.execute(sql4`
        SELECT gm.id 
        FROM group_messages gm
        JOIN group_members gme ON gm.group_id = gme.group_id
        WHERE gm.id NOT IN (
          SELECT message_id FROM group_message_reads WHERE user_id = ${userId}
        )
        AND gm.sender_id != ${userId}
        AND gme.user_id = ${userId}
      `);
      for (const row of groupUnreadMessages.rows) {
        await db.execute(sql4`
          INSERT INTO group_message_reads (message_id, user_id, read_at)
          VALUES (${row.id}, ${userId}, NOW())
          ON CONFLICT (message_id, user_id) DO NOTHING
        `);
      }
      res.json({
        success: true,
        publicCount: publicUnreadMessages.rows.length,
        privateCount: privateUnreadMessages.rows.length,
        groupCount: groupUnreadMessages.rows.length
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u064A\u064A\u0646 \u062C\u0645\u064A\u0639 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u064A\u064A\u0646 \u062C\u0645\u064A\u0639 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
}

// server/objectStorage.ts
import { Storage } from "@google-cloud/storage";
import { randomUUID as randomUUID2 } from "crypto";
var REPLIT_SIDECAR_ENDPOINT = "http://127.0.0.1:1106";
var objectStorageClient = new Storage({
  credentials: {
    audience: "replit",
    subject_token_type: "access_token",
    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,
    type: "external_account",
    credential_source: {
      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,
      format: {
        type: "json",
        subject_token_field_name: "access_token"
      }
    },
    universe_domain: "googleapis.com"
  },
  projectId: ""
});
var ObjectNotFoundError = class _ObjectNotFoundError extends Error {
  constructor() {
    super("Object not found");
    this.name = "ObjectNotFoundError";
    Object.setPrototypeOf(this, _ObjectNotFoundError.prototype);
  }
};
var ObjectStorageService = class {
  constructor() {
  }
  // Gets the public object search paths.
  getPublicObjectSearchPaths() {
    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || "";
    const paths = Array.from(
      new Set(
        pathsStr.split(",").map((path9) => path9.trim()).filter((path9) => path9.length > 0)
      )
    );
    if (paths.length === 0) {
      throw new Error(
        "PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths)."
      );
    }
    return paths;
  }
  // Gets the private object directory.
  getPrivateObjectDir() {
    const dir = process.env.PRIVATE_OBJECT_DIR || "";
    if (!dir) {
      throw new Error(
        "PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' tool and set PRIVATE_OBJECT_DIR env var."
      );
    }
    return dir;
  }
  // Search for a public object from the search paths.
  async searchPublicObject(filePath) {
    for (const searchPath of this.getPublicObjectSearchPaths()) {
      const fullPath = `${searchPath}/${filePath}`;
      const { bucketName, objectName } = parseObjectPath(fullPath);
      const bucket = objectStorageClient.bucket(bucketName);
      const file = bucket.file(objectName);
      const [exists] = await file.exists();
      if (exists) {
        return file;
      }
    }
    return null;
  }
  // Downloads an object to the response.
  async downloadObject(file, res, cacheTtlSec = 3600) {
    try {
      const [metadata] = await file.getMetadata();
      res.set({
        "Content-Type": metadata.contentType || "application/octet-stream",
        "Content-Length": metadata.size,
        "Cache-Control": `public, max-age=${cacheTtlSec}`
      });
      const stream = file.createReadStream();
      stream.on("error", (err) => {
        console.error("Stream error:", err);
        if (!res.headersSent) {
          res.status(500).json({ error: "Error streaming file" });
        }
      });
      stream.pipe(res);
    } catch (error) {
      console.error("Error downloading file:", error);
      if (!res.headersSent) {
        res.status(500).json({ error: "Error downloading file" });
      }
    }
  }
  // Gets the upload URL for an object entity.
  async getObjectEntityUploadURL() {
    const privateObjectDir = this.getPrivateObjectDir();
    if (!privateObjectDir) {
      throw new Error(
        "PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' tool and set PRIVATE_OBJECT_DIR env var."
      );
    }
    const objectId = randomUUID2();
    const fullPath = `${privateObjectDir}/uploads/${objectId}`;
    const { bucketName, objectName } = parseObjectPath(fullPath);
    return signObjectURL({
      bucketName,
      objectName,
      method: "PUT",
      ttlSec: 900
    });
  }
  // Gets the upload URL for avatar
  async getAvatarUploadURL(userId) {
    const privateObjectDir = this.getPrivateObjectDir();
    if (!privateObjectDir) {
      throw new Error(
        "PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' tool and set PRIVATE_OBJECT_DIR env var."
      );
    }
    const storageKey = `avatars/${userId}/avatar-${Date.now()}.webp`;
    const fullPath = `${privateObjectDir}/${storageKey}`;
    const { bucketName, objectName } = parseObjectPath(fullPath);
    const uploadUrl = await signObjectURL({
      bucketName,
      objectName,
      method: "PUT",
      ttlSec: 900
    });
    return { uploadUrl, storageKey };
  }
  // Gets a signed URL for viewing an avatar
  async getAvatarViewURL(storageKey) {
    const privateObjectDir = this.getPrivateObjectDir();
    const fullPath = `${privateObjectDir}/${storageKey}`;
    const { bucketName, objectName } = parseObjectPath(fullPath);
    return signObjectURL({
      bucketName,
      objectName,
      method: "GET",
      ttlSec: 3600
      // 1 hour
    });
  }
  // Gets the object entity file from the object path.
  async getObjectEntityFile(objectPath) {
    if (!objectPath.startsWith("/objects/")) {
      throw new ObjectNotFoundError();
    }
    const parts = objectPath.slice(1).split("/");
    if (parts.length < 2) {
      throw new ObjectNotFoundError();
    }
    const entityId = parts.slice(1).join("/");
    let entityDir = this.getPrivateObjectDir();
    if (!entityDir.endsWith("/")) {
      entityDir = `${entityDir}/`;
    }
    const objectEntityPath = `${entityDir}${entityId}`;
    const { bucketName, objectName } = parseObjectPath(objectEntityPath);
    const bucket = objectStorageClient.bucket(bucketName);
    const objectFile = bucket.file(objectName);
    const [exists] = await objectFile.exists();
    if (!exists) {
      throw new ObjectNotFoundError();
    }
    return objectFile;
  }
  normalizeObjectEntityPath(rawPath) {
    if (!rawPath.startsWith("https://storage.googleapis.com/")) {
      return rawPath;
    }
    const url = new URL(rawPath);
    const rawObjectPath = url.pathname;
    let objectEntityDir = this.getPrivateObjectDir();
    if (!objectEntityDir.endsWith("/")) {
      objectEntityDir = `${objectEntityDir}/`;
    }
    if (!rawObjectPath.startsWith(objectEntityDir)) {
      return rawObjectPath;
    }
    const entityId = rawObjectPath.slice(objectEntityDir.length);
    return `/objects/${entityId}`;
  }
};
function parseObjectPath(path9) {
  if (!path9.startsWith("/")) {
    path9 = `/${path9}`;
  }
  const pathParts = path9.split("/");
  if (pathParts.length < 3) {
    throw new Error("Invalid path: must contain at least a bucket name");
  }
  const bucketName = pathParts[1];
  const objectName = pathParts.slice(2).join("/");
  return {
    bucketName,
    objectName
  };
}
async function signObjectURL({
  bucketName,
  objectName,
  method,
  ttlSec
}) {
  const request = {
    bucket_name: bucketName,
    object_name: objectName,
    method,
    expires_at: new Date(Date.now() + ttlSec * 1e3).toISOString()
  };
  const response = await fetch(
    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(request)
    }
  );
  if (!response.ok) {
    throw new Error(
      `Failed to sign object URL, errorcode: ${response.status}, make sure you're running on Replit`
    );
  }
  const { signed_url: signedURL } = await response.json();
  return signedURL;
}

// server/routes.ts
init_push_notifications();
import bcrypt2 from "bcrypt";
import crypto2 from "crypto";

// server/file-upload.ts
import multer2 from "multer";
import path3 from "path";
import fs3 from "fs";
var uploadDir = path3.join(process.cwd(), "public", "uploads");
if (!fs3.existsSync(uploadDir)) {
  fs3.mkdirSync(uploadDir, { recursive: true });
  console.log("\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0645\u062C\u0644\u062F \u0627\u0644\u062A\u062D\u0645\u064A\u0644\u0627\u062A:", uploadDir);
}
var storage3 = multer2.diskStorage({
  destination: function(req, file, cb) {
    cb(null, uploadDir);
  },
  filename: function(req, file, cb) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    const ext = path3.extname(file.originalname);
    cb(null, uniqueSuffix + ext);
  }
});
var fileFilter2 = (req, file, cb) => {
  const allowedMimes = [
    "image/jpeg",
    "image/png",
    "image/gif",
    "image/webp",
    "application/pdf",
    "application/msword",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
    "application/vnd.ms-excel",
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    "application/zip",
    "application/x-rar-compressed"
  ];
  if (allowedMimes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(new Error("\u0646\u0648\u0639 \u0627\u0644\u0645\u0644\u0641 \u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D \u0628\u0647. \u064A\u0631\u062C\u0649 \u062A\u062D\u0645\u064A\u0644 \u0635\u0648\u0631\u0629 \u0623\u0648 \u0645\u0633\u062A\u0646\u062F \u0623\u0648 \u0645\u0644\u0641 \u0645\u0636\u063A\u0648\u0637 \u0641\u0642\u0637."), false);
  }
};
var upload2 = multer2({
  storage: storage3,
  limits: {
    fileSize: 10 * 1024 * 1024
    // الحد الأقصى 10 ميجابايت
  },
  fileFilter: fileFilter2
});
var handleUploadErrors2 = (err, req, res, next) => {
  if (err instanceof multer2.MulterError) {
    if (err.code === "LIMIT_FILE_SIZE") {
      return res.status(400).json({ message: "\u062D\u062C\u0645 \u0627\u0644\u0645\u0644\u0641 \u0643\u0628\u064A\u0631 \u062C\u062F\u064B\u0627. \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0647\u0648 10 \u0645\u064A\u062C\u0627\u0628\u0627\u064A\u062A." });
    }
    return res.status(400).json({ message: `\u062E\u0637\u0623 \u0641\u064A \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641: ${err.message}` });
  } else if (err) {
    return res.status(400).json({ message: err.message || "\u062E\u0637\u0623 \u0641\u064A \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641" });
  }
  next();
};

// server/voice-service.ts
init_db();
init_schema();
import { eq as eq4, and as and3, desc as desc3, gte as gte2, sql as sql5 } from "drizzle-orm";
import multer3 from "multer";
import path4 from "path";
import fs4 from "fs/promises";
import { randomUUID as randomUUID3 } from "crypto";
var VOICE_UPLOAD_DIR = path4.join(process.cwd(), "uploads/voice");
var MAX_DURATION_SECONDS = 120;
var MAX_FILE_SIZE_MB = 10;
var MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;
var RATE_LIMIT_WINDOW_MINUTES = 10;
var RATE_LIMIT_MAX_MESSAGES = 10;
var ALLOWED_MIME_TYPES = [
  "audio/ogg",
  "audio/webm",
  "audio/mpeg",
  "audio/mp4",
  "audio/wav",
  "audio/m4a"
];
async function ensureUploadDir() {
  try {
    await fs4.access(VOICE_UPLOAD_DIR);
  } catch {
    await fs4.mkdir(VOICE_UPLOAD_DIR, { recursive: true });
  }
}
var voiceUpload = multer3({
  dest: VOICE_UPLOAD_DIR,
  limits: {
    fileSize: MAX_FILE_SIZE_BYTES
  },
  fileFilter: (req, file, cb) => {
    if (ALLOWED_MIME_TYPES.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error(`\u0646\u0648\u0639 \u0627\u0644\u0645\u0644\u0641 \u063A\u064A\u0631 \u0645\u062F\u0639\u0648\u0645: ${file.mimetype}`));
    }
  }
});
var VoiceService = class {
  // التحقق من حدود المعدل
  static async checkRateLimit(userId) {
    const windowStart = /* @__PURE__ */ new Date();
    windowStart.setMinutes(windowStart.getMinutes() - RATE_LIMIT_WINDOW_MINUTES);
    const [rateLimitRecord] = await db.select().from(voiceRateLimits).where(
      and3(
        eq4(voiceRateLimits.userId, userId),
        gte2(voiceRateLimits.windowStartTime, windowStart)
      )
    ).limit(1);
    if (!rateLimitRecord) {
      await db.insert(voiceRateLimits).values({
        userId,
        messageCount: 0,
        windowStartTime: /* @__PURE__ */ new Date(),
        lastResetAt: /* @__PURE__ */ new Date()
      });
      return { allowed: true, remaining: RATE_LIMIT_MAX_MESSAGES };
    }
    const now = /* @__PURE__ */ new Date();
    const startTime = rateLimitRecord.windowStartTime ? new Date(rateLimitRecord.windowStartTime) : now;
    const timeSinceStart = now.getTime() - startTime.getTime();
    const windowExpired = timeSinceStart > RATE_LIMIT_WINDOW_MINUTES * 60 * 1e3;
    if (windowExpired) {
      await db.update(voiceRateLimits).set({
        messageCount: 0,
        windowStartTime: now,
        lastResetAt: now
      }).where(eq4(voiceRateLimits.id, rateLimitRecord.id));
      return { allowed: true, remaining: RATE_LIMIT_MAX_MESSAGES };
    }
    const allowed = rateLimitRecord.messageCount < RATE_LIMIT_MAX_MESSAGES;
    const remaining = Math.max(0, RATE_LIMIT_MAX_MESSAGES - rateLimitRecord.messageCount);
    return { allowed, remaining };
  }
  // زيادة عداد المعدل
  static async incrementRateLimit(userId) {
    const windowStart = /* @__PURE__ */ new Date();
    windowStart.setMinutes(windowStart.getMinutes() - RATE_LIMIT_WINDOW_MINUTES);
    await db.update(voiceRateLimits).set({
      messageCount: sql5`${voiceRateLimits.messageCount} + 1`
    }).where(
      and3(
        eq4(voiceRateLimits.userId, userId),
        gte2(voiceRateLimits.windowStartTime, windowStart)
      )
    );
  }
  // التحقق من صحة الملف الصوتي
  static validateVoiceFile(file, duration) {
    if (!ALLOWED_MIME_TYPES.includes(file.mimetype)) {
      return { valid: false, error: `\u0646\u0648\u0639 \u0627\u0644\u0645\u0644\u0641 \u063A\u064A\u0631 \u0645\u062F\u0639\u0648\u0645: ${file.mimetype}` };
    }
    if (file.size > MAX_FILE_SIZE_BYTES) {
      return { valid: false, error: `\u062D\u062C\u0645 \u0627\u0644\u0645\u0644\u0641 \u0643\u0628\u064A\u0631 \u062C\u062F\u0627\u064B (${(file.size / 1024 / 1024).toFixed(2)} MB). \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 ${MAX_FILE_SIZE_MB} MB` };
    }
    if (duration && duration > MAX_DURATION_SECONDS) {
      return { valid: false, error: `\u0645\u062F\u0629 \u0627\u0644\u062A\u0633\u062C\u064A\u0644 \u0637\u0648\u064A\u0644\u0629 \u062C\u062F\u0627\u064B (${duration}s). \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 ${MAX_DURATION_SECONDS} \u062B\u0627\u0646\u064A\u0629` };
    }
    return { valid: true };
  }
  // توليد موجة صوتية مبسطة (placeholder - يمكن تحسينها لاحقاً)
  static generateWaveformPeaks(durationSeconds) {
    const peaks = [];
    const numPeaks = Math.min(100, durationSeconds * 4);
    for (let i = 0; i < numPeaks; i++) {
      peaks.push(Math.random() * 0.8 + 0.1);
    }
    return peaks;
  }
  // حفظ رسالة صوتية
  static async saveVoiceMessage(data) {
    await ensureUploadDir();
    const fileId = randomUUID3();
    const fileExtension = path4.extname(data.file.originalname) || ".ogg";
    const storageKey = `voice/${fileId}${fileExtension}`;
    const finalPath = path4.join(VOICE_UPLOAD_DIR, `${fileId}${fileExtension}`);
    await fs4.rename(data.file.path, finalPath);
    const waveformPeaks = this.generateWaveformPeaks(data.durationSeconds);
    const [voiceRecord] = await db.insert(messageVoices).values({
      messageId: data.messageId,
      privateMessageId: data.privateMessageId,
      senderId: data.senderId,
      roomId: data.roomId,
      privateRoomId: data.privateRoomId,
      storageKey,
      mimeType: data.file.mimetype,
      durationSeconds: data.durationSeconds,
      fileSizeBytes: data.file.size,
      waveformPeaks,
      status: "ready"
    }).returning();
    this.startTranscription(voiceRecord.id);
    return voiceRecord.id;
  }
  // الحصول على رابط تشغيل الملف الصوتي
  static async getVoiceFileUrl(voiceId, userId) {
    const [voice] = await db.select().from(messageVoices).where(eq4(messageVoices.id, voiceId)).limit(1);
    if (!voice) {
      return null;
    }
    const hasAccess = await this.checkVoiceAccess(voice, userId);
    if (!hasAccess) {
      return null;
    }
    const url = `/api/voice/stream/${voiceId}`;
    return { url, voice };
  }
  // التحقق من صلاحيات الوصول للملف الصوتي
  static async checkVoiceAccess(voice, userId) {
    if (voice.senderId === userId) {
      return true;
    }
    if (voice.privateRoomId) {
      return true;
    }
    if (voice.roomId) {
      return true;
    }
    return false;
  }
  // بدء عملية النسخ النصي (placeholder)
  static async startTranscription(voiceId) {
    console.log(`\u0628\u062F\u0621 \u0646\u0633\u062E \u0646\u0635\u064A \u0644\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629: ${voiceId}`);
    setTimeout(async () => {
      try {
        const mockTranscript = "\u0647\u0630\u0627 \u0646\u0635 \u062A\u062C\u0631\u064A\u0628\u064A \u0644\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629";
        await db.update(messageVoices).set({
          transcript: mockTranscript,
          transcriptLang: "ar",
          status: "ready",
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq4(messageVoices.id, voiceId));
        console.log(`\u0627\u0643\u062A\u0645\u0644 \u0627\u0644\u0646\u0633\u062E \u0627\u0644\u0646\u0635\u064A \u0644\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629: ${voiceId}`);
      } catch (error) {
        console.error(`\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0633\u062E \u0627\u0644\u0646\u0635\u064A \u0644\u0644\u0631\u0633\u0627\u0644\u0629 ${voiceId}:`, error);
        await db.update(messageVoices).set({
          status: "failed",
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq4(messageVoices.id, voiceId));
      }
    }, 5e3);
  }
  // البحث في الرسائل الصوتية
  static async searchVoiceMessages(query, userId, limit = 20) {
    const results = await db.select({
      id: messageVoices.id,
      messageId: messageVoices.messageId,
      privateMessageId: messageVoices.privateMessageId,
      senderId: messageVoices.senderId,
      roomId: messageVoices.roomId,
      privateRoomId: messageVoices.privateRoomId,
      transcript: messageVoices.transcript,
      durationSeconds: messageVoices.durationSeconds,
      createdAt: messageVoices.createdAt,
      senderName: users.fullName
    }).from(messageVoices).leftJoin(users, eq4(messageVoices.senderId, users.id)).where(
      and3(
        // البحث في النص المنسوخ
        sql5`${messageVoices.transcript} ILIKE ${"%" + query + "%"}`,
        // التأكد من أن المستخدم يمكنه الوصول للرسالة
        sql5`${messageVoices.senderId} = ${userId}`
        // مبسط - يجب إضافة منطق أكثر تعقيداً
      )
    ).orderBy(desc3(messageVoices.createdAt)).limit(limit);
    return results;
  }
  // حذف رسالة صوتية
  static async deleteVoiceMessage(voiceId, userId) {
    const [voice] = await db.select().from(messageVoices).where(eq4(messageVoices.id, voiceId)).limit(1);
    if (!voice) {
      return false;
    }
    if (voice.senderId !== userId) {
      const [user] = await db.select().from(users).where(eq4(users.id, userId)).limit(1);
      if (!user || user.type !== "admin") {
        return false;
      }
    }
    try {
      const filePath = path4.join(VOICE_UPLOAD_DIR, path4.basename(voice.storageKey));
      await fs4.unlink(filePath).catch(() => {
      });
      await db.delete(messageVoices).where(eq4(messageVoices.id, voiceId));
      return true;
    } catch (error) {
      console.error(`\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629 ${voiceId}:`, error);
      return false;
    }
  }
  // إحصائيات الاستخدام
  static async getUsageStats(userId) {
    const weekAgo = /* @__PURE__ */ new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    const [result] = await db.select({
      totalMessages: sql5`count(*)::int`,
      totalDuration: sql5`coalesce(sum(${messageVoices.durationSeconds}), 0)::int`,
      totalSize: sql5`coalesce(sum(${messageVoices.fileSizeBytes}), 0)::int`,
      messagesThisWeek: sql5`count(case when ${messageVoices.createdAt} >= ${weekAgo} then 1 end)::int`
    }).from(messageVoices).where(eq4(messageVoices.senderId, userId));
    return result || {
      totalMessages: 0,
      totalDuration: 0,
      totalSize: 0,
      messagesThisWeek: 0
    };
  }
};

// server/routes.ts
import jwt5 from "jsonwebtoken";
init_schema();
import { eq as eq10, and as and9, or as or4, sql as sql12, like as like4, desc as desc8, asc as asc4, inArray as inArray4, isNull as isNull2, isNotNull as isNotNull2, gte as gte5, lte as lte4 } from "drizzle-orm";
import { ZodError as ZodError2, z as z2 } from "zod";
import { fromZodError as fromZodError2 } from "zod-validation-error";

// server/utils/reference-generator.ts
var ReferenceGenerator = class {
  /**
   * توليد رقم مرجعي فريد للتحويلات الداخلية
   */
  static generateInternalTransferReference(transferId, direction) {
    const timestamp2 = Date.now();
    return `REF-INT-${transferId}-${direction}`;
  }
  /**
   * توليد رقم مرجعي للتحويلات بين المكاتب
   */
  static generateInterOfficeTransferReference(transferId) {
    return `REF-IOT-${transferId}-${Date.now().toString().slice(-6)}`;
  }
  /**
   * توليد رقم مرجعي للتحويلات الدولية
   */
  static generateInternationalTransferReference(transferId) {
    return `REF-ITL-${transferId}-${Date.now().toString().slice(-6)}`;
  }
  /**
   * توليد رقم مرجعي لعمليات السوق
   */
  static generateMarketTransactionReference(transactionId) {
    return `REF-MKT-${transactionId}-${Date.now().toString().slice(-6)}`;
  }
  /**
   * توليد رقم مرجعي عام للمعاملات
   */
  static generateTransactionReference(transactionId, type) {
    const typePrefix = type.toUpperCase().substring(0, 3);
    return `REF-${typePrefix}-${transactionId}-${Date.now().toString().slice(-6)}`;
  }
  /**
   * التحقق من صحة تنسيق الرقم المرجعي
   */
  static validateReferenceFormat(reference) {
    const pattern = /^REF-[A-Z]{3}-\d+-([A-Z0-9]+)$/;
    return pattern.test(reference);
  }
  /**
   * استخراج معرف العملية من الرقم المرجعي
   */
  static extractTransactionId(reference) {
    const match = reference.match(/^REF-[A-Z]{3}-(\d+)-/);
    return match ? parseInt(match[1]) : null;
  }
  /**
   * استخراج نوع العملية من الرقم المرجعي
   */
  static extractTransactionType(reference) {
    const match = reference.match(/^REF-([A-Z]{3})-/);
    return match ? match[1] : null;
  }
};

// server/admin-transactions.ts
init_db();
init_schema();
import { eq as eq5, and as and4, or as or2, sql as sql6, like as like2, gte as gte3, lte as lte2, inArray as inArray2 } from "drizzle-orm";
var AdminTransactionService = class {
  // توليد رقم مرجعي فريد
  static generateRefNo(type) {
    const timestamp2 = Date.now();
    const random = Math.random().toString(36).substring(2, 6).toUpperCase();
    const typePrefix = type.substring(0, 3).toUpperCase();
    return `${typePrefix}-${timestamp2}-${random}`;
  }
  // إنشاء معاملة جديدة
  static async createTransaction(transactionData) {
    const refNo = this.generateRefNo(transactionData.type);
    const [newTransaction] = await db.insert(adminTransactions).values({
      refNo,
      status: "PENDING" /* PENDING */,
      executedAt: transactionData.type === "INTERNAL_TRANSFER" /* INTERNAL_TRANSFER */ ? /* @__PURE__ */ new Date() : void 0,
      channel: transactionData.channel || "WEB" /* WEB */,
      ...transactionData
    }).returning();
    return newTransaction;
  }
  // جلب المعاملات مع الفلاتر
  static async getTransactions(filters) {
    const page = Math.max(1, filters.page || 1);
    const pageSize = Math.min(100, Math.max(10, filters.pageSize || 50));
    const offset = (page - 1) * pageSize;
    console.log("\u{1F50D} \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0645\u0648\u062D\u062F\u0629 \u0645\u0646 adminTransactions \u0648 transactions...");
    let adminQuery = db.select({
      id: adminTransactions.id,
      refNo: adminTransactions.refNo,
      type: adminTransactions.type,
      status: adminTransactions.status,
      createdAt: adminTransactions.createdAt,
      updatedAt: adminTransactions.updatedAt,
      executedAt: adminTransactions.executedAt,
      userId: adminTransactions.userId,
      fromAccountId: adminTransactions.fromAccountId,
      toAccountId: adminTransactions.toAccountId,
      amount: adminTransactions.amount,
      currency: adminTransactions.currency,
      netAmount: adminTransactions.netAmount,
      feeSystem: adminTransactions.feeSystem,
      feeRecipient: adminTransactions.feeRecipient,
      channel: adminTransactions.channel,
      kycLevel: adminTransactions.kycLevel,
      riskScore: adminTransactions.riskScore,
      flags: adminTransactions.flags,
      parentTxnId: adminTransactions.parentTxnId,
      externalProvider: adminTransactions.externalProvider,
      externalRef: adminTransactions.externalRef,
      notes: adminTransactions.notes,
      meta: adminTransactions.meta,
      cityFrom: adminTransactions.cityFrom,
      cityTo: adminTransactions.cityTo,
      officeId: adminTransactions.officeId,
      userName: users.fullName,
      userAccountNumber: users.accountNumber,
      source: sql6`'admin'`
    }).from(adminTransactions).leftJoin(users, eq5(adminTransactions.userId, users.id));
    let regularQuery = db.select({
      id: transactions.id,
      refNo: transactions.referenceNumber,
      type: transactions.type,
      status: sql6`'completed'`,
      createdAt: transactions.date,
      updatedAt: transactions.date,
      executedAt: transactions.date,
      userId: transactions.userId,
      amount: transactions.amount,
      currency: transactions.currency,
      description: transactions.description,
      userName: users.fullName,
      userAccountNumber: users.accountNumber
    }).from(transactions).leftJoin(users, eq5(transactions.userId, users.id));
    console.log("\u{1F50D} \u062A\u0637\u0628\u064A\u0642 \u0627\u0644\u0641\u0644\u0627\u062A\u0631 \u0639\u0644\u0649 \u0643\u0644\u0627 \u0627\u0644\u0627\u0633\u062A\u0639\u0644\u0627\u0645\u0627\u062A...");
    const adminConditions = [];
    const regularConditions = [
      or2(
        eq5(transactions.type, "internal_transfer"),
        eq5(transactions.type, "internal_transfer_in"),
        eq5(transactions.type, "internal_transfer_out"),
        eq5(transactions.type, "exchange"),
        eq5(transactions.type, "market_trade")
      )
    ];
    if (filters.dateFrom || filters.dateTo) {
      const adminDateField = filters.useExecutedAt ? adminTransactions.executedAt : adminTransactions.createdAt;
      const regularDateField = transactions.date;
      if (filters.dateFrom) {
        adminConditions.push(gte3(adminDateField, new Date(filters.dateFrom)));
        regularConditions.push(gte3(regularDateField, new Date(filters.dateFrom)));
      }
      if (filters.dateTo) {
        adminConditions.push(lte2(adminDateField, new Date(filters.dateTo)));
        regularConditions.push(lte2(regularDateField, new Date(filters.dateTo)));
      }
    }
    if (filters.types && filters.types.length > 0) {
      adminConditions.push(inArray2(adminTransactions.type, filters.types));
      const regularTypeConditions = [];
      if (filters.types.includes("internal_transfer")) {
        regularTypeConditions.push(
          eq5(transactions.type, "internal_transfer"),
          eq5(transactions.type, "internal_transfer_in"),
          eq5(transactions.type, "internal_transfer_out")
        );
      }
      if (filters.types.includes("market_trade")) {
        regularTypeConditions.push(
          eq5(transactions.type, "exchange"),
          eq5(transactions.type, "market_trade")
        );
      }
      if (regularTypeConditions.length > 0) {
        regularConditions.push(or2(...regularTypeConditions));
      } else {
        regularConditions.push(sql6`1=0`);
      }
    }
    if (filters.statuses && filters.statuses.length > 0) {
      adminConditions.push(inArray2(adminTransactions.status, filters.statuses));
      if (!filters.statuses.includes("completed")) {
        regularConditions.push(sql6`1=0`);
      }
    }
    if (filters.currencies && filters.currencies.length > 0) {
      adminConditions.push(inArray2(adminTransactions.currency, filters.currencies));
      regularConditions.push(inArray2(transactions.currency, filters.currencies));
    }
    if (filters.amountMin) {
      adminConditions.push(gte3(adminTransactions.amount, filters.amountMin));
      regularConditions.push(gte3(transactions.amount, filters.amountMin));
    }
    if (filters.amountMax) {
      adminConditions.push(lte2(adminTransactions.amount, filters.amountMax));
      regularConditions.push(lte2(transactions.amount, filters.amountMax));
    }
    if (filters.refNo) {
      adminConditions.push(like2(adminTransactions.refNo, `%${filters.refNo}%`));
      regularConditions.push(like2(transactions.referenceNumber, `%${filters.refNo}%`));
    }
    if (filters.userId) {
      adminConditions.push(eq5(adminTransactions.userId, parseInt(filters.userId)));
      regularConditions.push(eq5(transactions.userId, parseInt(filters.userId)));
    }
    if (filters.officeId) {
      adminConditions.push(eq5(adminTransactions.officeId, parseInt(filters.officeId)));
    }
    if (filters.city) {
      adminConditions.push(
        or2(
          like2(adminTransactions.cityFrom, `%${filters.city}%`),
          like2(adminTransactions.cityTo, `%${filters.city}%`)
        )
      );
    }
    if (filters.channels && filters.channels.length > 0) {
      adminConditions.push(inArray2(adminTransactions.channel, filters.channels));
      if (!filters.channels.includes("web")) {
        regularConditions.push(sql6`1=0`);
      }
    }
    if (filters.kycLevel) {
      adminConditions.push(eq5(adminTransactions.kycLevel, parseInt(filters.kycLevel)));
    }
    if (filters.riskMin) {
      adminConditions.push(gte3(adminTransactions.riskScore, parseInt(filters.riskMin)));
    }
    if (filters.riskMax) {
      adminConditions.push(lte2(adminTransactions.riskScore, parseInt(filters.riskMax)));
    }
    if (filters.q) {
      const searchTerm = `%${filters.q}%`;
      adminConditions.push(
        or2(
          like2(adminTransactions.refNo, searchTerm),
          like2(adminTransactions.externalRef, searchTerm),
          like2(adminTransactions.notes, searchTerm),
          like2(users.fullName, searchTerm),
          like2(users.accountNumber, searchTerm),
          like2(adminTransactions.fromAccountId, searchTerm),
          like2(adminTransactions.toAccountId, searchTerm)
        )
      );
      regularConditions.push(
        or2(
          like2(transactions.referenceNumber, searchTerm),
          like2(transactions.description, searchTerm),
          like2(users.fullName, searchTerm),
          like2(users.accountNumber, searchTerm)
        )
      );
    }
    if (adminConditions.length > 0) {
      adminQuery = adminQuery.where(and4(...adminConditions));
    }
    if (regularConditions.length > 0) {
      regularQuery = db.select({
        id: transactions.id,
        refNo: transactions.referenceNumber,
        type: transactions.type,
        status: sql6`'completed'`,
        createdAt: transactions.date,
        updatedAt: transactions.date,
        executedAt: transactions.date,
        userId: transactions.userId,
        amount: transactions.amount,
        currency: transactions.currency,
        description: transactions.description,
        userName: users.fullName,
        userAccountNumber: users.accountNumber
      }).from(transactions).leftJoin(users, eq5(transactions.userId, users.id)).where(and4(...regularConditions));
    }
    console.log("\u{1F504} \u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u0627\u0633\u062A\u0639\u0644\u0627\u0645\u0627\u062A...");
    const [adminResults, regularResults] = await Promise.all([
      adminQuery,
      regularQuery
    ]);
    console.log(`\u{1F4CA} \u0627\u0644\u0646\u062A\u0627\u0626\u062C: ${adminResults.length} \u0645\u0639\u0627\u0645\u0644\u0629 \u0625\u062F\u0627\u0631\u064A\u0629\u060C ${regularResults.length} \u0645\u0639\u0627\u0645\u0644\u0629 \u0639\u0627\u062F\u064A\u0629`);
    const allResults = [
      // المعاملات الإدارية
      ...adminResults.map((r) => ({
        transaction: {
          id: r.id,
          refNo: r.refNo,
          type: r.type,
          status: r.status,
          createdAt: r.createdAt,
          updatedAt: r.updatedAt,
          executedAt: r.executedAt,
          userId: r.userId,
          fromAccountId: r.fromAccountId,
          toAccountId: r.toAccountId,
          amount: r.amount,
          currency: r.currency,
          netAmount: r.netAmount,
          feeSystem: r.feeSystem,
          feeRecipient: r.feeRecipient,
          channel: r.channel,
          kycLevel: r.kycLevel,
          riskScore: r.riskScore,
          flags: r.flags,
          parentTxnId: r.parentTxnId,
          externalProvider: r.externalProvider,
          externalRef: r.externalRef,
          notes: r.notes,
          meta: r.meta,
          cityFrom: r.cityFrom,
          cityTo: r.cityTo,
          officeId: r.officeId
        },
        userName: r.userName,
        userAccountNumber: r.userAccountNumber,
        source: "admin"
      })),
      // المعاملات العادية (محولة لنفس التنسيق)
      ...regularResults.map((r) => ({
        transaction: {
          id: r.id,
          refNo: r.refNo,
          type: r.type,
          status: r.status || "completed",
          createdAt: r.createdAt,
          updatedAt: r.updatedAt,
          executedAt: r.executedAt,
          userId: r.userId,
          fromAccountId: null,
          toAccountId: null,
          amount: r.amount,
          currency: r.currency,
          netAmount: r.amount,
          feeSystem: null,
          feeRecipient: null,
          channel: "web",
          kycLevel: null,
          riskScore: null,
          flags: null,
          parentTxnId: null,
          externalProvider: null,
          externalRef: null,
          notes: r.description,
          meta: null,
          cityFrom: null,
          cityTo: null,
          officeId: null
        },
        userName: r.userName,
        userAccountNumber: r.userAccountNumber,
        source: "regular"
      }))
    ];
    const sortField = filters.sortBy || "created_at";
    const sortOrder = filters.sortOrder || "desc";
    allResults.sort((a, b) => {
      let aValue, bValue;
      switch (sortField) {
        case "amount":
          aValue = parseFloat(a.transaction.amount || "0");
          bValue = parseFloat(b.transaction.amount || "0");
          break;
        case "executed_at":
          aValue = a.transaction.executedAt ? new Date(a.transaction.executedAt).getTime() : 0;
          bValue = b.transaction.executedAt ? new Date(b.transaction.executedAt).getTime() : 0;
          break;
        case "ref_no":
          aValue = a.transaction.refNo || "";
          bValue = b.transaction.refNo || "";
          break;
        case "status":
          aValue = a.transaction.status || "";
          bValue = b.transaction.status || "";
          break;
        case "type":
          aValue = a.transaction.type || "";
          bValue = b.transaction.type || "";
          break;
        default:
          aValue = a.transaction.createdAt ? new Date(a.transaction.createdAt).getTime() : 0;
          bValue = b.transaction.createdAt ? new Date(b.transaction.createdAt).getTime() : 0;
      }
      if (typeof aValue === "string" && typeof bValue === "string") {
        return sortOrder === "desc" ? bValue.localeCompare(aValue) : aValue.localeCompare(bValue);
      } else {
        return sortOrder === "desc" ? bValue - aValue : aValue - bValue;
      }
    });
    const totalCount = allResults.length;
    const results = allResults.slice(offset, offset + pageSize);
    console.log(`\u{1F4CB} \u0625\u062C\u0645\u0627\u0644\u064A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A: ${totalCount}\u060C \u0627\u0644\u0646\u062A\u0627\u0626\u062C \u0627\u0644\u0645\u0639\u0631\u0648\u0636\u0629: ${results.length}`);
    const summary = {
      totalCount,
      totalAmount: "0",
      totalNet: "0",
      byStatus: {},
      byCurrency: {}
    };
    let totalAmount = 0;
    let totalNet = 0;
    allResults.forEach((result) => {
      const transaction = result.transaction;
      const amount = parseFloat(transaction.amount || "0");
      const netAmount = parseFloat(transaction.netAmount || transaction.amount || "0");
      const status = transaction.status || "completed";
      const currency = transaction.currency || "LYD";
      totalAmount += amount;
      totalNet += netAmount;
      summary.byStatus[status] = (summary.byStatus[status] || 0) + 1;
      if (!summary.byCurrency[currency]) {
        summary.byCurrency[currency] = { count: 0, amount: "0", net: "0" };
      }
      summary.byCurrency[currency].count += 1;
      summary.byCurrency[currency].amount = (parseFloat(summary.byCurrency[currency].amount) + amount).toString();
      summary.byCurrency[currency].net = (parseFloat(summary.byCurrency[currency].net) + netAmount).toString();
    });
    summary.totalAmount = totalAmount.toString();
    summary.totalNet = totalNet.toString();
    console.log(`\u{1F4CA} \u0645\u0644\u062E\u0635 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A: \u0625\u062C\u0645\u0627\u0644\u064A ${totalCount}\u060C \u0645\u0628\u0644\u063A ${totalAmount}`);
    const rows = results.map((row) => ({
      id: row.transaction.id,
      refNo: row.transaction.refNo,
      type: row.transaction.type,
      status: row.transaction.status,
      createdAt: row.transaction.createdAt?.toISOString() || "",
      updatedAt: row.transaction.updatedAt?.toISOString() || "",
      executedAt: row.transaction.executedAt?.toISOString(),
      fromAccountId: row.transaction.fromAccountId,
      toAccountId: row.transaction.toAccountId,
      userId: row.transaction.userId,
      officeId: row.transaction.officeId,
      cityFrom: row.transaction.cityFrom,
      cityTo: row.transaction.cityTo,
      currency: row.transaction.currency,
      amount: row.transaction.amount,
      rate: row.transaction.rate,
      feeSystem: row.transaction.feeSystem,
      feeRecipient: row.transaction.feeRecipient,
      netAmount: row.transaction.netAmount,
      channel: row.transaction.channel,
      createdBy: row.transaction.createdBy,
      approvedBy: row.transaction.approvedBy,
      kycLevel: row.transaction.kycLevel,
      riskScore: row.transaction.riskScore,
      flags: row.transaction.flags,
      parentTxnId: row.transaction.parentTxnId,
      externalProvider: row.transaction.externalProvider,
      externalRef: row.transaction.externalRef,
      notes: row.transaction.notes,
      meta: row.transaction.meta,
      userName: row.userName || `\u0645\u0633\u062A\u062E\u062F\u0645 ${row.transaction.userId}`,
      fromAccountName: row.transaction.fromAccountId,
      toAccountName: row.transaction.toAccountId
    }));
    return {
      rows,
      summary,
      pagination: {
        page,
        pageSize,
        total: totalCount,
        totalPages: Math.ceil(totalCount / pageSize),
        hasNext: offset + pageSize < totalCount,
        hasPrevious: page > 1
      }
    };
  }
  // جلب معاملة واحدة بالتفصيل
  static async getTransactionById(id) {
    const result = await db.select({
      transaction: adminTransactions,
      userName: users.fullName,
      userAccountNumber: users.accountNumber
    }).from(adminTransactions).leftJoin(users, eq5(adminTransactions.userId, users.id)).where(eq5(adminTransactions.id, id)).limit(1);
    if (result.length === 0) {
      return null;
    }
    const row = result[0];
    return {
      id: row.transaction.id,
      refNo: row.transaction.refNo,
      type: row.transaction.type,
      status: row.transaction.status,
      createdAt: row.transaction.createdAt?.toISOString() || "",
      updatedAt: row.transaction.updatedAt?.toISOString() || "",
      executedAt: row.transaction.executedAt?.toISOString(),
      fromAccountId: row.transaction.fromAccountId,
      toAccountId: row.transaction.toAccountId,
      userId: row.transaction.userId,
      officeId: row.transaction.officeId,
      cityFrom: row.transaction.cityFrom,
      cityTo: row.transaction.cityTo,
      currency: row.transaction.currency,
      amount: row.transaction.amount,
      rate: row.transaction.rate,
      feeSystem: row.transaction.feeSystem,
      feeRecipient: row.transaction.feeRecipient,
      netAmount: row.transaction.netAmount,
      channel: row.transaction.channel,
      createdBy: row.transaction.createdBy,
      approvedBy: row.transaction.approvedBy,
      kycLevel: row.transaction.kycLevel,
      riskScore: row.transaction.riskScore,
      flags: row.transaction.flags,
      parentTxnId: row.transaction.parentTxnId,
      externalProvider: row.transaction.externalProvider,
      externalRef: row.transaction.externalRef,
      notes: row.transaction.notes,
      meta: row.transaction.meta,
      userName: row.userName || `\u0645\u0633\u062A\u062E\u062F\u0645 ${row.transaction.userId}`,
      fromAccountName: row.transaction.fromAccountId,
      toAccountName: row.transaction.toAccountId
    };
  }
  // تحديث معاملة
  static async updateTransaction(id, updates) {
    const [updatedTransaction] = await db.update(adminTransactions).set({
      ...updates,
      updatedAt: /* @__PURE__ */ new Date()
    }).where(eq5(adminTransactions.id, id)).returning();
    return updatedTransaction;
  }
  // إحصائيات سريعة للوحة التحكم
  static async getDashboardStats(timeframe = "day") {
    const now = /* @__PURE__ */ new Date();
    let startDate;
    switch (timeframe) {
      case "week":
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1e3);
        break;
      case "month":
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1e3);
        break;
      default:
        startDate = new Date(now.getTime() - 24 * 60 * 60 * 1e3);
    }
    const stats = await db.select({
      count: sql6`count(*)`,
      totalAmount: sql6`sum(${adminTransactions.amount})`,
      totalNet: sql6`sum(${adminTransactions.netAmount})`,
      status: adminTransactions.status,
      type: adminTransactions.type
    }).from(adminTransactions).where(gte3(adminTransactions.createdAt, startDate)).groupBy(adminTransactions.status, adminTransactions.type);
    return stats;
  }
  // البحث عن التكرار (للكشف عن المعاملات المشبوهة)
  static async findDuplicateTransactions(timeWindow = 5) {
    const timeThreshold = new Date(Date.now() - timeWindow * 60 * 1e3);
    const duplicates = await db.select({
      amount: adminTransactions.amount,
      currency: adminTransactions.currency,
      fromAccountId: adminTransactions.fromAccountId,
      toAccountId: adminTransactions.toAccountId,
      count: sql6`count(*)`
    }).from(adminTransactions).where(
      and4(
        gte3(adminTransactions.createdAt, timeThreshold),
        inArray2(adminTransactions.status, ["PENDING" /* PENDING */, "SUCCESS" /* SUCCESS */])
      )
    ).groupBy(
      adminTransactions.amount,
      adminTransactions.currency,
      adminTransactions.fromAccountId,
      adminTransactions.toAccountId
    ).having(sql6`count(*) > 1`);
    return duplicates;
  }
};

// server/unified-admin-transactions.ts
init_db();
import { sql as sql7 } from "drizzle-orm";
var UnifiedAdminTransactions = class {
  static async getAllTransactions(filters = {}) {
    const page = filters.page || 1;
    const pageSize = filters.pageSize || 50;
    const offset = (page - 1) * pageSize;
    console.log("\u{1F50D} \u062C\u0644\u0628 \u062C\u0645\u064A\u0639 \u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646 \u0645\u0646 \u062C\u0645\u064A\u0639 \u0627\u0644\u062C\u062F\u0627\u0648\u0644...");
    try {
      console.log("\u{1F4CA} \u062A\u0646\u0641\u064A\u0630 \u0627\u0633\u062A\u0639\u0644\u0627\u0645\u0627\u062A \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0648\u0627\u0644\u0639\u062F...");
      const [dataResult, countResult] = await Promise.all([
        db.execute(sql7`
          WITH all_transactions AS (
            -- 1. المعاملات الإدارية
            SELECT 
              'admin' as source,
              at.id::text as id,
              COALESCE(at.ref_no, 'ADM-' || at.id) as ref_no,
              at.type,
              COALESCE(at.status, 'completed') as status,
              at.created_at,
              COALESCE(at.amount::text, '0') as amount,
              COALESCE(at.currency, 'LYD') as currency,
              COALESCE(at.notes, '') as description,
              COALESCE(u.full_name, 'غير محدد') as user_name,
              COALESCE(u.account_number, '') as user_account_number
            FROM admin_transactions at
            LEFT JOIN users u ON at.user_id = u.id
            
            UNION ALL
            
            -- 2. المعاملات العادية
            SELECT 
              'regular' as source,
              t.id::text as id,
              COALESCE(t.reference_number, 'TX-' || t.id) as ref_no,
              COALESCE(t.type, 'unknown') as type,
              'completed' as status,
              t.date as created_at,
              COALESCE(t.amount::text, '0') as amount,
              COALESCE(t.currency, 'LYD') as currency,
              COALESCE(t.description, '') as description,
              COALESCE(u.full_name, 'غير محدد') as user_name,
              COALESCE(u.account_number, '') as user_account_number
            FROM transactions t
            LEFT JOIN users u ON t.user_id = u.id
            
            UNION ALL
            
            -- 3. التحويلات الداخلية (المرسلة)
            SELECT 
              'internal_transfer' as source,
              tr.id::text as id,
              'TR-' || tr.id as ref_no,
              'internal_transfer_out' as type,
              'completed' as status,
              tr.created_at,
              COALESCE(tr.amount::text, '0') as amount,
              COALESCE(tr.currency, 'LYD') as currency,
              'تحويل داخلي صادر إلى ' || COALESCE(ur.full_name, 'غير محدد') || ' (رقم الحساب: ' || COALESCE(ur.account_number, '') || ')' as description,
              COALESCE(us.full_name, 'غير محدد') as user_name,
              COALESCE(us.account_number, '') as user_account_number
            FROM transfers tr
            LEFT JOIN users us ON tr.sender_id = us.id
            LEFT JOIN users ur ON tr.receiver_id = ur.id
            
            UNION ALL
            
            -- 4. التحويلات الداخلية (المستلمة)
            SELECT 
              'internal_transfer' as source,
              tr.id::text as id,
              'TR-' || tr.id || '-IN' as ref_no,
              'internal_transfer_in' as type,
              'completed' as status,
              tr.created_at,
              COALESCE(tr.amount::text, '0') as amount,
              COALESCE(tr.currency, 'LYD') as currency,
              'تحويل داخلي وارد من ' || COALESCE(us.full_name, 'غير محدد') || ' (رقم الحساب: ' || COALESCE(us.account_number, '') || ')' as description,
              COALESCE(ur.full_name, 'غير محدد') as user_name,
              COALESCE(ur.account_number, '') as user_account_number
            FROM transfers tr
            LEFT JOIN users us ON tr.sender_id = us.id
            LEFT JOIN users ur ON tr.receiver_id = ur.id
            
            UNION ALL
            
            -- 5. التحويلات الدولية/بين المكاتب
            SELECT 
              'international' as source,
              iot.id::text as id,
              COALESCE(iot.transfer_code, 'IO-' || iot.id) as ref_no,
              'international_transfer' as type,
              COALESCE(iot.status, 'pending') as status,
              iot.created_at,
              COALESCE(iot.amount::text, '0') as amount,
              COALESCE(iot.currency, 'LYD') as currency,
              'تحويل دولي إلى ' || COALESCE(iot.recipient_name, 'غير محدد') || ' - ' || COALESCE(iot.country, 'غير محدد') as description,
              COALESCE(u.full_name, 'غير محدد') as user_name,
              COALESCE(u.account_number, '') as user_account_number
            FROM agent_transfers iot
            LEFT JOIN users u ON iot.sender_id = u.id
            
            UNION ALL
            
            -- 6. تحويلات المدن
            SELECT 
              'city_transfer' as source,
              ct.id::text as id,
              'CT-' || ct.id as ref_no,
              'city_transfer' as type,
              COALESCE(ct.status, 'pending') as status,
              ct.created_at,
              COALESCE(ct.amount::text, '0') as amount,
              COALESCE(ct.currency, 'LYD') as currency,
              'تحويل بين المدن إلى ' || COALESCE(ur.full_name, 'مكتب غير محدد') as description,
              COALESCE(us.full_name, 'غير محدد') as user_name,
              COALESCE(us.account_number, '') as user_account_number
            FROM city_transfers ct
            LEFT JOIN users us ON ct.sender_id = us.id
            LEFT JOIN users ur ON ct.receiver_office_id = ur.id
            
            UNION ALL
            
            -- 7. معاملات السوق
            SELECT 
              'market' as source,
              mt.id::text as id,
              'MK-' || mt.id as ref_no,
              'market_trade' as type,
              'completed' as status,
              mt.created_at,
              COALESCE(mt.amount::text, '0') as amount,
              'USD' as currency,
              'معاملة سوق العملات - إجمالي التكلفة: ' || COALESCE(mt.total_cost::text, '0') || ' - عمولة: ' || COALESCE(mt.commission::text, '0') as description,
              COALESCE(u.full_name, 'غير محدد') as user_name,
              COALESCE(u.account_number, '') as user_account_number
            FROM market_transactions mt
            LEFT JOIN users u ON mt.buyer_id = u.id
          )
          SELECT 
            source,
            id,
            ref_no,
            type,
            status,
            created_at,
            amount,
            currency,
            description,
            user_name,
            user_account_number
          FROM all_transactions 
          WHERE 1=1 
          ${filters.dateFrom && filters.dateTo ? sql7`AND created_at BETWEEN ${filters.dateFrom} AND ${filters.dateTo + " 23:59:59"}` : sql7``}
          ${filters.dateFrom && !filters.dateTo ? sql7`AND created_at >= ${filters.dateFrom}` : sql7``}
          ${!filters.dateFrom && filters.dateTo ? sql7`AND created_at <= ${filters.dateTo + " 23:59:59"}` : sql7``}
          ${filters.q ? sql7`AND (
            ref_no ILIKE ${"%" + filters.q + "%"} OR 
            description ILIKE ${"%" + filters.q + "%"} OR 
            user_name ILIKE ${"%" + filters.q + "%"} OR 
            user_account_number ILIKE ${"%" + filters.q + "%"}
          )` : sql7``}
          ORDER BY created_at DESC
          LIMIT ${pageSize} OFFSET ${offset}
        `),
        db.execute(sql7`
          SELECT COUNT(*) as total FROM (
            SELECT at.created_at, COALESCE(at.ref_no, 'ADM-' || at.id) as ref_no, COALESCE(at.notes, '') as description, COALESCE(u.full_name, 'غير محدد') as user_name, COALESCE(u.account_number, '') as user_account_number
            FROM admin_transactions at LEFT JOIN users u ON at.user_id = u.id
            UNION ALL
            SELECT t.date as created_at, COALESCE(t.reference_number, 'TX-' || t.id) as ref_no, COALESCE(t.description, '') as description, COALESCE(u.full_name, 'غير محدد') as user_name, COALESCE(u.account_number, '') as user_account_number
            FROM transactions t LEFT JOIN users u ON t.user_id = u.id
            UNION ALL
            SELECT tr.created_at, 'TR-' || tr.id as ref_no, 'تحويل داخلي صادر' as description, COALESCE(us.full_name, 'غير محدد') as user_name, COALESCE(us.account_number, '') as user_account_number
            FROM transfers tr LEFT JOIN users us ON tr.sender_id = us.id
            UNION ALL
            SELECT tr.created_at, 'TR-' || tr.id || '-IN' as ref_no, 'تحويل داخلي وارد' as description, COALESCE(ur.full_name, 'غير محدد') as user_name, COALESCE(ur.account_number, '') as user_account_number
            FROM transfers tr LEFT JOIN users ur ON tr.receiver_id = ur.id
            UNION ALL
            SELECT iot.created_at, COALESCE(iot.transfer_code, 'IO-' || iot.id) as ref_no, 'تحويل دولي' as description, COALESCE(u.full_name, 'غير محدد') as user_name, COALESCE(u.account_number, '') as user_account_number
            FROM agent_transfers iot LEFT JOIN users u ON iot.sender_id = u.id
            UNION ALL
            SELECT ct.created_at, 'CT-' || ct.id as ref_no, 'تحويل بين المدن' as description, COALESCE(us.full_name, 'غير محدد') as user_name, COALESCE(us.account_number, '') as user_account_number
            FROM city_transfers ct LEFT JOIN users us ON ct.sender_id = us.id
            UNION ALL
            SELECT mt.created_at, 'MK-' || mt.id as ref_no, 'معاملة سوق' as description, COALESCE(u.full_name, 'غير محدد') as user_name, COALESCE(u.account_number, '') as user_account_number
            FROM market_transactions mt LEFT JOIN users u ON mt.buyer_id = u.id
          ) all_transactions
          WHERE 1=1 
          ${filters.dateFrom && filters.dateTo ? sql7`AND created_at BETWEEN ${filters.dateFrom} AND ${filters.dateTo + " 23:59:59"}` : sql7``}
          ${filters.dateFrom && !filters.dateTo ? sql7`AND created_at >= ${filters.dateFrom}` : sql7``}
          ${!filters.dateFrom && filters.dateTo ? sql7`AND created_at <= ${filters.dateTo + " 23:59:59"}` : sql7``}
          ${filters.q ? sql7`AND (
            ref_no ILIKE ${"%" + filters.q + "%"} OR 
            description ILIKE ${"%" + filters.q + "%"} OR 
            user_name ILIKE ${"%" + filters.q + "%"} OR 
            user_account_number ILIKE ${"%" + filters.q + "%"}
          )` : sql7``}
        `)
      ]);
      const results = Array.isArray(dataResult) ? dataResult : dataResult.rows || [];
      const totalCount = Array.isArray(countResult) ? countResult[0]?.total || 0 : countResult.rows?.[0]?.total || 0;
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${results.length} \u0645\u0639\u0627\u0645\u0644\u0629 \u0645\u0646 \u0623\u0635\u0644 ${totalCount}`);
      let totalAmount = 0;
      const byCurrency = {};
      results.forEach((row) => {
        const amount = parseFloat(row.amount || "0");
        const currency = row.currency || "LYD";
        totalAmount += Math.abs(amount);
        if (!byCurrency[currency]) {
          byCurrency[currency] = { count: 0, amount: "0" };
        }
        byCurrency[currency].count += 1;
        byCurrency[currency].amount = (parseFloat(byCurrency[currency].amount) + Math.abs(amount)).toString();
      });
      const summary = {
        totalCount: Number(totalCount),
        totalAmount: totalAmount.toString(),
        byCurrency
      };
      const formattedResults = results.map((row) => ({
        id: row.id,
        refNo: row.ref_no,
        type: row.type,
        status: row.status,
        createdAt: row.created_at,
        amount: row.amount,
        currency: row.currency,
        description: row.description,
        userName: row.user_name,
        userAccountNumber: row.user_account_number,
        source: row.source
      }));
      const totalPages = Math.ceil(Number(totalCount) / pageSize);
      return {
        rows: formattedResults,
        summary,
        pagination: {
          page,
          pageSize,
          total: Number(totalCount),
          totalPages,
          hasNext: page < totalPages,
          hasPrevious: page > 1
        }
      };
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0645\u0648\u062D\u062F\u0629:", error);
      return {
        rows: [],
        summary: {
          totalCount: 0,
          totalAmount: "0",
          byCurrency: {}
        },
        pagination: {
          page: 1,
          pageSize,
          total: 0,
          totalPages: 0,
          hasNext: false,
          hasPrevious: false
        }
      };
    }
  }
};

// server/admin-transaction-routes.ts
init_db();
async function generateTransactionsCSV(transactions2) {
  if (transactions2.length === 0) {
    return "";
  }
  const headers = [
    "\u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A",
    "\u0627\u0644\u0646\u0648\u0639",
    "\u0627\u0644\u062D\u0627\u0644\u0629",
    "\u062A\u0627\u0631\u064A\u062E \u0627\u0644\u0625\u0646\u0634\u0627\u0621",
    "\u062A\u0627\u0631\u064A\u062E \u0627\u0644\u062A\u0646\u0641\u064A\u0630",
    "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645",
    "\u0645\u0646 \u062D\u0633\u0627\u0628",
    "\u0625\u0644\u0649 \u062D\u0633\u0627\u0628",
    "\u0627\u0644\u0645\u0628\u0644\u063A",
    "\u0627\u0644\u0639\u0645\u0644\u0629",
    "\u0635\u0627\u0641\u064A \u0627\u0644\u0645\u0628\u0644\u063A",
    "\u0627\u0644\u0639\u0645\u0648\u0644\u0629",
    "\u0627\u0644\u0642\u0646\u0627\u0629",
    "\u0645\u0633\u062A\u0648\u0649 KYC",
    "\u062F\u0631\u062C\u0629 \u0627\u0644\u0645\u062E\u0627\u0637\u0631\u0629",
    "\u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0627\u062A"
  ];
  const csvRows = [headers.join(",")];
  for (const tx of transactions2) {
    const row = [
      `"${tx.refNo || ""}"`,
      `"${tx.type || ""}"`,
      `"${tx.status || ""}"`,
      `"${tx.createdAt || ""}"`,
      `"${tx.executedAt || ""}"`,
      `"${tx.userName || ""}"`,
      `"${tx.fromAccountId || ""}"`,
      `"${tx.toAccountId || ""}"`,
      `"${tx.amount || "0"}"`,
      `"${tx.currency || ""}"`,
      `"${tx.netAmount || "0"}"`,
      `"${tx.feeSystem || "0"}"`,
      `"${tx.channel || ""}"`,
      `"${tx.kycLevel || ""}"`,
      `"${tx.riskScore || ""}"`,
      `"${tx.notes || ""}"`
    ];
    csvRows.push(row.join(","));
  }
  return csvRows.join("\n");
}
async function generateTransactionsPDF(transactions2) {
  const { PDFDocument, rgb, StandardFonts } = await import("pdf-lib");
  try {
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([612, 792]);
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const fontSize = 10;
    const lineHeight = 14;
    let yPosition = 750;
    const margin = 50;
    page.drawText("\u062A\u0642\u0631\u064A\u0631 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A - \u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629", {
      x: margin,
      y: yPosition,
      size: 16,
      font,
      color: rgb(0, 0, 0)
    });
    yPosition -= 30;
    const currentDate = (/* @__PURE__ */ new Date()).toLocaleDateString("ar-EG");
    page.drawText(`\u062A\u0627\u0631\u064A\u062E \u0627\u0644\u062A\u0642\u0631\u064A\u0631: ${currentDate}`, {
      x: margin,
      y: yPosition,
      size: fontSize,
      font,
      color: rgb(0.3, 0.3, 0.3)
    });
    yPosition -= 20;
    page.drawText(`\u0639\u062F\u062F \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A: ${transactions2.length}`, {
      x: margin,
      y: yPosition,
      size: fontSize,
      font,
      color: rgb(0.3, 0.3, 0.3)
    });
    yPosition -= 30;
    const headers = ["ID", "Reference", "Type", "Status", "Date", "Amount", "Currency", "User", "Source"];
    let xPosition = margin;
    const columnWidth = (612 - 2 * margin) / headers.length;
    headers.forEach((header, index2) => {
      page.drawText(header, {
        x: xPosition + index2 * columnWidth,
        y: yPosition,
        size: fontSize,
        font,
        color: rgb(0, 0, 0)
      });
    });
    yPosition -= lineHeight;
    page.drawLine({
      start: { x: margin, y: yPosition },
      end: { x: 612 - margin, y: yPosition },
      thickness: 1,
      color: rgb(0, 0, 0)
    });
    yPosition -= 10;
    transactions2.forEach((tx, index2) => {
      if (yPosition < 80) {
        const newPage = pdfDoc.addPage([612, 792]);
        yPosition = 750;
        headers.forEach((header, headerIndex) => {
          newPage.drawText(header, {
            x: margin + headerIndex * columnWidth,
            y: yPosition,
            size: fontSize,
            font,
            color: rgb(0, 0, 0)
          });
        });
        yPosition -= lineHeight + 10;
      }
      const rowData = [
        tx.id?.toString().substring(0, 8) || "",
        tx.refNo?.substring(0, 10) || "",
        tx.type?.substring(0, 12) || "",
        tx.status?.substring(0, 10) || "",
        tx.createdAt?.substring(0, 10) || "",
        `${tx.amount || "0"}`,
        tx.currency || "",
        tx.userName?.substring(0, 15) || "",
        tx.source?.substring(0, 8) || ""
      ];
      rowData.forEach((cellData, colIndex) => {
        const currentPage = pdfDoc.getPageCount() > 1 ? pdfDoc.getPage(pdfDoc.getPageCount() - 1) : page;
        currentPage.drawText(cellData, {
          x: margin + colIndex * columnWidth,
          y: yPosition,
          size: fontSize,
          font,
          color: rgb(0.2, 0.2, 0.2)
        });
      });
      yPosition -= lineHeight;
    });
    const pdfBytes = await pdfDoc.save();
    return Buffer.from(pdfBytes);
  } catch (error) {
    console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 PDF:", error);
    const csvContent = await generateTransactionsCSV(transactions2);
    return Buffer.from(csvContent, "utf-8");
  }
}
function registerAdminTransactionRoutes(app2, authMiddleware2, storage4) {
  const isAdmin = async (req, res, next) => {
    try {
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644" });
      }
      const user = await storage4.getUser(userId);
      if (user?.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      next();
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0635\u0644\u0627\u062D\u064A\u0627\u062A \u0627\u0644\u0623\u062F\u0645\u0646:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  };
  app2.get("/api/admin/transactions", authMiddleware2, isAdmin, async (req, res) => {
    try {
      const filters = {
        dateFrom: req.query.dateFrom,
        dateTo: req.query.dateTo,
        useExecutedAt: req.query.useExecutedAt === "true",
        types: req.query.type ? Array.isArray(req.query.type) ? req.query.type : [req.query.type] : [],
        statuses: req.query.status ? Array.isArray(req.query.status) ? req.query.status : [req.query.status] : [],
        currencies: req.query.currency ? Array.isArray(req.query.currency) ? req.query.currency : [req.query.currency] : [],
        amountMin: req.query.amountMin,
        amountMax: req.query.amountMax,
        refNo: req.query.ref_no,
        userId: req.query.user_id,
        officeId: req.query.office_id,
        city: req.query.city,
        channels: req.query.channel ? Array.isArray(req.query.channel) ? req.query.channel : [req.query.channel] : [],
        kycLevel: req.query.kyc_level,
        riskMin: req.query.risk_min,
        riskMax: req.query.risk_max,
        flags: req.query.flags ? Array.isArray(req.query.flags) ? req.query.flags : [req.query.flags] : [],
        q: req.query.q,
        page: parseInt(req.query.page) || 1,
        pageSize: parseInt(req.query.pageSize) || 50,
        sortBy: req.query.sortBy || "created_at",
        sortOrder: req.query.sortOrder || "desc"
      };
      const simpleFilters = {
        dateFrom: filters.dateFrom,
        dateTo: filters.dateTo,
        q: filters.q,
        page: filters.page,
        pageSize: filters.pageSize
      };
      const result = await UnifiedAdminTransactions.getAllTransactions(simpleFilters);
      res.json(result);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0644\u0644\u0623\u062F\u0645\u0646:", error);
      res.status(500).json({ error: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/admin/transactions/:id", authMiddleware2, isAdmin, async (req, res) => {
    try {
      const transaction = await AdminTransactionService.getTransactionById(req.params.id);
      if (!transaction) {
        return res.status(404).json({ error: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      res.json(transaction);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:", error);
      res.status(500).json({ error: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629" });
    }
  });
  app2.patch("/api/admin/transactions/:id", authMiddleware2, isAdmin, async (req, res) => {
    try {
      const updates = req.body;
      const updatedTransaction = await AdminTransactionService.updateTransaction(req.params.id, updates);
      if (!updatedTransaction) {
        return res.status(404).json({ error: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      res.json(updatedTransaction);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:", error);
      res.status(500).json({ error: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629" });
    }
  });
  app2.get("/api/admin/transactions/:id/receipt", authMiddleware2, isAdmin, async (req, res) => {
    try {
      const transaction = await AdminTransactionService.getTransactionById(req.params.id);
      if (!transaction) {
        return res.status(404).json({ error: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      let internationalTransferData = null;
      if (transaction.type === "OFFICE_REMIT" /* OFFICE_REMIT */) {
        const result = await pool.query(`
          SELECT 
            at.*,
            sender.full_name as sender_name,
            sender.account_number as sender_account,
            dest_agent.full_name as dest_agent_name,
            dest_agent.account_number as dest_agent_account
          FROM agent_transfers at
          LEFT JOIN users sender ON at.sender_id = sender.id
          LEFT JOIN users dest_agent ON at.destination_agent_id = dest_agent.id
          WHERE at.id = $1
          LIMIT 1
        `, [req.params.id]);
        if (result.rows.length > 0) {
          internationalTransferData = result.rows[0];
        }
      }
      const receiptHtml = `
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>\u0625\u064A\u0635\u0627\u0644 \u0645\u0639\u0627\u0645\u0644\u0629 - ${transaction.refNo}</title>
          <style>
            @page {
              size: 72mm 96mm;
              margin: 2mm;
            }
            
            * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
            }
            
            body {
              font-family: 'Arial', sans-serif;
              font-size: 12px;
              line-height: 1.3;
              color: #000;
              background: white;
              width: 68mm;
              padding: 2mm;
            }
            
            .header {
              text-align: center;
              border-bottom: 2px solid #000;
              padding-bottom: 3mm;
              margin-bottom: 3mm;
            }
            
            .logo {
              font-size: 16px;
              font-weight: bold;
              margin-bottom: 1mm;
            }
            
            .receipt-info {
              margin-bottom: 3mm;
              text-align: center;
            }
            
            .row {
              display: flex;
              justify-content: space-between;
              margin-bottom: 1mm;
              padding: 0.5mm 0;
            }
            
            .row.border-bottom {
              border-bottom: 1px solid #ddd;
              padding-bottom: 1mm;
              margin-bottom: 2mm;
            }
            
            .label {
              font-weight: bold;
            }
            
            .value {
              text-align: left;
            }
            
            .amount-section {
              background: #f9f9f9;
              padding: 2mm;
              margin: 2mm 0;
              border: 1px solid #ddd;
            }
            
            .footer {
              text-align: center;
              margin-top: 3mm;
              padding-top: 2mm;
              border-top: 1px solid #000;
              font-size: 10px;
            }
            
            .qr-code {
              text-align: center;
              margin: 2mm 0;
            }
            
            .status-badge {
              display: inline-block;
              padding: 1mm 2mm;
              border-radius: 2mm;
              font-size: 10px;
              font-weight: bold;
            }
            
            .status-success { background: #d4edda; color: #155724; }
            .status-pending { background: #fff3cd; color: #856404; }
            .status-failed { background: #f8d7da; color: #721c24; }
            
            @media print {
              body { print-color-adjust: exact; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="logo">\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629</div>
            <div style="font-size: 10px;">\u0625\u064A\u0635\u0627\u0644 \u0645\u0639\u0627\u0645\u0644\u0629 \u0631\u0642\u0645\u064A</div>
          </div>
          
          <div class="receipt-info">
            <div style="font-weight: bold; margin-bottom: 1mm;">${transaction.refNo}</div>
            <div class="status-badge status-${transaction.status.toLowerCase()}">
              ${transaction.status === "SUCCESS" ? "\u0646\u062C\u062D\u062A" : transaction.status === "PENDING" ? "\u0645\u0639\u0644\u0642\u0629" : transaction.status === "FAILED" ? "\u0641\u0634\u0644\u062A" : transaction.status}
            </div>
          </div>
          
          <div class="row border-bottom">
            <span class="label">\u0627\u0644\u0646\u0648\u0639:</span>
            <span class="value">
              ${transaction.type === "INTERNAL_TRANSFER" /* INTERNAL_TRANSFER */ ? "\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A" : transaction.type === "OFFICE_REMIT" /* OFFICE_REMIT */ ? "\u062A\u062D\u0648\u064A\u0644 \u062F\u0648\u0644\u064A \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628" : transaction.type === "SALE" /* SALE */ ? "\u0628\u064A\u0639" : transaction.type === "PURCHASE" /* PURCHASE */ ? "\u0634\u0631\u0627\u0621" : transaction.type === "EXTERNAL_REMIT" /* EXTERNAL_REMIT */ ? "\u062D\u0648\u0627\u0644\u0629 \u062E\u0627\u0631\u062C\u064A\u0629" : transaction.type === "DEPOSIT" /* DEPOSIT */ ? "\u0625\u064A\u062F\u0627\u0639" : transaction.type === "WITHDRAW" /* WITHDRAW */ ? "\u0633\u062D\u0628" : transaction.type === "FEE" /* FEE */ ? "\u0639\u0645\u0648\u0644\u0629" : transaction.type === "ADJUSTMENT" /* ADJUSTMENT */ ? "\u062A\u0633\u0648\u064A\u0629" : transaction.type}
            </span>
          </div>
          
          <div class="row">
            <span class="label">\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:</span>
            <span class="value">${transaction.userName || transaction.userId}</span>
          </div>
          
          ${transaction.fromAccountId ? `
          <div class="row">
            <span class="label">\u0645\u0646 \u062D\u0633\u0627\u0628:</span>
            <span class="value">${transaction.fromAccountId}</span>
          </div>
          ` : ""}
          
          ${transaction.toAccountId ? `
          <div class="row">
            <span class="label">\u0625\u0644\u0649 \u062D\u0633\u0627\u0628:</span>
            <span class="value">${transaction.toAccountId}</span>
          </div>
          ` : ""}

          ${internationalTransferData ? `
          <div style="margin-top: 3mm; padding-top: 2mm; border-top: 1px solid #ddd;">
            <div style="font-weight: bold; margin-bottom: 2mm; text-align: center;">\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A</div>
            
            <div class="row">
              <span class="label">\u0627\u0644\u0648\u0643\u064A\u0644 \u0627\u0644\u0645\u0633\u062A\u0644\u0645:</span>
              <span class="value">${internationalTransferData.dest_agent_name || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</span>
            </div>
            
            <div class="row">
              <span class="label">\u0627\u0644\u0645\u0633\u062A\u0641\u064A\u062F:</span>
              <span class="value">${internationalTransferData.recipient_name || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</span>
            </div>
            
            <div class="row">
              <span class="label">\u0647\u0627\u062A\u0641 \u0627\u0644\u0645\u0633\u062A\u0641\u064A\u062F:</span>
              <span class="value">${internationalTransferData.recipient_phone || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</span>
            </div>
            
            <div class="row">
              <span class="label">\u0627\u0644\u0628\u0644\u062F \u0627\u0644\u0645\u0642\u0635\u0648\u062F:</span>
              <span class="value">${internationalTransferData.country === "AU" ? "\u0623\u0633\u062A\u0631\u0627\u0644\u064A\u0627" : internationalTransferData.country === "DE" ? "\u0623\u0644\u0645\u0627\u0646\u064A\u0627" : internationalTransferData.country === "TR" ? "\u062A\u0631\u0643\u064A\u0627" : internationalTransferData.country || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</span>
            </div>
            
            <!-- \u0631\u0645\u0632 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0634\u0643\u0644 \u0628\u0627\u0631\u0632 -->
            <div style="background: #f0f8ff; border: 2px solid #0066cc; padding: 3mm; margin: 2mm 0; text-align: center; border-radius: 3mm;">
              <div style="font-weight: bold; font-size: 10px; margin-bottom: 1mm; color: #0066cc;">\u0631\u0645\u0632 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629</div>
              <div style="font-size: 14px; font-weight: bold; letter-spacing: 1px; color: #000;">${internationalTransferData.transfer_code || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</div>
              <div style="font-size: 8px; margin-top: 1mm; color: #666;">\u0627\u062D\u062A\u0641\u0638 \u0628\u0647\u0630\u0627 \u0627\u0644\u0631\u0645\u0632 \u0644\u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629</div>
            </div>
            
            ${internationalTransferData.commission_recipient ? `
            <div class="row">
              <span class="label">\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645:</span>
              <span class="value">${parseFloat(internationalTransferData.commission_recipient).toLocaleString("ar-LY", { minimumFractionDigits: 2 })} ${internationalTransferData.currency}</span>
            </div>
            ` : ""}
          </div>
          ` : ""}
          
          <div class="amount-section">
            <div class="row">
              <span class="label">\u0627\u0644\u0645\u0628\u0644\u063A:</span>
              <span class="value">${parseFloat(transaction.amount).toLocaleString("ar-LY", { minimumFractionDigits: 2 })} ${transaction.currency}</span>
            </div>
            
            ${transaction.feeSystem ? `
            <div class="row">
              <span class="label">\u0627\u0644\u0639\u0645\u0648\u0644\u0629:</span>
              <span class="value">${parseFloat(transaction.feeSystem).toLocaleString("ar-LY", { minimumFractionDigits: 2 })} ${transaction.currency}</span>
            </div>
            ` : ""}
            
            <div class="row" style="font-weight: bold; border-top: 1px solid #ddd; padding-top: 1mm;">
              <span class="label">\u0627\u0644\u0635\u0627\u0641\u064A:</span>
              <span class="value">${parseFloat(transaction.netAmount).toLocaleString("ar-LY", { minimumFractionDigits: 2 })} ${transaction.currency}</span>
            </div>
          </div>
          
          <div class="row">
            <span class="label">\u0627\u0644\u062A\u0627\u0631\u064A\u062E:</span>
            <span class="value">${new Date(transaction.createdAt).toLocaleString("ar-LY", {
        timeZone: "Africa/Tripoli",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
      })}</span>
          </div>
          
          ${transaction.executedAt ? `
          <div class="row">
            <span class="label">\u0648\u0642\u062A \u0627\u0644\u062A\u0646\u0641\u064A\u0630:</span>
            <span class="value">${new Date(transaction.executedAt).toLocaleString("ar-LY", {
        timeZone: "Africa/Tripoli",
        hour: "2-digit",
        minute: "2-digit"
      })}</span>
          </div>
          ` : ""}
          
          <div class="row">
            <span class="label">\u0627\u0644\u0642\u0646\u0627\u0629:</span>
            <span class="value">
              ${transaction.channel === "WEB" ? "\u0648\u064A\u0628" : transaction.channel === "MOBILE" ? "\u0645\u0648\u0628\u0627\u064A\u0644" : transaction.channel === "DESKTOP" ? "\u0633\u0637\u062D \u0627\u0644\u0645\u0643\u062A\u0628" : transaction.channel === "API" ? "API" : transaction.channel}
            </span>
          </div>
          
          ${transaction.notes ? `
          <div style="margin-top: 2mm; padding-top: 2mm; border-top: 1px solid #ddd;">
            <div class="label">\u0645\u0644\u0627\u062D\u0638\u0627\u062A:</div>
            <div style="font-size: 10px; margin-top: 1mm;">${transaction.notes}</div>
          </div>
          ` : ""}
          
          <div class="qr-code">
            <div style="border: 1px solid #ddd; padding: 2mm; font-size: 10px;">
              \u0631\u0645\u0632 QR \u0644\u0644\u062A\u062D\u0642\u0642: ${transaction.refNo}
            </div>
          </div>
          
          <div class="footer">
            <div>\u0634\u0643\u0631\u0627\u064B \u0644\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629</div>
            <div style="margin-top: 1mm;">\u0644\u0644\u0627\u0633\u062A\u0641\u0633\u0627\u0631: support@platform.ly</div>
          </div>
        </body>
        </html>
      `;
      res.setHeader("Content-Type", "text/html; charset=utf-8");
      res.send(receiptHtml);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:", error);
      res.status(500).json({ error: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644" });
    }
  });
  app2.post("/api/admin/transactions/export", authMiddleware2, isAdmin, async (req, res) => {
    try {
      const { format, filters, selectedIds } = req.body;
      console.log("\u{1F4CA} \u0637\u0644\u0628 \u062A\u0635\u062F\u064A\u0631 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A:", { format, hasFilters: !!filters, selectedCount: selectedIds?.length || 0 });
      if (!format || !["csv", "pdf"].includes(format)) {
        return res.status(400).json({ error: "\u0635\u064A\u063A\u0629 \u0627\u0644\u062A\u0635\u062F\u064A\u0631 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
      }
      let transactions2;
      if (selectedIds && selectedIds.length > 0) {
        console.log("\u{1F4E4} \u062A\u0635\u062F\u064A\u0631 \u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0645\u062D\u062F\u062F\u0629:", selectedIds.length, "\u0645\u0639\u0627\u0645\u0644\u0629");
        console.log("\u{1F50D} \u0645\u0639\u0631\u0641\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0645\u064F\u0631\u0633\u0644\u0629:", selectedIds);
        const allTransactionsResult = await UnifiedAdminTransactions.getAllTransactions({
          pageSize: 1e3
          // رقم كبير للحصول على جميع المعاملات
        });
        const selectedTransactions = allTransactionsResult.rows.filter(
          (transaction) => selectedIds.includes(transaction.id)
        );
        console.log("\u2705 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0635\u0627\u0644\u062D\u0629:", selectedTransactions.length, "\u0645\u0646 \u0623\u0635\u0644", selectedIds.length);
        transactions2 = {
          rows: selectedTransactions,
          total: selectedTransactions.length
        };
      } else {
        console.log("\u{1F4E4} \u062A\u0635\u062F\u064A\u0631 \u062D\u0633\u0628 \u0627\u0644\u0641\u0644\u0627\u062A\u0631:", filters);
        transactions2 = await AdminTransactionService.getTransactions(filters || {});
      }
      console.log("\u{1F4CA} \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u062A\u0635\u062F\u064A\u0631 \u0627\u0644\u0645\u062C\u0645\u0639\u0629:", {
        totalRows: transactions2.rows?.length || 0,
        firstRow: transactions2.rows?.[0] ? Object.keys(transactions2.rows[0]) : "\u0644\u0627 \u062A\u0648\u062C\u062F \u0628\u064A\u0627\u0646\u0627\u062A"
      });
      if (!transactions2.rows || transactions2.rows.length === 0) {
        console.log("\u26A0\uFE0F \u0644\u0627 \u062A\u0648\u062C\u062F \u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0644\u0644\u062A\u0635\u062F\u064A\u0631");
        return res.status(404).json({ error: "\u0644\u0627 \u062A\u0648\u062C\u062F \u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0644\u0644\u062A\u0635\u062F\u064A\u0631" });
      }
      if (format === "csv") {
        const csvContent = await generateTransactionsCSV(transactions2.rows);
        console.log("\u{1F4C4} \u0645\u062D\u062A\u0648\u0649 CSV:", csvContent.length, "\u062D\u0631\u0641");
        res.setHeader("Content-Type", "text/csv; charset=utf-8");
        res.setHeader("Content-Disposition", `attachment; filename="transactions-${Date.now()}.csv"`);
        res.send(csvContent);
      } else {
        console.log("\u{1F4C4} \u0625\u0646\u0634\u0627\u0621 \u0645\u0644\u0641 PDF \u0644\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A...");
        const pdfBuffer = await generateTransactionsPDF(transactions2.rows);
        console.log("\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 PDF \u0628\u0646\u062C\u0627\u062D\u060C \u0627\u0644\u062D\u062C\u0645:", pdfBuffer.length, "\u0628\u0627\u064A\u062A");
        res.setHeader("Content-Type", "application/pdf");
        res.setHeader("Content-Disposition", `attachment; filename="transactions-${Date.now()}.pdf"`);
        res.send(pdfBuffer);
      }
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062A\u0635\u062F\u064A\u0631 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A:", error);
      res.status(500).json({ error: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062A\u0635\u062F\u064A\u0631 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/admin/transactions/stats", authMiddleware2, isAdmin, async (req, res) => {
    try {
      const timeframe = req.query.interval || "day";
      const stats = await AdminTransactionService.getDashboardStats(timeframe);
      res.json(stats);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A:", error);
      res.status(500).json({ error: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A" });
    }
  });
  app2.get("/api/admin/transactions/duplicates", authMiddleware2, isAdmin, async (req, res) => {
    try {
      const timeWindow = parseInt(req.query.timeWindow) || 5;
      const duplicates = await AdminTransactionService.findDuplicateTransactions(timeWindow);
      res.json(duplicates);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u0631\u0631\u0629:", error);
      res.status(500).json({ error: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u0631\u0631\u0629" });
    }
  });
}

// server/rewards-service.ts
init_db();
init_schema();
import { eq as eq6, sql as sql8, and as and5, desc as desc5 } from "drizzle-orm";
var RewardsService = class {
  // إنشاء أو تحديث نقاط المستخدم
  async initializeUserPoints(userId) {
    try {
      const existing = await db.select().from(userPoints).where(eq6(userPoints.userId, userId)).limit(1);
      if (existing.length === 0) {
        await db.insert(userPoints).values({
          userId,
          totalPoints: 0,
          availablePoints: 0,
          level: 1,
          streakDays: 0,
          lastActivityDate: /* @__PURE__ */ new Date()
        });
      }
    } catch (error) {
      console.error("Error initializing user points:", error);
    }
  }
  // إضافة نقاط للمستخدم
  async awardPoints(event) {
    try {
      await this.initializeUserPoints(event.userId);
      await db.transaction(async (tx) => {
        await tx.update(userPoints).set({
          totalPoints: sql8`total_points + ${event.points}`,
          availablePoints: sql8`available_points + ${event.points}`,
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq6(userPoints.userId, event.userId));
        await tx.insert(pointsHistory).values({
          userId: event.userId,
          points: event.points,
          action: event.action,
          description: event.description,
          descriptionAr: event.descriptionAr,
          referenceId: event.referenceId,
          referenceType: event.referenceType
        });
      });
      await this.checkForNewBadges(event.userId);
      await this.checkLevelUp(event.userId);
      console.log(`\u2705 \u062A\u0645 \u0645\u0646\u062D ${event.points} \u0646\u0642\u0637\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${event.userId} - ${event.descriptionAr}`);
    } catch (error) {
      console.error("Error awarding points:", error);
    }
  }
  // فحص الشارات الجديدة
  async checkForNewBadges(userId) {
    try {
      const userPointsData = await db.select().from(userPoints).where(eq6(userPoints.userId, userId)).limit(1);
      if (!userPointsData.length) return;
      const userData = userPointsData[0];
      const availableBadges = await db.select().from(badgeTypes).where(eq6(badgeTypes.active, true));
      for (const badge of availableBadges) {
        const existingBadge = await db.select().from(userBadges).where(and5(
          eq6(userBadges.userId, userId),
          eq6(userBadges.badgeTypeId, badge.id)
        )).limit(1);
        if (existingBadge.length > 0) continue;
        const shouldAward = await this.checkBadgeConditions(userId, badge, userData);
        if (shouldAward) {
          await this.awardBadge(userId, badge.id);
        }
      }
    } catch (error) {
      console.error("Error checking for new badges:", error);
    }
  }
  // فحص شروط الشارة
  async checkBadgeConditions(userId, badge, userPointsData) {
    try {
      if (badge.pointsRequired > userPointsData.totalPoints) {
        return false;
      }
      switch (badge.name) {
        case "first_transfer":
          const transfers2 = await db.execute(sql8`SELECT COUNT(*) as count FROM transfers WHERE sender_id = ${userId}`);
          return transfers2.rows[0].count >= 1;
        case "transfer_master":
          const transferCount = await db.execute(sql8`SELECT COUNT(*) as count FROM transfers WHERE sender_id = ${userId}`);
          return transferCount.rows[0].count >= 10;
        case "daily_user":
          return userPointsData.streakDays >= 7;
        case "loyalty_member":
          return userPointsData.streakDays >= 30;
        case "level_up":
          return userPointsData.level >= 5;
        case "early_adopter":
          const userCount = await db.execute(sql8`SELECT COUNT(*) as count FROM users WHERE id <= ${userId}`);
          return userCount.rows[0].count <= 100;
        case "active_trader":
          const tradesCount = await db.execute(sql8`SELECT COUNT(*) as count FROM market_transactions WHERE buyer_id = ${userId}`);
          return tradesCount.rows[0].count >= 5;
        case "trader_pro":
          const proTradesCount = await db.execute(sql8`SELECT COUNT(*) as count FROM market_transactions WHERE buyer_id = ${userId}`);
          return proTradesCount.rows[0].count >= 25;
        case "offer_creator":
          const offersCount = await db.execute(sql8`SELECT COUNT(*) as count FROM market_offers WHERE user_id = ${userId}`);
          return offersCount.rows[0].count >= 3;
        case "city_connector":
          const cityTransfersCount = await db.execute(sql8`SELECT COUNT(*) as count FROM city_transfers WHERE sender_id = ${userId}`);
          return cityTransfersCount.rows[0].count >= 5;
        case "global_sender":
          const intlTransfersCount = await db.execute(sql8`SELECT COUNT(*) as count FROM international_transfers_new WHERE sender_agent_id = ${userId}`);
          return intlTransfersCount.rows[0].count >= 3;
        default:
          return true;
      }
    } catch (error) {
      console.error("Error checking badge conditions:", error);
      return false;
    }
  }
  // منح شارة للمستخدم
  async awardBadge(userId, badgeTypeId) {
    try {
      await db.insert(userBadges).values({
        userId,
        badgeTypeId,
        earnedAt: /* @__PURE__ */ new Date(),
        isVisible: true,
        notificationSent: false
      });
      const badge = await db.select().from(badgeTypes).where(eq6(badgeTypes.id, badgeTypeId)).limit(1);
      if (badge.length > 0) {
        console.log(`\u{1F3C6} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u062D\u0635\u0644 \u0639\u0644\u0649 \u0634\u0627\u0631\u0629 \u062C\u062F\u064A\u062F\u0629: ${badge[0].nameAr}`);
      }
    } catch (error) {
      console.error("Error awarding badge:", error);
    }
  }
  // فحص ترقية المستوى
  async checkLevelUp(userId) {
    try {
      const settings = await this.getSettings();
      const userPointsData = await db.select().from(userPoints).where(eq6(userPoints.userId, userId)).limit(1);
      if (!userPointsData.length) return;
      const userData = userPointsData[0];
      const newLevel = Math.floor(userData.totalPoints / (settings.pointsPerLevel || 100)) + 1;
      if (newLevel > userData.level) {
        await db.update(userPoints).set({
          level: newLevel,
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq6(userPoints.userId, userId));
        await this.awardPoints({
          userId,
          points: settings.levelUpBonus || 50,
          action: "level_up",
          description: `Level up to ${newLevel}`,
          descriptionAr: `\u062A\u0631\u0642\u064A\u0629 \u0644\u0644\u0645\u0633\u062A\u0648\u0649 ${newLevel}`,
          referenceId: newLevel.toString(),
          referenceType: "level"
        });
        console.log(`\u{1F199} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u062A\u0631\u0642\u0649 \u0644\u0644\u0645\u0633\u062A\u0648\u0649 ${newLevel}`);
      }
    } catch (error) {
      console.error("Error checking level up:", error);
    }
  }
  // تحديث سلسلة الأيام المتتالية
  async updateStreakDays(userId) {
    try {
      await this.initializeUserPoints(userId);
      const userPointsData = await db.select().from(userPoints).where(eq6(userPoints.userId, userId)).limit(1);
      if (!userPointsData.length) return;
      const userData = userPointsData[0];
      const today = /* @__PURE__ */ new Date();
      const lastActivity = userData.lastActivityDate ? new Date(userData.lastActivityDate) : /* @__PURE__ */ new Date();
      const diffTime = today.getTime() - lastActivity.getTime();
      const diffDays = Math.floor(diffTime / (1e3 * 60 * 60 * 24));
      let newStreakDays = userData.streakDays;
      if (diffDays === 1) {
        newStreakDays += 1;
      } else if (diffDays > 1) {
        newStreakDays = 1;
      }
      await db.update(userPoints).set({
        streakDays: newStreakDays,
        lastActivityDate: today,
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq6(userPoints.userId, userId));
      return newStreakDays;
    } catch (error) {
      console.error("Error updating streak days:", error);
      return 0;
    }
  }
  // الحصول على إعدادات النظام
  async getSettings() {
    try {
      const settings = await db.select().from(rewardSettings).limit(1);
      return settings[0] || {
        transferPoints: 10,
        loginPoints: 5,
        streakBonusPoints: 15,
        levelUpBonus: 100,
        pointsPerLevel: 1e3,
        maxStreakDays: 30,
        systemActive: true
      };
    } catch (error) {
      console.error("Error getting settings:", error);
      return {
        transferPoints: 10,
        loginPoints: 5,
        streakBonusPoints: 15,
        levelUpBonus: 100,
        pointsPerLevel: 1e3,
        maxStreakDays: 30,
        systemActive: true
      };
    }
  }
  // الحصول على نقاط ومستوى المستخدم
  async getUserProgress(userId) {
    try {
      await this.initializeUserPoints(userId);
      const userPointsData = await db.select().from(userPoints).where(eq6(userPoints.userId, userId)).limit(1);
      const userBadgesData = await db.select({
        badge: badgeTypes,
        earnedAt: userBadges.earnedAt,
        isVisible: userBadges.isVisible
      }).from(userBadges).innerJoin(badgeTypes, eq6(userBadges.badgeTypeId, badgeTypes.id)).where(eq6(userBadges.userId, userId)).orderBy(desc5(userBadges.earnedAt));
      const pointsHistoryData = await db.select().from(pointsHistory).where(eq6(pointsHistory.userId, userId)).orderBy(desc5(pointsHistory.createdAt)).limit(20);
      return {
        points: userPointsData[0] || null,
        badges: userBadgesData,
        history: pointsHistoryData
      };
    } catch (error) {
      console.error("Error getting user progress:", error);
      return {
        points: null,
        badges: [],
        history: []
      };
    }
  }
  // استبدال مكافأة
  async redeemReward(userId, rewardId) {
    try {
      const reward = await db.select().from(rewards).where(eq6(rewards.id, rewardId)).limit(1);
      if (!reward.length) {
        throw new Error("\u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629");
      }
      const rewardData = reward[0];
      if (!rewardData.active) {
        throw new Error("\u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u063A\u064A\u0631 \u0645\u062A\u0627\u062D\u0629");
      }
      const userPointsData = await db.select().from(userPoints).where(eq6(userPoints.userId, userId)).limit(1);
      if (!userPointsData.length || userPointsData[0].availablePoints < rewardData.pointsCost) {
        throw new Error("\u0646\u0642\u0627\u0637 \u063A\u064A\u0631 \u0643\u0627\u0641\u064A\u0629");
      }
      if (rewardData.maxRedemptions && (rewardData.currentRedemptions || 0) >= rewardData.maxRedemptions) {
        throw new Error("\u062A\u0645 \u0627\u0633\u062A\u0646\u0641\u0627\u062F \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u0627\u0633\u062A\u0628\u062F\u0627\u0644");
      }
      if (rewardData.validUntil && /* @__PURE__ */ new Date() > new Date(rewardData.validUntil)) {
        throw new Error("\u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0645\u0646\u062A\u0647\u064A\u0629 \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629");
      }
      const redemptionCode = `RWD-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;
      await db.transaction(async (tx) => {
        await tx.update(userPoints).set({
          availablePoints: sql8`available_points - ${rewardData.pointsCost}`,
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq6(userPoints.userId, userId));
        await tx.insert(userRewards).values({
          userId,
          rewardId,
          pointsSpent: rewardData.pointsCost,
          status: "active",
          redemptionCode,
          expiresAt: rewardData.validUntil
        });
        await tx.update(rewards).set({
          currentRedemptions: sql8`current_redemptions + 1`
        }).where(eq6(rewards.id, rewardId));
        await tx.insert(pointsHistory).values({
          userId,
          points: -rewardData.pointsCost,
          action: "reward_redeemed",
          description: `Redeemed: ${rewardData.name}`,
          descriptionAr: `\u0627\u0633\u062A\u0628\u062F\u0627\u0644: ${rewardData.nameAr}`,
          referenceId: redemptionCode,
          referenceType: "reward"
        });
      });
      return { redemptionCode, reward: rewardData };
    } catch (error) {
      console.error("Error redeeming reward:", error);
      throw error;
    }
  }
  // وظيفة منح النقاط لتسجيل الدخول اليومي
  async awardDailyLoginPoints(userId) {
    try {
      const settings = await this.getSettings();
      const today = (/* @__PURE__ */ new Date()).toDateString();
      const todayLogin = await db.select().from(pointsHistory).where(and5(
        eq6(pointsHistory.userId, userId),
        eq6(pointsHistory.action, "daily_login"),
        sql8`DATE(created_at) = DATE(${today})`
      )).limit(1);
      if (todayLogin.length > 0) {
        return;
      }
      await this.updateDailyStreak(userId);
      await this.awardPoints({
        userId,
        points: settings.loginPoints || 5,
        action: "daily_login",
        description: "Daily login bonus",
        descriptionAr: "\u0645\u0643\u0627\u0641\u0623\u0629 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0627\u0644\u064A\u0648\u0645\u064A",
        referenceId: today,
        referenceType: "daily_login"
      });
      console.log(`\u2705 \u062A\u0645 \u0645\u0646\u062D \u0646\u0642\u0627\u0637 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0627\u0644\u064A\u0648\u0645\u064A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
    } catch (error) {
      console.error("Error awarding daily login points:", error);
    }
  }
  // دالة آمنة لمنح النقاط اليومية مع حماية من التكرار
  async awardDailyLoginPointsSafe(userId, userIP) {
    try {
      const settings = await this.getSettings();
      const now = /* @__PURE__ */ new Date();
      const libyaTime = new Date(now.toLocaleString("en-US", { timeZone: "Africa/Tripoli" }));
      const today = libyaTime.toISOString().split("T")[0];
      return await db.transaction(async (tx) => {
        const existingReward = await tx.select().from(pointsHistory).where(and5(
          eq6(pointsHistory.userId, userId),
          eq6(pointsHistory.action, "daily_login"),
          sql8`DATE(created_at AT TIME ZONE 'Africa/Tripoli') = ${today}`
        )).limit(1);
        if (existingReward.length > 0) {
          console.log(`\u26A0\uFE0F \u0645\u062D\u0627\u0648\u0644\u0629 \u0644\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0645\u0643\u0627\u0641\u0623\u0629 \u064A\u0648\u0645\u064A\u0629 \u0645\u0643\u0631\u0631\u0629 - \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userId}, IP: ${userIP || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"}`);
          return {
            success: false,
            message: "\u062A\u0645 \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u064A\u0648\u0645\u064A\u0629 \u0628\u0627\u0644\u0641\u0639\u0644"
          };
        }
        await this.initializeUserPoints(userId);
        const streakDays = await this.updateStreakDays(userId);
        const loginPoints = settings.loginPoints || 5;
        const streakBonus = settings.streakBonusPoints || 15;
        const currentStreakDays = streakDays || 0;
        await tx.update(userPoints).set({
          totalPoints: sql8`total_points + ${loginPoints}`,
          availablePoints: sql8`available_points + ${loginPoints}`,
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq6(userPoints.userId, userId));
        await tx.insert(pointsHistory).values({
          userId,
          points: loginPoints,
          action: "daily_login",
          description: "Daily login bonus",
          descriptionAr: "\u0645\u0643\u0627\u0641\u0623\u0629 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0627\u0644\u064A\u0648\u0645\u064A",
          referenceId: today,
          referenceType: "daily_login"
        });
        let totalPointsAwarded = loginPoints;
        let bonusMessage = "";
        if (currentStreakDays > 0 && currentStreakDays % 7 === 0) {
          await tx.update(userPoints).set({
            totalPoints: sql8`total_points + ${streakBonus}`,
            availablePoints: sql8`available_points + ${streakBonus}`,
            updatedAt: /* @__PURE__ */ new Date()
          }).where(eq6(userPoints.userId, userId));
          await tx.insert(pointsHistory).values({
            userId,
            points: streakBonus,
            action: "streak_bonus",
            description: `${currentStreakDays} days streak bonus`,
            descriptionAr: `\u0645\u0643\u0627\u0641\u0623\u0629 \u0633\u0644\u0633\u0644\u0629 ${currentStreakDays} \u064A\u0648\u0645`,
            referenceId: currentStreakDays.toString(),
            referenceType: "streak"
          });
          totalPointsAwarded += streakBonus;
          bonusMessage = ` + ${streakBonus} \u0646\u0642\u0637\u0629 \u0645\u0643\u0627\u0641\u0623\u0629 \u0633\u0644\u0633\u0644\u0629!`;
        }
        console.log(`\u2705 \u0645\u0646\u062D ${totalPointsAwarded} \u0646\u0642\u0637\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} - \u062A\u0633\u062C\u064A\u0644 \u062F\u062E\u0648\u0644 \u064A\u0648\u0645\u064A \u0622\u0645\u0646`);
        return {
          success: true,
          message: `\u062A\u0645 \u0645\u0646\u062D ${loginPoints} \u0646\u0642\u0637\u0629${bonusMessage}`,
          data: {
            streakDays: currentStreakDays,
            pointsAwarded: totalPointsAwarded,
            loginPoints,
            bonusPoints: currentStreakDays % 7 === 0 ? streakBonus : 0
          }
        };
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0627\u0644\u0646\u0642\u0627\u0637 \u0627\u0644\u064A\u0648\u0645\u064A\u0629 \u0627\u0644\u0622\u0645\u0646\u0629:", error);
      return {
        success: false,
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u064A\u0648\u0645\u064A\u0629"
      };
    }
  }
  // تحديث تسلسل الأيام
  async updateDailyStreak(userId) {
    try {
      const userData = await db.select().from(userPoints).where(eq6(userPoints.userId, userId)).limit(1);
      if (userData.length === 0) return;
      const user = userData[0];
      const today = /* @__PURE__ */ new Date();
      const lastActivity = user.lastActivityDate ? new Date(user.lastActivityDate) : /* @__PURE__ */ new Date();
      const daysDiff = Math.floor((today.getTime() - lastActivity.getTime()) / (1e3 * 60 * 60 * 24));
      let newStreak = user.streakDays;
      if (daysDiff === 1) {
        newStreak = user.streakDays + 1;
      } else if (daysDiff > 1) {
        newStreak = 1;
      }
      await db.update(userPoints).set({
        streakDays: newStreak,
        lastActivityDate: today
      }).where(eq6(userPoints.userId, userId));
    } catch (error) {
      console.error("Error updating daily streak:", error);
    }
  }
};
var rewardsService = new RewardsService();

// server/routes.ts
init_referral_system();
var checkPageRestrictions = (pageKey) => {
  return async (req, res, next) => {
    try {
      console.log(`\u{1F50D} [\u062A\u062D\u0642\u0642 \u0642\u064A\u0648\u062F \u0627\u0644\u062C\u062F\u064A\u062F] \u0641\u062D\u0635 \u0642\u064A\u0648\u062F \u0635\u0641\u062D\u0629: ${pageKey} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ID: ${req.user.id}`);
      if (isSuperAdmin(req.user.email, req.user.id)) {
        console.log(`\u{1F511} Super Admin \u062A\u062C\u0627\u0648\u0632 \u0642\u064A\u0648\u062F \u0635\u0641\u062D\u0629 ${pageKey}`);
        return next();
      }
      console.log(`\u{1F4CA} \u0628\u062D\u062B \u0639\u0646 \u0642\u064A\u0648\u062F \u0634\u0627\u0645\u0644\u0629 \u0644\u0635\u0641\u062D\u0629 ${pageKey}...`);
      const globalRestriction = await db.select().from(pageRestrictions).where(and9(
        isNull2(pageRestrictions.userId),
        // قيود شاملة فقط
        eq10(pageRestrictions.scope, "global"),
        // تحديد واضح للنطاق
        or4(
          eq10(pageRestrictions.pageKey, pageKey),
          eq10(pageRestrictions.pageKey, "all")
        ),
        eq10(pageRestrictions.isActive, true),
        or4(
          isNull2(pageRestrictions.expiresAt),
          gte5(pageRestrictions.expiresAt, /* @__PURE__ */ new Date())
        )
      )).limit(1);
      if (globalRestriction.length > 0) {
        console.log(`\u{1F50D} [\u0642\u064A\u062F \u0634\u0627\u0645\u0644 NEW] \u0648\u064F\u062C\u062F \u0642\u064A\u062F \u0634\u0627\u0645\u0644 \u0646\u0634\u0637: ${globalRestriction[0].reason}`);
        console.log(`\u{1F50D} [\u0627\u0633\u062A\u062B\u0646\u0627\u0621 NEW] \u0628\u062D\u062B \u0639\u0646 \u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${req.user.id}...`);
        const userException = await db.select().from(pageRestrictions).where(and9(
          eq10(pageRestrictions.userId, req.user.id),
          or4(
            eq10(pageRestrictions.pageKey, pageKey),
            eq10(pageRestrictions.pageKey, "all")
          ),
          eq10(pageRestrictions.scope, "exception"),
          // ❌ إزالة شرط isActive = false (كان يسبب المشكلة)
          or4(
            isNull2(pageRestrictions.expiresAt),
            gte5(pageRestrictions.expiresAt, /* @__PURE__ */ new Date())
          )
        )).orderBy(pageRestrictions.createdAt).limit(1);
        if (userException.length > 0) {
          console.log(`\u2705 [\u0627\u0633\u062A\u062B\u0646\u0627\u0621 NEW] \u0648\u064F\u062C\u062F \u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userException[0].reason}`);
          return next();
        }
        console.log(`\u{1F6AB} [\u0631\u0641\u0636 NEW] \u0644\u0627 \u064A\u0648\u062C\u062F \u0627\u0633\u062A\u062B\u0646\u0627\u0621 - \u0633\u064A\u062A\u0645 \u0645\u0646\u0639 \u0627\u0644\u0648\u0635\u0648\u0644`);
        return res.status(403).json({
          message: `\u0627\u0644\u0648\u0635\u0648\u0644 \u0645\u0642\u064A\u062F: ${globalRestriction[0].reason || "\u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D \u0628\u0627\u0644\u0648\u0635\u0648\u0644"}`,
          restrictionReason: globalRestriction[0].reason,
          isBlocked: true
        });
      }
      console.log(`\u{1F4CA} \u0628\u062D\u062B \u0639\u0646 \u0642\u064A\u0648\u062F \u062E\u0627\u0635\u0629 \u0628\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${req.user.id}...`);
      const userRestriction = await db.select().from(pageRestrictions).where(and9(
        eq10(pageRestrictions.userId, req.user.id),
        or4(
          eq10(pageRestrictions.pageKey, pageKey),
          eq10(pageRestrictions.pageKey, "all")
        ),
        eq10(pageRestrictions.isActive, true),
        or4(
          isNull2(pageRestrictions.expiresAt),
          gte5(pageRestrictions.expiresAt, /* @__PURE__ */ new Date())
        )
      )).limit(1);
      if (userRestriction.length > 0) {
        console.log(`\u{1F6AB} [\u0642\u064A\u062F \u062E\u0627\u0635] \u0648\u064F\u062C\u062F \u0642\u064A\u062F \u062E\u0627\u0635 \u0628\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userRestriction[0].reason}`);
        return res.status(403).json({
          message: `\u0627\u0644\u0648\u0635\u0648\u0644 \u0645\u0642\u064A\u062F: ${userRestriction[0].reason || "\u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D \u0628\u0627\u0644\u0648\u0635\u0648\u0644"}`,
          restrictionReason: userRestriction[0].reason,
          isBlocked: true
        });
      }
      console.log(`\u2705 [\u062A\u062D\u0642\u0642 \u0642\u064A\u0648\u062F] \u0644\u0627 \u062A\u0648\u062C\u062F \u0642\u064A\u0648\u062F \u0644\u0635\u0641\u062D\u0629 ${pageKey}`);
      next();
    } catch (error) {
      console.error(`\u274C [\u062A\u062D\u0642\u0642 \u0642\u064A\u0648\u062F] \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0642\u064A\u062F ${pageKey}:`, error);
      return res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0642\u064A\u0648\u062F" });
    }
  };
};
function safeParseAmount(amount) {
  if (typeof amount === "number") return amount;
  if (typeof amount === "string") {
    const parsed = parseFloat(amount);
    return isNaN(parsed) ? 0 : parsed;
  }
  return 0;
}
async function registerRoutes(app2) {
  setupVerificationUploadRoute(app2);
  setupAuth(app2);
  setupUnreadMessagesRoutes(app2);
  await initSecurity();
  await initializePushSubscriptions();
  app2.use((req, res, next) => {
    if (req.method === "POST") {
      console.log(`\u{1F310} POST Request to: ${req.path}`);
      if (req.path.includes("international")) {
        console.log(`\u{1F30D} \u0637\u0644\u0628 \u062A\u062D\u0648\u064A\u0644 \u062F\u0648\u0644\u064A \u0625\u0644\u0649: ${req.path}`);
      }
    }
    next();
  });
  const httpServer = createServer(app2);
  const io = new SocketIOServer(httpServer, {
    cors: {
      origin: "*",
      methods: ["GET", "POST"]
    },
    path: "/socket.io"
  });
  io.use(async (socket, next) => {
    try {
      const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.replace("Bearer ", "");
      if (!token) {
        console.log("\u274C WebSocket: \u0644\u0627 \u064A\u0648\u062C\u062F token \u0641\u064A \u0627\u0644\u0627\u062A\u0635\u0627\u0644");
        return next(new Error("\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647 - \u0644\u0627 \u064A\u0648\u062C\u062F token"));
      }
      const JWT_SECRET3 = getJwtSecret();
      const decoded = jwt5.verify(token, JWT_SECRET3);
      const user = await storage.getUser(decoded.userId);
      if (!user) {
        console.log(`\u274C WebSocket: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${decoded.userId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F`);
        return next(new Error("\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F"));
      }
      socket.userId = user.id;
      socket.userEmail = user.email;
      socket.userName = user.fullName;
      console.log(`\u2705 WebSocket: \u062A\u0645 \u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${user.fullName} (${user.id})`);
      next();
    } catch (error) {
      console.log(`\u274C WebSocket: \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629: ${error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"}`);
      return next(new Error("token \u063A\u064A\u0631 \u0635\u0627\u0644\u062D"));
    }
  });
  app2.set("io", io);
  const realtimeEvents2 = initializeRealtimeEvents(io);
  app2.set("realtimeEvents", realtimeEvents2);
  io.on("connection", async (socket) => {
    console.log(`\u{1F7E2} \u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0635\u0627\u062F\u0642 \u0645\u062A\u0635\u0644: ${socket.userName} (${socket.userId}) - Socket: ${socket.id}`);
    const userId = socket.userId;
    const roomsToJoin = [
      `user-${userId}`,
      // الأحداث الشخصية
      `balance-${userId}-LYD`,
      // أحداث رصيد الدينار الليبي
      `balance-${userId}-USD`,
      // أحداث رصيد الدولار
      `balance-${userId}-EUR`,
      // أحداث رصيد اليورو
      `balance-${userId}-TRY`,
      // أحداث رصيد الليرة التركية
      `balance-${userId}-AED`,
      // أحداث رصيد الدرهم الإماراتي
      `balance-${userId}-EGP`,
      // أحداث رصيد الجنيه المصري
      `balance-${userId}-TND`,
      // أحداث رصيد الدينار التونسي
      `balance-${userId}-GBP`,
      // أحداث رصيد الجنيه الإسترليني
      "market-general",
      // أحداث السوق العامة
      "market-USD-LYD",
      // أحداث سوق الدولار/دينار ليبي
      "market-LYD-USD",
      // أحداث سوق دينار ليبي/دولار
      "market-EUR-LYD",
      // أحداث سوق اليورو/دينار ليبي
      "market-LYD-EUR"
      // أحداث سوق دينار ليبي/يورو
    ];
    roomsToJoin.forEach((room) => {
      socket.join(room);
    });
    console.log(`\u{1F3E0} \u0627\u0646\u0636\u0645 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${socket.id} \u0625\u0644\u0649 ${roomsToJoin.length} \u063A\u0631\u0641\u0629 \u0644\u0644\u0623\u062D\u062F\u0627\u062B \u0627\u0644\u0644\u062D\u0638\u064A\u0629`);
    console.log(`\u{1F4CB} \u0627\u0644\u063A\u0631\u0641: ${roomsToJoin.join(", ")}`);
    const publicRoom = await storage.getPublicChatRoom();
    if (publicRoom) {
      const messages = await storage.getChatMessages(publicRoom.id, 50);
      socket.emit("chatHistory", messages.reverse());
      socket.join(`room-${publicRoom.id}`);
      console.log(`\u{1F4E5} \u0627\u0646\u0636\u0645 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${socket.id} \u0625\u0644\u0649 room-${publicRoom.id} \u0644\u0644\u062F\u0631\u062F\u0634\u0629`);
    }
    socket.on("typing", async (data) => {
      if (data.roomType === "group") {
        const isMuted = await storage.isUserMuted(data.roomId, data.userId);
        if (isMuted) {
          console.log(`\u{1F507} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${data.userId} \u0645\u0643\u062A\u0648\u0645 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${data.roomId} - \u0645\u0646\u0639 \u0645\u0624\u0634\u0631 \u0627\u0644\u0643\u062A\u0627\u0628\u0629`);
          return;
        }
      }
      const roomIdentifier = `${data.roomType}-${data.roomId}`;
      console.log(`\u{1F446} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${data.userName} \u064A\u0643\u062A\u0628 \u0627\u0644\u0622\u0646 \u0641\u064A \u0627\u0644\u063A\u0631\u0641\u0629 ${roomIdentifier}`);
      console.log(`\u{1F4E1} \u0625\u0631\u0633\u0627\u0644 \u062D\u062F\u062B userTyping \u0644\u0644\u063A\u0631\u0641\u0629 ${roomIdentifier}`);
      const sockets = await io.in(roomIdentifier).fetchSockets();
      console.log(`\u{1F50D} \u0639\u062F\u062F \u0627\u0644\u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u062A\u0635\u0644\u064A\u0646 \u0641\u064A ${roomIdentifier}: ${sockets.length}`);
      sockets.forEach((s) => {
        const socketWithUser = s;
        console.log(`\u{1F464} \u0639\u0636\u0648 \u0645\u062A\u0635\u0644: ${socketWithUser.userId} - Socket: ${s.id}`);
      });
      socket.to(roomIdentifier).emit("userTyping", {
        userId: data.userId,
        userName: data.userName,
        roomType: data.roomType,
        roomId: data.roomId
      });
      console.log(`\u2705 \u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u062D\u062F\u062B userTyping`);
    });
    socket.on("stopTyping", (data) => {
      const roomIdentifier = `${data.roomType}-${data.roomId}`;
      console.log(`\u270B \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${data.userName} \u062A\u0648\u0642\u0641 \u0639\u0646 \u0627\u0644\u0643\u062A\u0627\u0628\u0629 \u0641\u064A \u0627\u0644\u063A\u0631\u0641\u0629 ${roomIdentifier}`);
      console.log(`\u{1F4E1} \u0625\u0631\u0633\u0627\u0644 \u062D\u062F\u062B userStoppedTyping \u0644\u0644\u063A\u0631\u0641\u0629 ${roomIdentifier}`);
      socket.to(roomIdentifier).emit("userStoppedTyping", {
        userId: data.userId,
        userName: data.userName,
        roomType: data.roomType,
        roomId: data.roomId
      });
    });
    socket.on("joinGroupChat", async (groupId, callback) => {
      try {
        const normalizedGroupId = Number(groupId);
        const roomName = `group-${normalizedGroupId}`;
        console.log(`\u{1F4E5} \u0627\u0646\u0636\u0645 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${socket.id} \u0625\u0644\u0649 ${roomName}`);
        await socket.join(roomName);
        const roomSockets = await io.in(roomName).fetchSockets();
        console.log(`\u{1F50D} \u0639\u062F\u062F \u0627\u0644\u0623\u0639\u0636\u0627\u0621 \u0641\u064A ${roomName}: ${roomSockets.length}`);
        roomSockets.forEach((s) => {
          console.log(`\u{1F464} \u0639\u0636\u0648 \u0641\u064A \u0627\u0644\u063A\u0631\u0641\u0629: ${s.data?.userId || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"} - Socket: ${s.id}`);
        });
        if (callback) {
          callback({ success: true, roomSize: roomSockets.length, groupId: normalizedGroupId });
        }
        const messages = await storage.getGroupMessages(normalizedGroupId, 50);
        socket.emit("groupChatHistory", { groupId: normalizedGroupId, messages: messages.reverse() });
        socket.emit("groupJoined", {
          success: true,
          roomSize: roomSockets.length,
          groupId: normalizedGroupId
        });
        const user = await storage.getUser(socket.userId);
        if (user) {
          socket.to(roomName).emit("memberJoinedGroup", {
            groupId: normalizedGroupId,
            userId: socket.userId,
            fullName: user.fullName
          });
        }
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0627\u0646\u0636\u0645\u0627\u0645 \u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629:", error);
        if (callback) {
          callback({ success: false, error: error.message });
        }
      }
    });
    socket.on("leaveGroupChat", async (groupId) => {
      try {
        const normalizedGroupId = Number(groupId);
        const roomName = `group-${normalizedGroupId}`;
        const socketWithUser = socket;
        const userId2 = socketWithUser.userId;
        console.log(`\u{1F4E4} \u063A\u0627\u062F\u0631 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${socket.id} (${userId2}) \u0627\u0644\u063A\u0631\u0641\u0629 ${roomName}`);
        socket.to(roomName).emit("memberLeftGroup", {
          groupId: normalizedGroupId,
          userId: userId2
        });
        await socket.leave(roomName);
        setTimeout(async () => {
          try {
            const roomSockets = await io.in(roomName).fetchSockets();
            const uniqueUsers = /* @__PURE__ */ new Map();
            for (const sock of roomSockets) {
              const sockWithUser = sock;
              const sockUserId = sockWithUser.userId || sock.data?.userId;
              if (sockUserId && !uniqueUsers.has(sockUserId)) {
                try {
                  const user = await storage.getUser(sockUserId);
                  if (user) {
                    uniqueUsers.set(sockUserId, {
                      userId: user.id,
                      fullName: user.fullName
                    });
                  }
                } catch (error) {
                  console.error(`\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${sockUserId}:`, error);
                }
              }
            }
            const onlineMembers = Array.from(uniqueUsers.values());
            io.to(roomName).emit("onlineMembersUpdate", {
              groupId: normalizedGroupId,
              members: onlineMembers
            });
            console.log(`\u{1F4CB} \u062A\u062D\u062F\u064A\u062B \u0641\u0648\u0631\u064A \u0644\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u062A\u0635\u0644\u064A\u0646 \u0641\u064A ${roomName}: ${onlineMembers.length} \u0623\u0639\u0636\u0627\u0621`);
          } catch (error) {
            console.error(`\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u062A\u0635\u0644\u064A\u0646 \u0644\u0644\u063A\u0631\u0641\u0629 ${roomName}:`, error);
          }
        }, 50);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u063A\u0627\u062F\u0631\u0629 \u0645\u062C\u0645\u0648\u0639\u0629 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629:", error);
      }
    });
    socket.on("getOnlineMembers", async (data) => {
      try {
        const { groupId } = data;
        const roomName = `group-${groupId}`;
        console.log(`\u{1F4CB} \u0637\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u062A\u0635\u0644\u064A\u0646 \u0644\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}`);
        const roomSockets = await io.in(roomName).fetchSockets();
        const uniqueUsers = /* @__PURE__ */ new Map();
        for (const sock of roomSockets) {
          const socketWithUser = sock;
          const userId2 = socketWithUser.userId || sock.data?.userId || sock.handshake?.auth?.userId;
          console.log(`\u{1F50D} Socket ${sock.id}: userId=${userId2}, data=${JSON.stringify(sock.data)}`);
          if (userId2 && !uniqueUsers.has(userId2)) {
            try {
              const user = await storage.getUser(userId2);
              if (user) {
                uniqueUsers.set(userId2, {
                  userId: user.id,
                  fullName: user.fullName
                });
                console.log(`\u2705 \u0623\u0636\u064A\u0641 \u0639\u0636\u0648 \u0645\u062A\u0635\u0644: ${user.fullName} (${user.id})`);
              }
            } catch (error) {
              console.error(`\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId2}:`, error);
            }
          } else if (userId2 && uniqueUsers.has(userId2)) {
            console.log(`\u{1F504} \u062A\u062E\u0637\u064A \u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0643\u0631\u0631: ${userId2}`);
          } else {
            console.log(`\u26A0\uFE0F Socket ${sock.id}: \u0644\u0627 \u064A\u0648\u062C\u062F \u0645\u0639\u0631\u0641 \u0645\u0633\u062A\u062E\u062F\u0645`);
          }
        }
        const onlineMembers = Array.from(uniqueUsers.values());
        console.log(`\u{1F4CB} \u0627\u0644\u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u062A\u0635\u0644\u064A\u0646 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}:`, onlineMembers);
        socket.emit("onlineMembers", {
          groupId,
          members: onlineMembers
        });
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u062A\u0635\u0644\u064A\u0646:", error);
      }
    });
    socket.on("sendMessage", async (data) => {
      try {
        const userId2 = socket.userId;
        const { content, roomId, roomType, fileUrl, fileType } = data;
        if (!userId2) {
          socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647 - \u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0635\u0627\u062F\u0642" });
          return;
        }
        const user = await storage.getUser(userId2);
        if (!user) {
          socket.emit("error", { message: "\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
          return;
        }
        const targetRoomId = roomId || (publicRoom ? publicRoom.id : 0);
        if (!targetRoomId) {
          socket.emit("error", { message: "\u063A\u0631\u0641\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
          return;
        }
        console.log(`\u0627\u0633\u062A\u0642\u0628\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0639 \u0645\u0644\u0641: ${fileUrl || "\u0644\u0627 \u064A\u0648\u062C\u062F \u0645\u0631\u0641\u0642"}`);
        const message = await storage.createChatMessage({
          roomId: targetRoomId,
          senderId: userId2,
          content,
          fileUrl: fileUrl || null,
          fileType: fileType || null
        });
        io.to(`room-${targetRoomId}`).emit("newMessage", {
          ...message,
          senderName: user.fullName,
          likesCount: 0,
          likedByMe: false
        });
        try {
          const roomMembers = await storage.getRoomMembers(targetRoomId);
          for (const member of roomMembers) {
            if (member.id !== userId2) {
              await sendPushNotificationToUser(member.id, {
                title: `\u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0646 ${user.fullName}`,
                body: content.length > 50 ? content.substring(0, 50) + "..." : content,
                data: {
                  type: "chat_message",
                  roomId: targetRoomId,
                  senderId: userId2,
                  senderName: user.fullName
                },
                url: "/chat",
                tag: `room-${targetRoomId}`
              });
            }
          }
        } catch (pushError) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631\u0627\u062A push \u0644\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0639\u0627\u0645\u0629:", pushError);
        }
        console.log(`\u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0646 ${user.fullName}: ${content}`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", error);
        socket.emit("error", { message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
      }
    });
    socket.on("toggleMessageLike", async (data) => {
      try {
        const { messageId } = data;
        const userId2 = socket.userId;
        if (!userId2) {
          socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647 - \u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0635\u0627\u062F\u0642" });
          return;
        }
        const user = await storage.getUser(userId2);
        if (!user) {
          socket.emit("error", { message: "\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
          return;
        }
        const result = await storage.toggleMessageLike(messageId, userId2);
        io.to(`room-1`).emit("messageLikeUpdate", {
          messageId,
          liked: result.liked,
          count: result.count,
          userId: userId2,
          userName: user.fullName
        });
        console.log(`${result.liked ? "\u0625\u0639\u062C\u0627\u0628" : "\u0625\u0644\u063A\u0627\u0621 \u0625\u0639\u062C\u0627\u0628"} \u0645\u0646 ${user.fullName} \u0644\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId}`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0625\u0639\u062C\u0627\u0628 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", error);
        socket.emit("error", { message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0625\u0639\u062C\u0627\u0628" });
      }
    });
    socket.on("joinPrivateChat", async (data) => {
      try {
        const userId2 = socket.userId;
        const { otherUserId } = data;
        if (!userId2) {
          socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647 - \u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0635\u0627\u062F\u0642" });
          return;
        }
        const user = await storage.getUser(userId2);
        const otherUser = await storage.getUser(otherUserId);
        if (!user || !otherUser) {
          socket.emit("error", { message: "\u0623\u062D\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
          return;
        }
        let privateChat = await storage.getPrivateChat(userId2, otherUserId);
        if (!privateChat) {
          privateChat = await storage.createPrivateChat(userId2, otherUserId);
        }
        const messages = await storage.getPrivateMessages(privateChat.id, 50);
        socket.join(`private-${privateChat.id}`);
        await storage.markMessagesAsRead(privateChat.id, userId2);
        socket.emit("privateChat", {
          chat: privateChat,
          otherUser: {
            id: otherUser.id,
            fullName: otherUser.fullName
          },
          messages: messages.reverse()
        });
        console.log(`\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId2} \u0627\u0646\u0636\u0645 \u0625\u0644\u0649 \u0645\u062D\u0627\u062F\u062B\u0629 \u062E\u0627\u0635\u0629 \u0645\u0639 ${otherUserId}`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0627\u0646\u0636\u0645\u0627\u0645 \u0625\u0644\u0649 \u0645\u062D\u0627\u062F\u062B\u0629 \u062E\u0627\u0635\u0629:", error);
        socket.emit("error", { message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0627\u0646\u0636\u0645\u0627\u0645 \u0625\u0644\u0649 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u0627\u0644\u062E\u0627\u0635\u0629" });
      }
    });
    socket.on("sendPrivateMessage", async (data) => {
      try {
        const { chatId, senderId, content, fileUrl, fileType } = data;
        const sender = await storage.getUser(senderId);
        if (!sender) {
          socket.emit("error", { message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0645\u0631\u0633\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
          return;
        }
        console.log(`\u0627\u0633\u062A\u0642\u0628\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u062E\u0627\u0635\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0639 \u0645\u0644\u0641: ${fileUrl || "\u0644\u0627 \u064A\u0648\u062C\u062F \u0645\u0631\u0641\u0642"}`);
        const message = await storage.createPrivateMessage({
          chatId,
          senderId,
          content,
          fileUrl: fileUrl || null,
          fileType: fileType || null,
          isRead: false
        });
        const chat = await db.query.privateChats.findFirst({
          where: eq10(privateChats.id, chatId)
        });
        if (!chat) {
          socket.emit("error", { message: "\u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
          return;
        }
        const receiverId = chat.user1Id === senderId ? chat.user2Id : chat.user1Id;
        const connectedSockets = await io.fetchSockets();
        for (const connectedSocket of connectedSockets) {
          const socketData = connectedSocket.data;
          if (socketData && socketData.userId === receiverId) {
            connectedSocket.join(`private-${chatId}`);
            console.log(`\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${receiverId} \u0625\u0644\u0649 \u0627\u0644\u063A\u0631\u0641\u0629 private-${chatId} \u062A\u0644\u0642\u0627\u0626\u064A\u0627\u064B`);
          }
        }
        io.to(`private-${chatId}`).emit("newPrivateMessage", {
          ...message,
          senderName: sender.fullName
        });
        await storage.createUserNotification({
          userId: receiverId,
          title: "\u0631\u0633\u0627\u0644\u0629 \u062E\u0627\u0635\u0629 \u062C\u062F\u064A\u062F\u0629",
          body: `\u0644\u062F\u064A\u0643 \u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0646 ${sender.fullName}`,
          type: "info",
          isRead: false
        });
        try {
          await sendPushNotificationToUser(receiverId, {
            title: `\u0631\u0633\u0627\u0644\u0629 \u062E\u0627\u0635\u0629 \u0645\u0646 ${sender.fullName}`,
            body: content.length > 50 ? content.substring(0, 50) + "..." : content,
            data: {
              type: "private_message",
              chatId,
              senderId,
              senderName: sender.fullName
            },
            url: `/private-chat/${chatId}`,
            tag: `private-${chatId}`
          });
        } catch (pushError) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 push \u0644\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u062E\u0627\u0635\u0629:", pushError);
        }
        console.log("\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u062E\u0627\u0635\u0629 \u062C\u062F\u064A\u062F\u0629", message);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u062E\u0627\u0635\u0629:", error);
        socket.emit("error", { message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u062E\u0627\u0635\u0629" });
      }
    });
    socket.on("forwardPrivateMessage", async (data) => {
      try {
        const { originalMessageId, targetChatIds } = data;
        const forwarderId = socket.userId;
        if (!forwarderId) {
          socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647 - \u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0635\u0627\u062F\u0642" });
          return;
        }
        const originalMessage = await db.query.privateMessages.findFirst({
          where: eq10(privateMessages.id, originalMessageId)
        });
        if (!originalMessage) {
          socket.emit("error", { message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0623\u0635\u0644\u064A\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
          return;
        }
        const originalChat = await db.query.privateChats.findFirst({
          where: eq10(privateChats.id, originalMessage.chatId)
        });
        if (!originalChat) {
          socket.emit("error", { message: "\u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u0627\u0644\u0623\u0635\u0644\u064A\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
          return;
        }
        if (originalChat.user1Id !== forwarderId && originalChat.user2Id !== forwarderId) {
          console.log(`\u274C \u0645\u062D\u0627\u0648\u0644\u0629 \u0625\u0639\u0627\u062F\u0629 \u062A\u0648\u062C\u064A\u0647 \u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647\u0627: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${forwarderId} \u0644\u064A\u0633 \u0639\u0636\u0648 \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${originalMessage.chatId}`);
          socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0639\u0627\u062F\u0629 \u062A\u0648\u062C\u064A\u0647 \u0647\u0630\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
          return;
        }
        const originalSender = await storage.getUser(originalMessage.senderId);
        if (!originalSender) {
          socket.emit("error", { message: "\u0627\u0644\u0645\u0631\u0633\u0644 \u0627\u0644\u0623\u0635\u0644\u064A \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
          return;
        }
        const forwarder = await storage.getUser(forwarderId);
        if (!forwarder) {
          socket.emit("error", { message: "\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
          return;
        }
        for (const targetChatId of targetChatIds) {
          try {
            const targetChat = await db.query.privateChats.findFirst({
              where: eq10(privateChats.id, targetChatId)
            });
            if (!targetChat) {
              console.error(`\u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${targetChatId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629`);
              continue;
            }
            if (targetChat.user1Id !== forwarderId && targetChat.user2Id !== forwarderId) {
              console.error(`\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${forwarderId} \u0644\u064A\u0633 \u062C\u0632\u0621\u0627\u064B \u0645\u0646 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${targetChatId}`);
              continue;
            }
            const [forwardedMessage] = await db.insert(privateMessages).values({
              chatId: targetChatId,
              senderId: forwarderId,
              content: originalMessage.content,
              fileUrl: originalMessage.fileUrl,
              fileType: originalMessage.fileType,
              isRead: false,
              isForwarded: true,
              // تعيين من الخادم فقط
              originalSenderId: originalMessage.senderId,
              // معرف المرسل الأصلي آمن
              forwardedFromSender: originalSender.fullName
              // اسم المرسل الأصلي من قاعدة البيانات
            }).returning();
            const receiverId = targetChat.user1Id === forwarderId ? targetChat.user2Id : targetChat.user1Id;
            const connectedSockets = await io.fetchSockets();
            for (const connectedSocket of connectedSockets) {
              const socketData = connectedSocket.data;
              if (socketData && socketData.userId === receiverId) {
                connectedSocket.join(`private-${targetChatId}`);
                console.log(`\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${receiverId} \u0625\u0644\u0649 \u0627\u0644\u063A\u0631\u0641\u0629 private-${targetChatId} \u062A\u0644\u0642\u0627\u0626\u064A\u0627\u064B`);
              }
            }
            io.to(`private-${targetChatId}`).emit("newPrivateMessage", {
              ...forwardedMessage,
              senderName: forwarder.fullName,
              isForwarded: true,
              forwardedFromSender: originalSender.fullName
            });
            await storage.createUserNotification({
              userId: receiverId,
              title: "\u0631\u0633\u0627\u0644\u0629 \u0645\u0639\u0627\u062F \u062A\u0648\u062C\u064A\u0647\u0647\u0627",
              body: `${forwarder.fullName} \u0623\u0639\u0627\u062F \u062A\u0648\u062C\u064A\u0647 \u0631\u0633\u0627\u0644\u0629 \u0645\u0646 ${originalSender.fullName}`,
              type: "info",
              isRead: false
            });
            console.log(`\u062A\u0645 \u0625\u0639\u0627\u062F\u0629 \u062A\u0648\u062C\u064A\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${originalMessageId} \u0625\u0644\u0649 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${targetChatId}`);
          } catch (forwardError) {
            console.error(`\u062E\u0637\u0623 \u0641\u064A \u0625\u0639\u0627\u062F\u0629 \u0627\u0644\u062A\u0648\u062C\u064A\u0647 \u0644\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${targetChatId}:`, forwardError);
          }
        }
        socket.emit("forwardSuccess", {
          message: `\u062A\u0645 \u0625\u0639\u0627\u062F\u0629 \u062A\u0648\u062C\u064A\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0625\u0644\u0649 ${targetChatIds.length} \u0645\u062D\u0627\u062F\u062B\u0629 \u0628\u0646\u062C\u0627\u062D`
        });
        console.log(`\u062A\u0645\u062A \u0625\u0639\u0627\u062F\u0629 \u062A\u0648\u062C\u064A\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${originalMessageId} \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${forwarderId} \u0625\u0644\u0649 ${targetChatIds.length} \u0645\u062D\u0627\u062F\u062B\u0629`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0639\u0627\u062F\u0629 \u0627\u0644\u062A\u0648\u062C\u064A\u0647:", error);
        socket.emit("error", { message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0639\u0627\u062F\u0629 \u062A\u0648\u062C\u064A\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
      }
    });
    socket.on("getPrivateChats", async () => {
      try {
        const userId2 = socket.userId;
        if (!userId2) {
          socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647 - \u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0635\u0627\u062F\u0642" });
          return;
        }
        const chats = await storage.getUserPrivateChats(userId2);
        const unreadCounts = await storage.getUnreadMessagesCount(userId2);
        const enhancedChats = chats.map((chat) => {
          const unreadInfo = unreadCounts.find((u) => u.chatId === chat.id);
          return {
            ...chat,
            unreadCount: unreadInfo ? parseInt(unreadInfo.count) : 0
          };
        });
        socket.emit("privateChats", enhancedChats);
        console.log(`\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId2}`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629:", error);
        socket.emit("error", { message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629" });
      }
    });
    socket.on("markMessagesAsRead", async (data) => {
      try {
        const { chatId } = data;
        const userId2 = socket.userId;
        if (!userId2) {
          socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647 - \u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0635\u0627\u062F\u0642" });
          return;
        }
        await storage.markMessagesAsRead(chatId, userId2);
        console.log(`\u062A\u0645 \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId2} \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId}`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629:", error);
        socket.emit("error", { message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629" });
      }
    });
    socket.on("disconnect", (reason) => {
      console.log(`\u{1F534} \u0627\u0646\u0642\u0637\u0639 \u0627\u062A\u0635\u0627\u0644 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${socket.id}. \u0627\u0644\u0633\u0628\u0628: ${reason}`);
    });
    socket.on("sendGroupMessage", async (data) => {
      console.log(`\u{1F4E4} \u0631\u0633\u0627\u0644\u0629 \u0645\u0631\u0633\u0644\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${socket.id}:`, data);
      try {
        const { content, groupId } = data;
        const userId2 = socket.userId;
        if (!userId2) {
          socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647 - \u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0635\u0627\u062F\u0642" });
          return;
        }
        const user = await storage.getUser(userId2);
        if (!user) {
          console.log(`\u274C \u062E\u0637\u0623: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId2} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F`);
          socket.emit("error", { message: "\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
          return;
        }
        const isBanned = await storage.isUserBanned(groupId, userId2);
        if (isBanned) {
          console.log(`\u{1F6AB} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId2} \u0645\u062D\u0638\u0648\u0631 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} - \u0631\u0641\u0636 \u0627\u0644\u0631\u0633\u0627\u0644\u0629`);
          socket.emit("messageSendFailed", {
            error: "\u062A\u0645 \u062D\u0638\u0631\u0643 \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0648\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0626\u0644 \u0623\u0648 \u0627\u0644\u0645\u0634\u0627\u0631\u0643\u0629 \u0641\u064A\u0647\u0627",
            groupId,
            isBanned: true
          });
          return;
        }
        const isMuted = await storage.isUserMuted(groupId, userId2);
        if (isMuted) {
          console.log(`\u{1F507} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId2} \u0645\u0643\u062A\u0648\u0645 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} - \u0631\u0641\u0636 \u0627\u0644\u0631\u0633\u0627\u0644\u0629`);
          socket.emit("messageSendFailed", {
            error: "\u0623\u0646\u062A \u0645\u0643\u062A\u0648\u0645 \u0641\u064A \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0648\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0626\u0644 \u062D\u0627\u0644\u064A\u0627\u064B",
            groupId,
            isMuted: true
          });
          return;
        }
        const group = await storage.getGroupChat(groupId);
        if (!group) {
          console.log(`\u274C \u062E\u0637\u0623: \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629`);
          socket.emit("error", { message: "\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
          return;
        }
        if (group.isPrivate) {
          const members = await storage.getGroupMembers(groupId);
          console.log("\u062C\u0627\u0631\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0639\u0636\u0648\u064A\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", userId2);
          const isMember = members.some((m) => m.user_id === userId2 || m.userId === userId2);
          if (!isMember) {
            socket.emit("error", { message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0626\u0644 \u0641\u064A \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
            return;
          }
        }
        const message = await storage.createGroupMessage({
          groupId,
          senderId: userId2,
          content
        });
        io.to(`group-${groupId}`).emit("newGroupMessage", {
          ...message,
          senderName: user.fullName
        });
        try {
          const groupMembers3 = await storage.getGroupMembers(groupId);
          for (const member of groupMembers3) {
            const memberId = member.user_id || member.userId;
            if (memberId !== userId2) {
              await sendPushNotificationToUser(memberId, {
                title: `${group.name}: \u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0646 ${user.fullName}`,
                body: content.length > 50 ? content.substring(0, 50) + "..." : content,
                data: {
                  type: "group_message",
                  groupId,
                  senderId: userId2,
                  senderName: user.fullName,
                  groupName: group.name
                },
                url: `/group-chat/${groupId}`,
                tag: `group-${groupId}`
              });
            }
          }
        } catch (pushError) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631\u0627\u062A push \u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629:", pushError);
        }
        console.log(`\u0631\u0633\u0627\u0644\u0629 \u0645\u062C\u0645\u0648\u0639\u0629 \u062C\u062F\u064A\u062F\u0629 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} \u0645\u0646 ${user.fullName}: ${content}`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u0645\u062C\u0645\u0648\u0639\u0629:", error);
        socket.emit("error", { message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
      }
    });
  });
  app2.get("/api/transactions", authMiddleware, checkPageRestrictions("transactions"), async (req, res, next) => {
    try {
      const userId = req.user.id;
      const transactions2 = await storage.getUserTransactions(userId);
      res.json(transactions2);
    } catch (error) {
      next(error);
    }
  });
  app2.post("/api/transactions", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const data = {
        ...req.body,
        userId
      };
      const result = insertTransactionSchema.safeParse(data);
      if (!result.success) {
        const validationError = fromZodError2(result.error);
        return res.status(400).json({ message: validationError.message });
      }
      const transaction = await storage.createTransaction(data);
      res.status(201).json({
        message: "\u062A\u0645\u062A \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        transaction
      });
    } catch (error) {
      if (error instanceof ZodError2) {
        const validationError = fromZodError2(error);
        return res.status(400).json({ message: validationError.message });
      }
      next(error);
    }
  });
  app2.get("/api/balance", authMiddleware, checkPageRestrictions("balance"), async (req, res, next) => {
    try {
      const userId = req.user.id;
      console.log("\u0637\u0644\u0628 \u0631\u0635\u064A\u062F \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", userId);
      const balances3 = await storage.getUserBalances(userId);
      console.log("\u0623\u0631\u0635\u062F\u0629 \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A:", balances3);
      const formattedBalances = balances3.reduce((acc, balance) => {
        acc[balance.currency] = balance.amount;
        return acc;
      }, {});
      console.log("\u0627\u0644\u0623\u0631\u0635\u062F\u0629 \u0627\u0644\u0645\u0646\u0633\u0642\u0629:", formattedBalances);
      res.json({ balances: formattedBalances });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0631\u0635\u064A\u062F:", error);
      next(error);
    }
  });
  app2.post("/api/balance", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const data = {
        ...req.body,
        userId
      };
      const result = insertBalanceSchema.safeParse(data);
      if (!result.success) {
        const validationError = fromZodError2(result.error);
        return res.status(400).json({ message: validationError.message });
      }
      const balance = await storage.createOrUpdateBalance(data);
      res.status(200).json({
        message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0635\u064A\u062F \u0628\u0646\u062C\u0627\u062D",
        balance
      });
    } catch (error) {
      if (error instanceof ZodError2) {
        const validationError = fromZodError2(error);
        return res.status(400).json({ message: validationError.message });
      }
      next(error);
    }
  });
  app2.post("/api/transfer", authMiddleware, async (req, res, next) => {
    try {
      const senderId = req.user.id;
      const result = transferSchema.safeParse(req.body);
      if (!result.success) {
        const validationError = fromZodError2(result.error);
        return res.status(400).json({ message: validationError.message });
      }
      const { receiver, amount, note } = req.body;
      const amountNum = Number(amount);
      const currency = req.body.currency || "LYD";
      const senderUser = await storage.getUser(senderId);
      if (!senderUser) {
        return res.status(404).json({
          message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u062D\u0633\u0627\u0628\u0643"
        });
      }
      console.log(`\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0645\u0631\u0633\u0644: ${senderUser.fullName} (${senderId}). \u062D\u0627\u0644\u0629 \u0627\u0644\u0646\u0634\u0627\u0637: [${senderUser.active}], \u0646\u0648\u0639\u0647\u0627: [${typeof senderUser.active}]`);
      const isActiveUser = typeof senderUser.active === "boolean" ? senderUser.active === true : String(senderUser.active) === "t" || String(senderUser.active) === "true";
      if (!isActiveUser) {
        console.log(`\u0645\u0646\u0639 \u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0639\u0637\u0644 ${senderUser.fullName} (${senderId}) \u0645\u0646 \u0625\u062C\u0631\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644.`);
        return res.status(403).json({
          message: "\u062D\u0633\u0627\u0628\u0643 \u0645\u0639\u0637\u0644. \u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0625\u062C\u0631\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A. \u064A\u0631\u062C\u0649 \u0627\u0644\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u0625\u062F\u0627\u0631\u0629."
        });
      }
      const receiverUser = await storage.getUserByPhoneOrId(receiver);
      if (!receiverUser) {
        return res.status(404).json({
          message: "\u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u060C \u064A\u0631\u062C\u0649 \u0627\u0644\u062A\u0623\u0643\u062F \u0645\u0646 \u0631\u0642\u0645 \u0627\u0644\u062D\u0633\u0627\u0628 \u0623\u0648 \u0631\u0642\u0645 \u0627\u0644\u0647\u0627\u062A\u0641"
        });
      }
      console.log(`\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u062D\u0627\u0644\u0629 \u0646\u0634\u0627\u0637 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 ${receiverUser.fullName} (${receiverUser.id}). \u062D\u0627\u0644\u0629 \u0627\u0644\u0646\u0634\u0627\u0637: [${receiverUser.active}], \u0646\u0648\u0639\u0647\u0627: [${typeof receiverUser.active}]`);
      const isReceiverActive = typeof receiverUser.active === "boolean" ? receiverUser.active === true : String(receiverUser.active) === "t" || String(receiverUser.active) === "true";
      if (!isReceiverActive) {
        console.log(`\u0645\u0646\u0639 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0625\u0644\u0649 \u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0639\u0637\u0644 ${receiverUser.fullName} (${receiverUser.id})`);
        return res.status(403).json({
          message: "\u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u0645\u0639\u0637\u0644. \u0644\u0627 \u064A\u0645\u0643\u0646 \u0625\u062C\u0631\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0644\u0647 \u062D\u0627\u0644\u064A\u0627\u064B."
        });
      }
      if (receiverUser.id === senderId) {
        return res.status(400).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0625\u0644\u0649 \u0646\u0641\u0633 \u0627\u0644\u062D\u0633\u0627\u0628"
        });
      }
      const commissionRate = 0.01;
      const commission = amountNum * commissionRate;
      const totalAmount = amountNum + commission;
      const senderBalance = await storage.getUserBalance(senderId, currency);
      if (!senderBalance || safeParseAmount(senderBalance.amount) < totalAmount) {
        return res.status(400).json({
          message: "\u0627\u0644\u0631\u0635\u064A\u062F \u063A\u064A\u0631 \u0643\u0627\u0641\u064D \u0644\u0625\u062A\u0645\u0627\u0645 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0645\u0639 \u0627\u0644\u0639\u0645\u0648\u0644\u0629"
        });
      }
      const transfer = await storage.transferMoney(
        senderId,
        receiverUser.id,
        amountNum,
        commission,
        currency,
        note
      );
      try {
        const transferLogData = {
          transferId: transfer.id,
          senderName: senderUser.fullName,
          senderAccountNumber: senderUser.accountNumber || `#${senderUser.id}`,
          receiverName: receiverUser.fullName,
          receiverAccountNumber: receiverUser.accountNumber || `#${receiverUser.id}`,
          amount: amountNum.toString(),
          commission: commission.toString(),
          currency,
          note: note || null,
          status: "completed",
          ipAddress: getClientPublicIP(req).ip,
          userAgent: req.get("User-Agent") || "unknown"
        };
        await db.insert(internalTransferLogs).values(transferLogData);
        console.log("\u{1F4CA} \u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0641\u064A \u0633\u062C\u0644 \u0627\u0644\u0645\u062F\u064A\u0631:", transfer.id);
      } catch (logError) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0641\u064A \u0633\u062C\u0644 \u0627\u0644\u0645\u062F\u064A\u0631:", logError);
      }
      try {
        console.log("\u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0631\u0633\u0644...");
        const senderNotification = await storage.createUserNotification({
          userId: senderId,
          title: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u062A\u062D\u0648\u064A\u0644 \u0628\u0646\u062C\u0627\u062D",
          body: `\u062A\u0645 \u062A\u062D\u0648\u064A\u0644 ${amountNum} ${currency} \u0625\u0644\u0649 ${receiverUser.fullName} \u0628\u0646\u062C\u0627\u062D. \u0627\u0644\u0639\u0645\u0648\u0644\u0629: ${commission} ${currency}`,
          type: "success",
          isRead: false
        });
        console.log("\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0631\u0633\u0644:", senderNotification);
      } catch (err) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0631\u0633\u0644:", err);
      }
      try {
        console.log("\u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0633\u062A\u0644\u0645...");
        const receiverUser2 = await storage.getUser(receiverUser.id);
        const senderUser2 = await storage.getUser(senderId);
        const receiverNotification = await storage.createUserNotification({
          userId: receiverUser.id,
          title: "\u0627\u0633\u062A\u0644\u0627\u0645 \u062A\u062D\u0648\u064A\u0644 \u062C\u062F\u064A\u062F",
          body: `\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u062A\u062D\u0648\u064A\u0644 \u0628\u0642\u064A\u0645\u0629 ${amountNum} ${currency} \u0645\u0646 ${senderUser2?.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645 \u0622\u062E\u0631"}`,
          type: "success",
          isRead: false
        });
        console.log("\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0633\u062A\u0644\u0645:", receiverNotification);
      } catch (err) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0633\u062A\u0644\u0645:", err);
      }
      res.status(200).json({
        message: "\u062A\u0645 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u0646\u062C\u0627\u062D",
        transfer: {
          id: transfer.id,
          amount: transfer.amount,
          commission: transfer.commission,
          currency: transfer.currency,
          receiverName: receiverUser.fullName,
          date: transfer.createdAt
        }
      });
    } catch (error) {
      if (error instanceof ZodError2) {
        const validationError = fromZodError2(error);
        return res.status(400).json({ message: validationError.message });
      }
      next(error);
    }
  });
  app2.get("/api/users/search", authMiddleware, async (req, res) => {
    try {
      const { type, id: currentUserId } = req.user;
      const query = req.query.q || req.query.query;
      if (!query || query.length < 2) {
        return res.json([]);
      }
      if (type === "admin") {
        const searchResults2 = await db.select({
          id: users.id,
          fullName: users.fullName,
          phone: users.phone,
          accountNumber: users.accountNumber,
          type: users.type
        }).from(users).where(
          or4(
            like4(users.fullName, `%${query}%`),
            like4(users.phone, `%${query}%`),
            like4(users.accountNumber, `%${query}%`)
          )
        ).limit(10);
        return res.json(searchResults2);
      }
      const searchResults = await db.select({
        id: users.id,
        fullName: users.fullName,
        accountNumber: users.accountNumber,
        type: users.type
      }).from(users).where(
        and9(
          // البحث بالاسم الكامل أو رقم الحساب فقط (وليس الهاتف)
          or4(
            like4(users.fullName, `%${query}%`),
            like4(users.accountNumber, `%${query}%`)
          ),
          // فقط المستخدمين النشطين
          eq10(users.active, true)
        )
      ).limit(5);
      const filteredSearchResults = searchResults.filter((user) => user.id !== currentUserId);
      const filteredResults = filteredSearchResults.map((user) => ({
        id: user.id,
        fullName: user.fullName,
        accountNumber: user.accountNumber,
        type: user.type
        // لا نُرجع phone للمستخدمين العاديين
      }));
      res.json(filteredResults);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0628\u062D\u062B" });
    }
  });
  app2.post("/api/internal-transfer", authMiddleware, async (req, res) => {
    try {
      const senderId = req.user.id;
      const { recipientId, currency, amount, note } = req.body;
      if (!recipientId || !currency || !amount || amount <= 0) {
        return res.status(400).json({
          message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u062C\u0645\u064A\u0639 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629 \u0628\u0634\u0643\u0644 \u0635\u062D\u064A\u062D"
        });
      }
      if (senderId === recipientId) {
        return res.status(400).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0625\u0644\u0649 \u0646\u0641\u0633 \u0627\u0644\u062D\u0633\u0627\u0628"
        });
      }
      const recipient = await storage.getUser(recipientId);
      if (!recipient) {
        return res.status(404).json({
          message: "\u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F"
        });
      }
      if (!recipient.active) {
        return res.status(400).json({
          message: `\u0627\u0644\u062D\u0633\u0627\u0628 ${recipient.accountNumber} \u063A\u064A\u0631 \u0645\u0641\u0639\u0644 \u0644\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062F\u0627\u062E\u0644\u064A\u0629. \u064A\u0631\u062C\u0649 \u0627\u0644\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u0625\u062F\u0627\u0631\u0629.`
        });
      }
      let commissionRate = 0.01;
      let rateType = "default";
      try {
        const systemCommissionRate = await storage.getSystemCommissionRate("internal", currency);
        if (systemCommissionRate && systemCommissionRate.isActive) {
          if (systemCommissionRate.fixedAmount && parseFloat(systemCommissionRate.fixedAmount) > 0) {
            commissionRate = parseFloat(systemCommissionRate.fixedAmount);
            rateType = "fixed";
            console.log(`\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062B\u0627\u0628\u062A\u0629 \u0627\u0644\u0645\u062D\u062F\u062F\u0629 \u0645\u0646 \u0627\u0644\u0645\u062F\u064A\u0631: ${commissionRate} ${currency}`);
          } else if (systemCommissionRate.perMilleRate && parseFloat(systemCommissionRate.perMilleRate) > 0) {
            commissionRate = parseFloat(systemCommissionRate.perMilleRate);
            rateType = "per_mille";
            console.log(`\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062F\u0629 \u0645\u0646 \u0627\u0644\u0645\u062F\u064A\u0631: ${(commissionRate * 1e3).toFixed(1)}\u2030 \u0644\u0644\u0639\u0645\u0644\u0629 ${currency}`);
          } else {
            commissionRate = parseFloat(systemCommissionRate.commissionRate);
            rateType = "percentage";
            console.log(`\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062F\u0629 \u0645\u0646 \u0627\u0644\u0645\u062F\u064A\u0631: ${(commissionRate * 100).toFixed(2)}% \u0644\u0644\u0639\u0645\u0644\u0629 ${currency}`);
          }
        } else {
          console.log(`\u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629: ${(commissionRate * 100).toFixed(2)}% \u0644\u0644\u0639\u0645\u0644\u0629 ${currency}`);
        }
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0645\u0646 \u0627\u0644\u0646\u0638\u0627\u0645\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629:", error);
      }
      let commission = 0;
      if (rateType === "fixed") {
        commission = commissionRate;
      } else if (rateType === "per_mille") {
        commission = amount * commissionRate;
      } else {
        commission = amount * commissionRate;
      }
      const totalAmount = amount + commission;
      const senderBalance = await storage.getUserBalance(senderId, currency);
      if (!senderBalance || parseFloat(senderBalance.amount) < totalAmount) {
        return res.status(400).json({
          message: `\u0627\u0644\u0631\u0635\u064A\u062F \u063A\u064A\u0631 \u0643\u0627\u0641\u064D \u0644\u0625\u062A\u0645\u0627\u0645 \u0627\u0644\u062A\u062D\u0648\u064A\u0644. \u0627\u0644\u0645\u0637\u0644\u0648\u0628: ${totalAmount} (${amount} + ${commission} \u0639\u0645\u0648\u0644\u0629)`
        });
      }
      const transfer = await storage.createInternalTransfer({
        senderId,
        receiverId: recipientId,
        currency,
        amount: amount.toString(),
        commission: commission.toString(),
        referenceNumber: ReferenceGenerator.generateInternalTransferReference(Date.now(), "INT"),
        note: note || null
      });
      await storage.updateUserBalance(senderId, currency, -totalAmount);
      await storage.updateUserBalance(recipientId, currency, amount);
      if (commission > 0) {
        const { allocateFixedReferralReward: allocateFixedReferralReward2 } = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
        const operationType = currency === "LYD" ? "transfer_lyd" : "transfer_usd";
        const referralResult = await allocateFixedReferralReward2(
          transfer.id,
          operationType,
          commission,
          currency,
          senderId
        );
        const netCommission = referralResult.netSystemCommission;
        if (netCommission > 0) {
          await storage.addCommissionPoolTransaction({
            sourceType: "user",
            sourceId: senderId,
            sourceName: req.user.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645",
            currencyCode: currency,
            amount: netCommission.toString(),
            transactionType: "credit",
            relatedTransactionId: transfer.id,
            description: referralResult.hasReferral ? `\u0639\u0645\u0648\u0644\u0629 \u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A (\u0628\u0639\u062F \u062E\u0635\u0645 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 ${referralResult.rewardAmount}) \u0645\u0646 ${req.user.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645"} \u0625\u0644\u0649 ${recipient.fullName}` : `\u0639\u0645\u0648\u0644\u0629 \u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A \u0645\u0646 ${req.user.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645"} \u0625\u0644\u0649 ${recipient.fullName}`
          });
        }
        console.log(`\u062A\u0645 \u0625\u0636\u0627\u0641\u0629 \u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 ${netCommission} ${currency} \u0625\u0644\u0649 \u062D\u0633\u0627\u0628 \u0627\u0644\u062A\u062C\u0645\u064A\u0639 (\u0623\u0635\u0644\u064A\u0629: ${commission}, \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629: ${referralResult.rewardAmount})`);
      }
      const baseRef = transfer.referenceNumber || ReferenceGenerator.generateInternalTransferReference(transfer.id, "INT");
      const senderReferenceNumber = baseRef + "-OUT";
      const receiverReferenceNumber = baseRef + "-IN";
      const senderTransaction = await storage.createTransaction({
        userId: senderId,
        type: "internal_transfer_out",
        amount: (-totalAmount).toString(),
        currency,
        description: `\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A \u0625\u0644\u0649 ${recipient.fullName} (${amount} + ${commission.toFixed(2)} \u0639\u0645\u0648\u0644\u0629)${note ? ` - ${note}` : ""}`,
        referenceNumber: senderReferenceNumber
      });
      const receiverTransaction = await storage.createTransaction({
        userId: recipientId,
        type: "internal_transfer_in",
        amount: amount.toString(),
        currency,
        description: `\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A \u0645\u0646 ${req.user.fullName || req.user.email}${note ? ` - ${note}` : ""}`,
        referenceNumber: receiverReferenceNumber
      });
      await storage.createUserNotification({
        userId: senderId,
        title: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u0646\u062C\u0627\u062D",
        body: `\u062A\u0645 \u062A\u062D\u0648\u064A\u0644 ${amount} ${currency} \u0625\u0644\u0649 ${recipient.fullName} \u0628\u0646\u062C\u0627\u062D`,
        type: "success",
        isRead: false
      });
      await storage.createUserNotification({
        userId: recipientId,
        title: "\u0627\u0633\u062A\u0644\u0627\u0645 \u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A",
        body: `\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 ${amount} ${currency} \u0645\u0646 ${req.user.fullName || req.user.email}${note ? ` - \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629: ${note}` : ""}`,
        type: "success",
        isRead: false
      });
      try {
        const settings = await rewardsService.getSettings();
        await rewardsService.awardPoints({
          userId: senderId,
          points: settings.transferPoints,
          action: "internal_transfer",
          description: `Internal transfer: ${amount} ${currency}`,
          descriptionAr: `\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644\u064A: ${amount} ${currency}`,
          referenceId: transfer.id.toString(),
          referenceType: "internal_transfer"
        });
        console.log(`\u2705 \u062A\u0645 \u0645\u0646\u062D ${settings.transferPoints} \u0646\u0642\u0637\u0629 \u0644\u0644\u0645\u0631\u0633\u0644 ${senderId} \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0627\u062E\u0644\u064A`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0627\u0644\u0646\u0642\u0627\u0637 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0627\u062E\u0644\u064A:", error);
      }
      try {
        const operationType = currency === "LYD" ? "transfer_lyd" : "transfer_usd";
        await allocateFixedReferralReward(
          transfer.id,
          operationType,
          commission,
          currency,
          senderId
        );
        console.log(`\u2705 \u062A\u0645 \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u062B\u0627\u0628\u062A\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 ${transfer.id}`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      }
      res.json({
        message: "\u062A\u0645 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u0646\u062C\u0627\u062D",
        id: transfer.id,
        transactionId: senderTransaction.id,
        amount,
        currency,
        fee: commission,
        netAmount: amount,
        ref: `INT-${Date.now()}-${transfer.id}`,
        recipient: {
          id: recipient.id,
          fullName: recipient.fullName,
          accountNumber: recipient.accountNumber
        },
        sender: {
          id: senderId,
          fullName: req.user.fullName,
          accountNumber: req.user.accountNumber
        },
        note: note || null,
        createdAt: (/* @__PURE__ */ new Date()).toISOString()
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0627\u062E\u0644\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u062A\u062D\u0648\u064A\u0644" });
    }
  });
  app2.get("/api/transfers", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const transfersResult = await db.execute(sql12`
        SELECT t.*, 
               sender.full_name as sender_name,
               sender.account_number as sender_account_number,
               receiver.full_name as receiver_name,
               receiver.account_number as receiver_account_number,
               CASE WHEN t.sender_id = ${userId} THEN true ELSE false END as is_sender,
               CASE WHEN t.receiver_id = ${userId} THEN true ELSE false END as is_receiver
        FROM transfers t
        LEFT JOIN users sender ON t.sender_id = sender.id
        LEFT JOIN users receiver ON t.receiver_id = receiver.id
        WHERE t.sender_id = ${userId} OR t.receiver_id = ${userId}
        ORDER BY t.created_at DESC
      `);
      res.json(transfersResult.rows);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/transfers/:transactionId/details", authMiddleware, async (req, res) => {
    try {
      const { transactionId } = req.params;
      const userId = req.user.id;
      const result = await db.execute(sql12`
        SELECT 
          t.id as transaction_id,
          t.txn_type,
          t.amount,
          t.currency,
          t.commission,
          t.status,
          t.created_at,
          t.note,
          tr.id as transfer_id,
          tr.created_at as transfer_date,
          sender.id as sender_id,
          sender.full_name as sender_name,
          sender.account_number as sender_account,
          receiver.id as receiver_id,
          receiver.full_name as receiver_name,
          receiver.account_number as receiver_account
        FROM transactions t
        LEFT JOIN transfers tr ON t.related_transfer_id = tr.id
        LEFT JOIN users sender ON tr.sender_id = sender.id
        LEFT JOIN users receiver ON tr.receiver_id = receiver.id
        WHERE t.id = ${transactionId}
          AND (tr.sender_id = ${userId} OR tr.receiver_id = ${userId})
        LIMIT 1
      `);
      if (result.rows.length === 0) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0623\u0648 \u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u064A\u0647\u0627" });
      }
      const transaction = result.rows[0];
      const receiptData = {
        id: transaction.transfer_id,
        transferId: transaction.transfer_id,
        transactionId: transaction.transaction_id,
        fromUser: {
          id: transaction.sender_id,
          fullName: transaction.sender_name || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          accountNumber: transaction.sender_account || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
        },
        toUser: {
          id: transaction.receiver_id,
          fullName: transaction.receiver_name || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          accountNumber: transaction.receiver_account || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
        },
        currency: transaction.currency,
        amount: parseFloat(transaction.amount),
        fee: parseFloat(transaction.commission || "0"),
        netAmount: parseFloat(transaction.amount),
        status: transaction.status === "completed" ? "\u0645\u0643\u062A\u0645\u0644" : transaction.status,
        ref: `INT-${transaction.transfer_id}`,
        createdAt: transaction.transfer_date || transaction.created_at,
        note: transaction.note,
        hash: `hash_${transaction.transaction_id}_${Date.now()}`
      };
      res.json(receiptData);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644" });
    }
  });
  app2.post("/api/upgrade-request", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const pendingRequest = await storage.getPendingUpgradeRequest(userId);
      if (pendingRequest) {
        return res.status(400).json({
          message: "\u0644\u062F\u064A\u0643 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646 \u0642\u064A\u062F \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629 \u0628\u0627\u0644\u0641\u0639\u0644"
        });
      }
      const user = await storage.getUser(userId);
      if (user?.type === "office") {
        return res.status(400).json({
          message: "\u062D\u0633\u0627\u0628\u0643 \u0645\u0631\u0642\u0649 \u0628\u0627\u0644\u0641\u0639\u0644 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646"
        });
      }
      if (!user?.verified) {
        return res.status(400).json({
          message: "\u064A\u062C\u0628 \u062A\u0648\u062B\u064A\u0642 \u0627\u0644\u062D\u0633\u0627\u0628 \u0623\u0648\u0644\u0627\u064B \u0642\u0628\u0644 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646. \u064A\u0631\u062C\u0649 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0645\u0633\u062A\u0646\u062F\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629 \u0644\u0644\u062A\u0648\u062B\u064A\u0642."
        });
      }
      const result = upgradeRequestSchema.safeParse(req.body);
      if (!result.success) {
        const validationError = fromZodError2(result.error);
        return res.status(400).json({ message: validationError.message });
      }
      const requestData = {
        userId,
        requestType: "agent_upgrade",
        // نوع الطلب للتحويل بين المدن
        fullName: req.body.fullName,
        phone: req.body.phone,
        city: req.body.city,
        message: req.body.message || ""
      };
      const request = await storage.createUpgradeRequest(requestData);
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646 \u0628\u0646\u062C\u0627\u062D\u060C \u0633\u064A\u062A\u0645 \u0645\u0631\u0627\u062C\u0639\u062A\u0647 \u0642\u0631\u064A\u0628\u0627\u064B",
        request
      });
    } catch (error) {
      if (error instanceof ZodError2) {
        const validationError = fromZodError2(error);
        return res.status(400).json({ message: validationError.message });
      }
      next(error);
    }
  });
  app2.get("/api/upgrade-requests", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const requests = await storage.getUserUpgradeRequests(userId);
      res.json(requests);
    } catch (error) {
      next(error);
    }
  });
  app2.post("/api/admin/upgrade-requests/:id", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const user = await storage.getUser(userId);
      if (user?.type !== "admin") {
        return res.status(403).json({
          message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629"
        });
      }
      const requestId = parseInt(req.params.id);
      const { status, notes } = req.body;
      if (status !== "approved" && status !== "rejected") {
        return res.status(400).json({
          message: "\u062D\u0627\u0644\u0629 \u0627\u0644\u0637\u0644\u0628 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 approved \u0623\u0648 rejected"
        });
      }
      const updatedRequest = await storage.updateRequestStatus(requestId, status, notes);
      res.json({
        message: status === "approved" ? "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0627\u0644\u0637\u0644\u0628 \u0628\u0646\u062C\u0627\u062D" : "\u062A\u0645 \u0631\u0641\u0636 \u0627\u0644\u0637\u0644\u0628",
        request: updatedRequest
      });
    } catch (error) {
      next(error);
    }
  });
  app2.post("/api/test/create-notification", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      console.log("\u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0627\u062E\u062A\u0628\u0627\u0631\u064A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", userId);
      const result = await db.$client.query(`
        INSERT INTO user_notifications (user_id, title, body, type, is_read)
        VALUES ($1, $2, $3, $4, $5)
        RETURNING *
      `, [userId, "\u0625\u0634\u0639\u0627\u0631 \u0627\u062E\u062A\u0628\u0627\u0631\u064A", "\u0647\u0630\u0627 \u0625\u0634\u0639\u0627\u0631 \u0627\u062E\u062A\u0628\u0627\u0631\u064A \u0644\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0639\u0645\u0644 \u0646\u0638\u0627\u0645 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A", "info", false]);
      console.log("\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0627\u0644\u0627\u062E\u062A\u0628\u0627\u0631\u064A:", result.rows[0]);
      res.json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0627\u062E\u062A\u0628\u0627\u0631\u064A \u0628\u0646\u062C\u0627\u062D",
        notification: result.rows[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0627\u0644\u0627\u062E\u062A\u0628\u0627\u0631\u064A:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0627\u0644\u062A\u062C\u0631\u064A\u0628\u064A",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  app2.post("/api/test/add-balance", async (req, res, next) => {
    try {
      const { userId, currency, amount } = req.body;
      if (!userId || !currency || !amount) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u062A\u0648\u0641\u064A\u0631 userId \u0648currency \u0648amount" });
      }
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const balance = await storage.createOrUpdateBalance({
        userId,
        currency,
        amount: amount.toString()
      });
      res.json({
        message: `\u062A\u0645 \u0625\u0636\u0627\u0641\u0629 ${amount} ${currency} \u0625\u0644\u0649 \u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0646\u062C\u0627\u062D`,
        balance
      });
    } catch (error) {
      next(error);
    }
  });
  app2.post("/api/market", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const user = await storage.getUser(userId);
      if (!user || user.active === false) {
        return res.status(403).json({
          message: "\u062D\u0633\u0627\u0628\u0643 \u0645\u0639\u0637\u0644. \u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0625\u0646\u0634\u0627\u0621 \u0639\u0631\u0648\u0636 \u0641\u064A \u0627\u0644\u0633\u0648\u0642. \u064A\u0631\u062C\u0649 \u0627\u0644\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u0625\u062F\u0627\u0631\u0629."
        });
      }
      const result = marketOfferSchema.safeParse(req.body);
      if (!result.success) {
        const validationError = fromZodError2(result.error);
        return res.status(400).json({ message: validationError.message });
      }
      const { side, baseCurrency, quoteCurrency, minAmount, maxAmount, price, expirationMinutes } = req.body;
      if (side === "sell") {
        const userBalance = await storage.getUserBalance(userId, baseCurrency);
        if (!userBalance || safeParseAmount(userBalance.amount) < safeParseAmount(maxAmount)) {
          return res.status(400).json({
            message: `\u0631\u0635\u064A\u062F\u0643 \u0645\u0646 ${baseCurrency} \u063A\u064A\u0631 \u0643\u0627\u0641\u064D \u0644\u0625\u0646\u0634\u0627\u0621 \u0647\u0630\u0627 \u0627\u0644\u0639\u0631\u0636`
          });
        }
        const newAmount = safeParseAmount(userBalance.amount) - safeParseAmount(maxAmount);
        console.log(`\u{1F512} \u062A\u0639\u0644\u064A\u0642 \u0627\u0644\u0645\u0628\u0644\u063A: ${safeParseAmount(userBalance.amount)} - ${safeParseAmount(maxAmount)} = ${newAmount}`);
        await storage.setUserBalance(userId, baseCurrency, newAmount.toString());
      }
      let expiresAt = null;
      if (expirationMinutes && expirationMinutes > 0) {
        expiresAt = /* @__PURE__ */ new Date();
        expiresAt.setMinutes(expiresAt.getMinutes() + expirationMinutes);
      }
      const offer = await storage.createMarketOffer({
        userId,
        side,
        // use the actual side value
        baseCurrency,
        quoteCurrency,
        price: price.toString(),
        minAmount: minAmount.toString(),
        maxAmount: maxAmount.toString(),
        remainingAmount: maxAmount.toString(),
        // Initially remaining = full amount
        status: "open",
        expiresAt
      });
      if (side === "sell") {
        await storage.createTransaction({
          userId,
          type: "exchange",
          amount: (-Number(maxAmount)).toString(),
          // خصم العملة المباعة
          currency: baseCurrency,
          description: `\u062A\u0639\u0644\u064A\u0642 ${maxAmount} ${baseCurrency} \u0644\u0639\u0631\u0636 \u0628\u064A\u0639 \u0628\u0633\u0639\u0631 ${price} ${quoteCurrency} - \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A: ${offer.id}`,
          referenceNumber: `OFFER-${offer.id}`
        });
        console.log(`\u{1F4DD} \u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u062E\u0635\u0645 \u0627\u0644\u0639\u0645\u0644\u0629 \u0627\u0644\u0645\u0628\u0627\u0639\u0629: -${maxAmount} ${baseCurrency}`);
      }
      try {
        const settings = await rewardsService.getSettings();
        await rewardsService.awardPoints({
          userId,
          points: settings.transferPoints || 5,
          // استخدام transferPoints أو قيمة افتراضية
          action: "create_offer",
          description: `Create market offer: ${side} ${maxAmount} ${baseCurrency}`,
          descriptionAr: `\u0625\u0646\u0634\u0627\u0621 \u0639\u0631\u0636: ${side === "sell" ? "\u0628\u064A\u0639" : "\u0634\u0631\u0627\u0621"} ${maxAmount} ${baseCurrency}`,
          referenceId: offer.id.toString(),
          referenceType: "market_offer"
        });
        console.log(`\u2705 \u062A\u0645 \u0645\u0646\u062D ${settings.transferPoints || 5} \u0646\u0642\u0637\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0644\u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0627\u0644\u0646\u0642\u0627\u0637 \u0644\u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636:", error);
      }
      try {
        const realtimeEvents3 = req.app.get("realtimeEvents");
        if (realtimeEvents3) {
          realtimeEvents3.emitMarketOrderCreated({
            id: offer.id,
            userId,
            side,
            baseCurrency,
            quoteCurrency,
            amount: maxAmount,
            price,
            total: Number(maxAmount) * Number(price)
          });
          realtimeEvents3.emitOrderbookUpdate(baseCurrency, quoteCurrency);
          if (side === "sell") {
            const userBalance = await storage.getUserBalance(userId, baseCurrency);
            if (userBalance) {
              realtimeEvents3.emitBalanceUpdate(userId, baseCurrency, userBalance.amount);
            }
          }
          console.log(`\u{1F680} \u062A\u0645 \u0628\u062B \u0627\u0644\u0623\u062D\u062F\u0627\u062B \u0627\u0644\u0644\u062D\u0638\u064A\u0629 \u0644\u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636 ${offer.id}`);
        }
      } catch (eventError) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0628\u062B \u0627\u0644\u0623\u062D\u062F\u0627\u062B \u0627\u0644\u0644\u062D\u0638\u064A\u0629 \u0644\u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636:", eventError);
      }
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636 \u0628\u0646\u062C\u0627\u062D",
        offer
      });
    } catch (error) {
      if (error instanceof ZodError2) {
        const validationError = fromZodError2(error);
        return res.status(400).json({ message: validationError.message });
      }
      next(error);
    }
  });
  app2.get("/api/market", authMiddleware, checkPageRestrictions("market"), async (req, res, next) => {
    try {
      const expiredCount = await storage.expireMarketOffers();
      if (expiredCount > 0) {
        console.log(`\u{1F552} \u062A\u0645 \u0625\u0644\u063A\u0627\u0621 ${expiredCount} \u0639\u0631\u0636 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629`);
      }
      const { status, type, from, to } = req.query;
      const filters = {
        status: status || "open"
      };
      if (type) {
        filters.offerType = type;
      }
      if (from) {
        filters.fromCurrency = from;
      }
      if (to) {
        filters.toCurrency = to;
      }
      const offers = await storage.getMarketOffers(filters);
      const enhancedOffers = await Promise.all(
        offers.map(async (offer) => {
          const user = await storage.getUser(offer.userId);
          return {
            ...offer,
            userName: user ? user.fullName : "Unknown",
            userFullName: user ? user.fullName : "Unknown",
            userType: user ? user.type : "unknown",
            // Legacy field mappings for frontend compatibility
            offerType: offer.side,
            fromCurrency: offer.baseCurrency,
            toCurrency: offer.quoteCurrency,
            rate: parseFloat(offer.price),
            amount: offer.maxAmount,
            available: offer.remainingAmount
          };
        })
      );
      res.json(enhancedOffers);
    } catch (error) {
      next(error);
    }
  });
  app2.get("/api/market/my-offers", authMiddleware, checkPageRestrictions("market"), async (req, res, next) => {
    try {
      const userId = req.user.id;
      const offers = await storage.getUserMarketOffers(userId);
      const enhancedOffers = offers.map((offer) => ({
        ...offer,
        offerType: offer.side,
        fromCurrency: offer.baseCurrency,
        toCurrency: offer.quoteCurrency,
        rate: parseFloat(offer.price),
        amount: offer.maxAmount,
        available: offer.remainingAmount
      }));
      res.json(enhancedOffers);
    } catch (error) {
      next(error);
    }
  });
  app2.delete("/api/market/:id/cancel", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const offerId = parseInt(req.params.id);
      console.log(`\u{1F504} \u0637\u0644\u0628 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u0639\u0631\u0636 ${offerId} \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
      const offer = await storage.getMarketOfferById(offerId);
      if (!offer) {
        return res.status(404).json({ message: "\u0627\u0644\u0639\u0631\u0636 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (offer.userId !== userId) {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0625\u0644\u063A\u0627\u0621 \u0639\u0631\u0648\u0636 \u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646 \u0622\u062E\u0631\u064A\u0646" });
      }
      if (offer.status !== "open" && offer.status !== "active") {
        return res.status(400).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0625\u0644\u063A\u0627\u0621 \u0639\u0631\u0636 \u0645\u0646\u062A\u0647\u064A \u0623\u0648 \u0645\u0644\u063A\u064A" });
      }
      if (offer.side === "sell" && Number(offer.remainingAmount) > 0) {
        const userBalance = await storage.getUserBalance(userId, offer.baseCurrency);
        const newAmount = userBalance ? safeParseAmount(userBalance.amount) + safeParseAmount(offer.remainingAmount) : safeParseAmount(offer.remainingAmount);
        console.log(`\u0625\u0639\u0627\u062F\u0629 \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u062D\u062C\u0648\u0632 \u0639\u0646\u062F \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u0639\u0631\u0636: ${userBalance ? safeParseAmount(userBalance.amount) : 0} + ${safeParseAmount(offer.remainingAmount)} = ${newAmount}`);
        await storage.setUserBalance(userId, offer.baseCurrency, newAmount.toString());
        await storage.createTransaction({
          userId,
          type: "exchange",
          amount: Number(offer.remainingAmount).toString(),
          // إعادة العملة المباعة
          currency: offer.baseCurrency,
          description: `\u0625\u0639\u0627\u062F\u0629 ${offer.remainingAmount} ${offer.baseCurrency} \u0645\u0646 \u0625\u0644\u063A\u0627\u0621 \u0639\u0631\u0636 \u0627\u0644\u0628\u064A\u0639 - \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A: ${offer.id}`,
          referenceNumber: `CANCEL-${offer.id}`
        });
        console.log(`\u{1F4DD} \u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0625\u0639\u0627\u062F\u0629 \u0627\u0644\u0639\u0645\u0644\u0629 \u0627\u0644\u0645\u0628\u0627\u0639\u0629 \u0641\u064A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A: +${offer.remainingAmount} ${offer.baseCurrency}`);
      }
      const updatedOffer = await storage.updateMarketOfferStatus(offerId, "cancelled");
      try {
        const realtimeEvents3 = req.app.get("realtimeEvents");
        if (realtimeEvents3) {
          realtimeEvents3.emitMarketOrderCanceled({
            id: offerId,
            userId,
            baseCurrency: offer.baseCurrency,
            quoteCurrency: offer.quoteCurrency
          });
          realtimeEvents3.emitOrderbookUpdate(offer.baseCurrency, offer.quoteCurrency);
          if (offer.side === "sell" && Number(offer.remainingAmount) > 0) {
            const userBalance = await storage.getUserBalance(userId, offer.baseCurrency);
            if (userBalance) {
              realtimeEvents3.emitBalanceUpdate(userId, offer.baseCurrency, userBalance.amount);
            }
          }
          console.log(`\u{1F680} \u062A\u0645 \u0628\u062B \u0627\u0644\u0623\u062D\u062F\u0627\u062B \u0627\u0644\u0644\u062D\u0638\u064A\u0629 \u0644\u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u0639\u0631\u0636 ${offerId}`);
        }
      } catch (eventError) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0628\u062B \u0627\u0644\u0623\u062D\u062F\u0627\u062B \u0627\u0644\u0644\u062D\u0638\u064A\u0629 \u0644\u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u0639\u0631\u0636:", eventError);
      }
      res.json({
        message: "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u0639\u0631\u0636 \u0628\u0646\u062C\u0627\u062D",
        offer: updatedOffer
      });
    } catch (error) {
      next(error);
    }
  });
  app2.post("/api/market/:id/execute", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const offerId = parseInt(req.params.id);
      const { amount } = req.body;
      const user = await storage.getUser(userId);
      if (!user || user.active === false) {
        return res.status(403).json({
          message: "\u062D\u0633\u0627\u0628\u0643 \u0645\u0639\u0637\u0644. \u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u062A\u0646\u0641\u064A\u0630 \u0639\u0631\u0648\u0636 \u0627\u0644\u0633\u0648\u0642. \u064A\u0631\u062C\u0649 \u0627\u0644\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u0625\u062F\u0627\u0631\u0629."
        });
      }
      if (!amount || Number(amount) <= 0) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u062A\u062D\u062F\u064A\u062F \u0643\u0645\u064A\u0629 \u0635\u062D\u064A\u062D\u0629" });
      }
      const offer = await storage.getMarketOfferById(offerId);
      if (!offer) {
        return res.status(404).json({ message: "\u0627\u0644\u0639\u0631\u0636 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (offer.status !== "open" && offer.status !== "active") {
        return res.status(400).json({ message: "\u0627\u0644\u0639\u0631\u0636 \u063A\u064A\u0631 \u0645\u062A\u0627\u062D \u062D\u0627\u0644\u064A\u0627\u064B" });
      }
      if (Number(offer.remainingAmount) < Number(amount)) {
        return res.status(400).json({ message: "\u0627\u0644\u0643\u0645\u064A\u0629 \u0627\u0644\u0645\u062A\u0627\u062D\u0629 \u063A\u064A\u0631 \u0643\u0627\u0641\u064A\u0629" });
      }
      if (offer.userId === userId) {
        return res.status(400).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u062A\u0646\u0641\u064A\u0630 \u0639\u0631\u0648\u0636\u0643 \u0627\u0644\u062E\u0627\u0635\u0629" });
      }
      console.log(`\u2139\uFE0F \u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u0639\u0631\u0636 - \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0645\u062F\u0641\u0648\u0639\u0629 \u0645\u0633\u0628\u0642\u0627\u064B \u0639\u0646\u062F \u0627\u0644\u0646\u0634\u0631`);
      const fromCurrency = offer.baseCurrency;
      const toCurrency = offer.quoteCurrency;
      const rate = offer.price;
      const available = offer.remainingAmount;
      const offerType = offer.side;
      if (offerType === "sell") {
        const paymentAmount = Number(amount) * Number(rate);
        const buyerBalance = await storage.getUserBalance(userId, toCurrency);
        if (!buyerBalance || safeParseAmount(buyerBalance.amount) < paymentAmount) {
          return res.status(400).json({
            message: `\u0631\u0635\u064A\u062F\u0643 \u0645\u0646 ${toCurrency} \u063A\u064A\u0631 \u0643\u0627\u0641\u064D \u0644\u0625\u062A\u0645\u0627\u0645 \u0627\u0644\u0639\u0645\u0644\u064A\u0629`
          });
        }
        const commission = 0;
        const sellerReceives = paymentAmount;
        console.log(`\u{1F4B0} \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0639\u0645\u0644\u064A\u0629: \u0627\u0644\u0645\u0634\u062A\u0631\u064A \u064A\u062F\u0641\u0639 ${paymentAmount}, \u0627\u0644\u0628\u0627\u0626\u0639 \u064A\u0633\u062A\u0644\u0645 ${sellerReceives} (\u0628\u062F\u0648\u0646 \u062E\u0635\u0645 \u0639\u0645\u0648\u0644\u0629 \u0625\u0636\u0627\u0641\u064A\u0629)`);
        const newBuyerBalance = safeParseAmount(buyerBalance.amount) - paymentAmount;
        console.log(`\u{1F4B8} \u062E\u0635\u0645 \u0645\u0646 \u0627\u0644\u0645\u0634\u062A\u0631\u064A: ${safeParseAmount(buyerBalance.amount)} - ${paymentAmount} = ${newBuyerBalance}`);
        await storage.setUserBalance(userId, toCurrency, newBuyerBalance.toString());
        const buyerTargetBalance = await storage.getUserBalance(userId, fromCurrency);
        const newBuyerAmount = buyerTargetBalance ? safeParseAmount(buyerTargetBalance.amount) + safeParseAmount(amount) : safeParseAmount(amount);
        console.log(`\u{1F48E} \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0639\u0645\u0644\u0629 \u0627\u0644\u0645\u0634\u062A\u0631\u0627\u0629 \u0644\u0644\u0645\u0634\u062A\u0631\u064A: ${buyerTargetBalance ? safeParseAmount(buyerTargetBalance.amount) : 0} + ${safeParseAmount(amount)} = ${newBuyerAmount}`);
        await storage.setUserBalance(userId, fromCurrency, newBuyerAmount.toString());
        const sellerBalance = await storage.getUserBalance(offer.userId, toCurrency);
        const newSellerAmount = sellerBalance ? safeParseAmount(sellerBalance.amount) + sellerReceives : sellerReceives;
        console.log(`\u{1F4B0} \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u062F\u0641\u0639 \u0644\u0644\u0628\u0627\u0626\u0639 (\u0628\u0639\u062F \u0627\u0644\u0639\u0645\u0648\u0644\u0629): ${sellerBalance ? safeParseAmount(sellerBalance.amount) : 0} + ${sellerReceives} = ${newSellerAmount}`);
        await storage.setUserBalance(offer.userId, toCurrency, newSellerAmount.toString());
        if (!offer.commissionDeducted) {
          try {
            const originalAmount = parseFloat(offer.maxAmount);
            const originalValue = originalAmount * parseFloat(offer.price);
            const systemCommissionRate = await storage.getSystemCommissionRate("market", offer.baseCurrency);
            let commissionAmount = 0;
            if (systemCommissionRate) {
              if (systemCommissionRate.commissionRate && parseFloat(systemCommissionRate.commissionRate) > 0) {
                commissionAmount = originalValue * parseFloat(systemCommissionRate.commissionRate);
              } else if (systemCommissionRate.fixedAmount && parseFloat(systemCommissionRate.fixedAmount) > 0) {
                commissionAmount = parseFloat(systemCommissionRate.fixedAmount);
              }
            }
            console.log(`\u{1F4CA} \u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0639\u0631\u0636 (\u0645\u0631\u0629 \u0648\u0627\u062D\u062F\u0629 \u0641\u0642\u0637): \u0642\u064A\u0645\u0629 \u0627\u0644\u0639\u0631\u0636 \u0627\u0644\u0643\u0627\u0645\u0644=${originalValue}, \u0639\u0645\u0648\u0644\u0629=${commissionAmount.toFixed(6)} ${offer.baseCurrency}`);
            if (commissionAmount > 0) {
              const sellerCommissionBalance = await storage.getUserBalance(offer.userId, offer.baseCurrency);
              if (sellerCommissionBalance && safeParseAmount(sellerCommissionBalance.amount) >= commissionAmount) {
                const newSellerCommissionBalance = safeParseAmount(sellerCommissionBalance.amount) - commissionAmount;
                await storage.setUserBalance(offer.userId, offer.baseCurrency, newSellerCommissionBalance.toString());
                console.log(`\u{1F680} \u0628\u062F\u0621 \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u0633\u0648\u0642 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${offer.userId} \u0628\u0639\u0645\u0648\u0644\u0629 ${commissionAmount.toFixed(6)} ${offer.baseCurrency}`);
                try {
                  const { allocateFixedReferralReward: allocateFixedReferralReward2 } = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
                  const referralResult = await allocateFixedReferralReward2(
                    offerId,
                    // استخدام معرف العرض كمعرف المعاملة
                    "market_sell",
                    commissionAmount,
                    offer.baseCurrency,
                    offer.userId
                    // المستخدم المُحال هو البائع
                  );
                  console.log(`\u{1F4CA} \u0646\u062A\u064A\u062C\u0629 \u0646\u0638\u0627\u0645 \u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u0633\u0648\u0642: hasReferral=${referralResult.hasReferral}, rewardAmount=${referralResult.rewardAmount}, netSystemCommission=${referralResult.netSystemCommission}`);
                  const netCommission = referralResult.netSystemCommission;
                  if (netCommission > 0) {
                    await storage.addCommissionPoolTransaction({
                      sourceType: "user",
                      sourceId: offer.userId,
                      sourceName: `\u0639\u0645\u0648\u0644\u0629 \u0628\u064A\u0639: ${offer.baseCurrency}\u2192${offer.quoteCurrency}`,
                      currencyCode: offer.baseCurrency,
                      amount: netCommission.toFixed(6),
                      transactionType: "credit",
                      description: `\u0639\u0645\u0648\u0644\u0629 \u0639\u0631\u0636 \u0633\u0648\u0642 (\u0635\u0627\u0641\u064A \u0628\u0639\u062F \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A) - \u0627\u0644\u0628\u0627\u0626\u0639: ${offer.userId}, \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0623\u0635\u0644\u064A: ${originalAmount}`,
                      relatedTransactionId: offerId
                    });
                    console.log(`\u{1F4B0} \u0625\u0636\u0627\u0641\u0629 \u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 ${netCommission.toFixed(6)} ${offer.baseCurrency} \u0625\u0644\u0649 \u0645\u062C\u0645\u0639 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A (\u0628\u0639\u062F \u062E\u0635\u0645 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 ${(commissionAmount - netCommission).toFixed(6)})`);
                  }
                } catch (referralError) {
                  console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u0633\u0648\u0642:", referralError);
                  await storage.addCommissionPoolTransaction({
                    sourceType: "user",
                    sourceId: offer.userId,
                    sourceName: `\u0639\u0645\u0648\u0644\u0629 \u0628\u064A\u0639: ${offer.baseCurrency}\u2192${offer.quoteCurrency}`,
                    currencyCode: offer.baseCurrency,
                    amount: commissionAmount.toFixed(6),
                    transactionType: "credit",
                    description: `\u0639\u0645\u0648\u0644\u0629 \u0639\u0631\u0636 \u0633\u0648\u0642 \u0643\u0627\u0645\u0644 - \u0627\u0644\u0628\u0627\u0626\u0639: ${offer.userId}, \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0623\u0635\u0644\u064A: ${originalAmount}`
                  });
                }
                console.log(`\u{1F3E6} \u062A\u0645 \u062E\u0635\u0645 \u0648\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0639\u0645\u0648\u0644\u0629: ${commissionAmount.toFixed(6)} ${offer.baseCurrency} (\u0645\u0631\u0629 \u0648\u0627\u062D\u062F\u0629 \u0641\u0642\u0637)`);
                await db.insert(commissionLogs).values({
                  userId: offer.userId,
                  userName: user?.fullName || `\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${offer.userId}`,
                  offerType: "sell",
                  commissionAmount: commissionAmount.toFixed(6),
                  commissionCurrency: offer.baseCurrency,
                  sourceId: offerId,
                  sourceType: "market_offer",
                  action: "transferred",
                  description: `\u0639\u0645\u0648\u0644\u0629 \u0639\u0631\u0636 \u0633\u0648\u0642 \u0643\u0627\u0645\u0644: ${offer.baseCurrency}\u2192${offer.quoteCurrency}, \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0623\u0635\u0644\u064A: ${originalAmount}`
                });
                await db.update(marketOffers).set({ commissionDeducted: true }).where(eq10(marketOffers.id, offerId));
                console.log(`\u2705 \u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0639\u0631\u0636 ${offerId} - \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u062E\u064F\u0635\u0645\u062A \u0645\u0631\u0629 \u0648\u0627\u062D\u062F\u0629 \u0641\u0642\u0637`);
              }
            }
          } catch (error) {
            console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0635\u0641\u0642\u0629:", error);
          }
        } else {
          console.log(`\u{1F4CC} \u0627\u0644\u0639\u0631\u0636 ${offerId}: \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u062E\u064F\u0635\u0645\u062A \u0645\u0633\u0628\u0642\u0627\u064B\u060C \u0644\u0646 \u062A\u064F\u062E\u0635\u0645 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649`);
        }
        const newAvailable = Number(available) - Number(amount);
        const newStatus = newAvailable <= 0 ? "cancelled" : "open";
        const updatedOffer = await storage.updateMarketOfferStatus(
          offerId,
          newStatus,
          newAvailable
        );
        const marketTransaction = await storage.createMarketTransaction({
          buyerId: userId,
          offerId,
          amount: amount.toString(),
          totalCost: paymentAmount.toString(),
          commission: "0"
          // لا توجد عمولة إضافية - العمولة دُفعت عند النشر
        });
        await storage.createTransaction({
          userId,
          type: "exchange",
          amount: (-paymentAmount).toString(),
          // خصم المبلغ المدفوع
          currency: toCurrency,
          description: `\u0634\u0631\u0627\u0621 ${amount} ${fromCurrency} \u0628\u0633\u0639\u0631 ${rate} ${toCurrency}`
        });
        await storage.createTransaction({
          userId,
          type: "exchange",
          amount: amount.toString(),
          // إضافة العملة المشتراة
          currency: fromCurrency,
          description: `\u0627\u0633\u062A\u0644\u0627\u0645 ${amount} ${fromCurrency} \u0645\u0646 \u0639\u0645\u0644\u064A\u0629 \u0627\u0644\u0634\u0631\u0627\u0621`
        });
        await storage.createTransaction({
          userId: offer.userId,
          type: "exchange",
          amount: sellerReceives.toString(),
          currency: toCurrency,
          description: `\u0627\u0633\u062A\u0644\u0627\u0645 ${sellerReceives} ${toCurrency} \u0645\u0646 \u0628\u064A\u0639 ${amount} ${fromCurrency} (\u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0645\u062E\u0635\u0648\u0645\u0629 \u0645\u0633\u0628\u0642\u0627\u064B)`
        });
        try {
          const { MarketReceiptGenerator: MarketReceiptGenerator2 } = await Promise.resolve().then(() => (init_market_receipt_generator(), market_receipt_generator_exports));
          const marketTransactionData = {
            id: marketTransaction.id,
            buyer_id: userId,
            seller_id: offer.userId,
            amount: amount.toString(),
            total_cost: paymentAmount.toString(),
            commission: commission.toString(),
            rate,
            from_currency: fromCurrency,
            to_currency: toCurrency,
            created_at: (/* @__PURE__ */ new Date()).toISOString()
          };
          const receiptData = await MarketReceiptGenerator2.prepareMarketReceiptData(marketTransactionData);
          const receiptBuffer = await MarketReceiptGenerator2.generateMarketReceipt(receiptData);
          const receiptPath = `./public/receipts/market_${marketTransaction.id}_${Date.now()}.png`;
          await import("fs/promises").then((fs8) => fs8.writeFile(receiptPath, receiptBuffer));
          console.log(`\u{1F4C4} \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0633\u0648\u0642 \u0627\u0644\u0639\u0645\u0644\u0627\u062A: ${receiptPath}`);
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0633\u0648\u0642 \u0627\u0644\u0639\u0645\u0644\u0627\u062A:", error);
        }
        try {
          const settings = await rewardsService.getSettings();
          await rewardsService.awardPoints({
            userId,
            points: settings.transferPoints || 3,
            // استخدام transferPoints أو قيمة افتراضية
            action: "market_trade",
            description: `Market trade: bought ${amount} ${fromCurrency}`,
            descriptionAr: `\u062A\u062F\u0627\u0648\u0644 \u0627\u0644\u0633\u0648\u0642: \u0634\u0631\u0627\u0621 ${amount} ${fromCurrency}`,
            referenceId: marketTransaction.id.toString(),
            referenceType: "market_transaction"
          });
          await rewardsService.awardPoints({
            userId: offer.userId,
            points: settings.transferPoints || 3,
            // استخدام transferPoints أو قيمة افتراضية
            action: "market_trade",
            description: `Market trade: sold ${amount} ${fromCurrency}`,
            descriptionAr: `\u062A\u062F\u0627\u0648\u0644 \u0627\u0644\u0633\u0648\u0642: \u0628\u064A\u0639 ${amount} ${fromCurrency}`,
            referenceId: marketTransaction.id.toString(),
            referenceType: "market_transaction"
          });
          console.log(`\u2705 \u062A\u0645 \u0645\u0646\u062D ${settings.transferPoints || 3} \u0646\u0642\u0637\u0629 \u0644\u0643\u0644 \u0645\u0646 \u0627\u0644\u0645\u0634\u062A\u0631\u064A ${userId} \u0648\u0627\u0644\u0628\u0627\u0626\u0639 ${offer.userId} \u0644\u0644\u062A\u062F\u0627\u0648\u0644`);
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0627\u0644\u0646\u0642\u0627\u0637 \u0644\u0644\u062A\u062F\u0627\u0648\u0644:", error);
        }
        try {
          const realtimeEvents3 = req.app.get("realtimeEvents");
          if (realtimeEvents3) {
            realtimeEvents3.emitBalanceUpdate(userId, toCurrency, newBuyerBalance.toString());
            realtimeEvents3.emitBalanceUpdate(userId, fromCurrency, newBuyerAmount.toString());
            realtimeEvents3.emitBalanceUpdate(offer.userId, toCurrency, newSellerAmount.toString());
            realtimeEvents3.emitMarketTradeExecuted({
              id: marketTransaction.id,
              buyerId: userId,
              sellerId: offer.userId,
              baseCurrency: fromCurrency,
              quoteCurrency: toCurrency,
              amount,
              price: rate,
              total: paymentAmount
            });
            if (newStatus === "cancelled") {
              realtimeEvents3.emitMarketOrderCanceled({
                id: offerId,
                userId: offer.userId,
                baseCurrency: fromCurrency,
                quoteCurrency: toCurrency
              });
            } else {
              realtimeEvents3.emitOrderbookUpdate(fromCurrency, toCurrency);
            }
            console.log(`\u{1F680} \u062A\u0645 \u0628\u062B \u0627\u0644\u0623\u062D\u062F\u0627\u062B \u0627\u0644\u0644\u062D\u0638\u064A\u0629 \u0644\u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u0639\u0631\u0636 ${offerId}`);
          }
        } catch (eventError) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0628\u062B \u0627\u0644\u0623\u062D\u062F\u0627\u062B \u0627\u0644\u0644\u062D\u0638\u064A\u0629:", eventError);
        }
        res.json({
          message: "\u062A\u0645 \u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u0639\u0645\u0644\u064A\u0629 \u0628\u0646\u062C\u0627\u062D",
          exchange: {
            paid: paymentAmount,
            received: amount,
            commission,
            rate,
            sellerReceived: sellerReceives,
            marketTransactionId: marketTransaction.id
          }
        });
      } else {
        return res.status(501).json({ message: "\u062A\u0646\u0641\u064A\u0630 \u0639\u0631\u0648\u0636 \u0627\u0644\u0634\u0631\u0627\u0621 \u063A\u064A\u0631 \u0645\u062A\u0627\u062D \u062D\u0627\u0644\u064A\u0627\u064B" });
      }
    } catch (error) {
      next(error);
    }
  });
  app2.get("/api/market/receipt/:transactionId", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const transactionId = parseInt(req.params.transactionId);
      const transactionRecord = await db.select().from(transactions).where(eq10(transactions.id, transactionId)).limit(1);
      if (transactionRecord.length === 0) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const refNumber = transactionRecord[0].referenceNumber;
      if (!refNumber) {
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const transaction = transactionRecord[0];
      const amount = Math.abs(parseFloat(transaction.amount || "0"));
      const currency = transaction.currency || "LYD";
      const description = transaction.description || "";
      let fromCurrency = "USD";
      let toCurrency = "LYD";
      let exchangeRate = "1";
      let soldAmount = amount.toString();
      let purchaseValue = amount.toString();
      if (description.includes("\u0628\u064A\u0639")) {
        const rateMatch = description.match(/بسعر\s+(\d+(?:\.\d+)?)/);
        if (rateMatch) exchangeRate = rateMatch[1];
        const amountMatch = description.match(/(\d+(?:\.\d+)?)\s*USD/);
        if (amountMatch) {
          soldAmount = amountMatch[1];
          purchaseValue = (parseFloat(amountMatch[1]) * parseFloat(exchangeRate)).toString();
        }
      } else if (description.includes("\u0634\u0631\u0627\u0621")) {
        const rateMatch = description.match(/بسعر\s+(\d+(?:\.\d+)?)/);
        if (rateMatch) exchangeRate = rateMatch[1];
        const amountMatch = description.match(/(\d+(?:\.\d+)?)\s*USD/);
        if (amountMatch) {
          soldAmount = amountMatch[1];
          purchaseValue = (parseFloat(amountMatch[1]) * parseFloat(exchangeRate)).toString();
        }
      }
      const receiptData = {
        receiptNumber: `MARKET-${transactionId}`,
        transactionId: transactionId.toString(),
        date: new Date(transaction.date).toLocaleDateString("ar-EG"),
        time: new Date(transaction.date).toLocaleTimeString("ar-EG"),
        sellerAccount: "4",
        // حساب البائع
        buyerAccount: userId.toString(),
        // حساب المشتري
        systemAccount: "1000",
        // حساب النظام
        soldAmount,
        purchaseValue,
        exchangeRate,
        fromCurrency,
        toCurrency,
        commission: "0",
        commissionCurrency: currency,
        verificationHash: `MARKET-HASH-${transactionId}-${Date.now()}`
      };
      const { MarketReceiptGenerator: MarketReceiptGenerator2 } = await Promise.resolve().then(() => (init_market_receipt_generator(), market_receipt_generator_exports));
      const receiptBuffer = await MarketReceiptGenerator2.generateMarketReceipt(receiptData);
      res.set({
        "Content-Type": "image/png",
        "Content-Disposition": `attachment; filename="market_receipt_${transactionId}.png"`
      });
      res.send(receiptBuffer);
    } catch (error) {
      next(error);
    }
  });
  app2.get("/api/market/transactions", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const transactions2 = await storage.getUserMarketTransactions(userId);
      const enhancedTransactions = await Promise.all(
        transactions2.map(async (transaction) => {
          const offer = await storage.getMarketOfferById(transaction.offerId);
          return {
            ...transaction,
            offerDetails: offer ? {
              fromCurrency: offer.baseCurrency,
              toCurrency: offer.quoteCurrency,
              rate: offer.price,
              sellerId: offer.userId
            } : null,
            date: transaction.createdAt
          };
        })
      );
      res.json(enhancedTransactions);
    } catch (error) {
      next(error);
    }
  });
  app2.get("/api/market/effective-rate/:offerId", authMiddleware, async (req, res, next) => {
    try {
      const offerId = parseInt(req.params.offerId);
      const { amount } = req.query;
      if (!amount || Number(amount) <= 0) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u062A\u062D\u062F\u064A\u062F \u0643\u0645\u064A\u0629 \u0635\u062D\u064A\u062D\u0629" });
      }
      const offer = await storage.getMarketOfferById(offerId);
      if (!offer) {
        return res.status(404).json({ message: "\u0627\u0644\u0639\u0631\u0636 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      let commissionRate = 0.01;
      let commissionAmount = 0;
      let isFixedCommission = false;
      try {
        const storage4 = req.app.locals.storage;
        const marketCommissionRate = await storage4.getSystemCommissionRate("market", req.body.tradeCurrency || "USD");
        if (marketCommissionRate) {
          if (marketCommissionRate.fixedAmount && parseFloat(marketCommissionRate.fixedAmount) > 0) {
            commissionAmount = parseFloat(marketCommissionRate.fixedAmount);
            isFixedCommission = true;
            console.log(`\u{1F4B0} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0639\u0645\u0648\u0644\u0629 \u062B\u0627\u0628\u062A\u0629 \u0644\u0644\u0633\u0648\u0642: ${commissionAmount} ${req.body.tradeCurrency || "USD"}`);
          } else if (marketCommissionRate.commissionRate) {
            commissionRate = parseFloat(marketCommissionRate.commissionRate);
            console.log(`\u{1F4CA} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0633\u0648\u0642: ${commissionRate * 100}%`);
          } else if (marketCommissionRate.perMilleRate) {
            commissionRate = parseFloat(marketCommissionRate.perMilleRate) / 1e3;
            console.log(`\u{1F4CA} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0641\u064A \u0627\u0644\u0623\u0644\u0641 \u0644\u0644\u0633\u0648\u0642: ${parseFloat(marketCommissionRate.perMilleRate)}\u2030`);
          }
        } else {
          const commissionSettings = await db.select().from(systemCommissionSettings).orderBy(desc8(systemCommissionSettings.updatedAt)).limit(1);
          if (commissionSettings.length > 0) {
            const setting = commissionSettings[0];
            const settingValue = parseFloat(setting.value);
            if (setting.type === "fixed") {
              commissionAmount = settingValue;
              isFixedCommission = true;
            } else {
              commissionRate = settingValue / 100;
            }
          }
          console.log(`\u26A0\uFE0F \u0644\u0645 \u062A\u0648\u062C\u062F \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u062E\u0627\u0635\u0629 \u0628\u0627\u0644\u0633\u0648\u0642\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0627\u0645\u0629`);
        }
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      }
      if (offer.offerType === "sell") {
        const paymentAmount = Number(amount) * Number(offer.rate);
        const commission = isFixedCommission ? commissionAmount : paymentAmount * commissionRate;
        const sellerReceives = paymentAmount - commission;
        const effectiveRate = sellerReceives / Number(amount);
        res.json({
          originalRate: Number(offer.rate),
          effectiveRate,
          commission,
          commissionType: isFixedCommission ? "fixed" : "percentage",
          paymentAmount,
          sellerReceives
        });
      } else {
        res.json({
          originalRate: Number(offer.rate),
          effectiveRate: Number(offer.rate),
          commission: 0,
          commissionType: "none"
        });
      }
    } catch (error) {
      next(error);
    }
  });
  app2.post("/api/upgrade-requests", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (user.type === "agent") {
        return res.status(400).json({ message: "\u062D\u0633\u0627\u0628\u0643 \u0645\u0631\u0642\u0649 \u0628\u0627\u0644\u0641\u0639\u0644 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646" });
      }
      if (!user.verified) {
        return res.status(400).json({
          message: "\u064A\u062C\u0628 \u062A\u0648\u062B\u064A\u0642 \u0627\u0644\u062D\u0633\u0627\u0628 \u0623\u0648\u0644\u0627\u064B \u0642\u0628\u0644 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646. \u064A\u0631\u062C\u0649 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0645\u0633\u062A\u0646\u062F\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629 \u0644\u0644\u062A\u0648\u062B\u064A\u0642."
        });
      }
      const pendingRequest = await storage.getPendingUpgradeRequest(userId);
      if (pendingRequest) {
        return res.status(400).json({ message: "\u0644\u062F\u064A\u0643 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646 \u0642\u064A\u062F \u0627\u0644\u0627\u0646\u062A\u0638\u0627\u0631 \u0628\u0627\u0644\u0641\u0639\u0644" });
      }
      const result = upgradeRequestSchema.safeParse(req.body);
      if (!result.success) {
        const validationError = fromZodError2(result.error);
        return res.status(400).json({ message: validationError.message });
      }
      const requestData = {
        userId,
        requestType: "agent_upgrade",
        // نوع الطلب للتحويل بين المدن
        fullName: req.body.fullName,
        phone: req.body.phone,
        city: req.body.city,
        message: req.body.message || ""
      };
      const request = await storage.createUpgradeRequest(requestData);
      res.status(201).json({
        message: "\u062A\u0645 \u062A\u0642\u062F\u064A\u0645 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646 \u0628\u0646\u062C\u0627\u062D",
        request
      });
    } catch (error) {
      if (error instanceof ZodError2) {
        const validationError = fromZodError2(error);
        return res.status(400).json({ message: validationError.message });
      }
      next(error);
    }
  });
  app2.get("/api/user/upgrade-requests", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const requests = await storage.getUserUpgradeRequests(userId);
      res.json(requests);
    } catch (error) {
      next(error);
    }
  });
  app2.get("/api/admin/upgrade-requests", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const user = await storage.getUser(userId);
      if (user?.type !== "admin") {
        return res.status(403).json({ message: "\u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0631\u062F" });
      }
      const status = req.query.status;
      const requests = await storage.getUpgradeRequestsWithDetails("agent_upgrade", status);
      const enhancedRequests = requests;
      res.json(enhancedRequests);
    } catch (error) {
      next(error);
    }
  });
  app2.patch("/api/admin/upgrade-requests/:id", authMiddleware, async (req, res, next) => {
    try {
      const userId = req.user.id;
      const user = await storage.getUser(userId);
      if (user?.type !== "admin") {
        return res.status(403).json({ message: "\u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0631\u062F" });
      }
      const requestId = parseInt(req.params.id);
      const { status, notes } = req.body;
      if (status !== "approved" && status !== "rejected") {
        return res.status(400).json({ message: "\u0627\u0644\u062D\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D\u0629" });
      }
      const updatedRequest = await storage.updateRequestStatus(requestId, status, notes);
      res.json({
        message: status === "approved" ? "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u0627\u0644\u062A\u0631\u0642\u064A\u0629" : "\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628 \u0627\u0644\u062A\u0631\u0642\u064A\u0629",
        request: updatedRequest
      });
    } catch (error) {
      next(error);
    }
  });
  app2.get("/api/user/verification", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const verificationRequest = await storage.getUserVerificationRequest(userId);
      if (verificationRequest) {
        res.json({
          status: verificationRequest.status,
          userId,
          lastUpdate: verificationRequest.createdAt,
          notes: verificationRequest.notes || null
        });
      } else {
        res.json({
          status: "not_started",
          userId,
          lastUpdate: (/* @__PURE__ */ new Date()).toISOString(),
          notes: null
        });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u062D\u0627\u0644\u0629 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u062D\u0627\u0644\u0629 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.post("/api/user/verification", authMiddleware, async (req, res) => {
    const userId = req.user.id;
    const action = req.body.action;
    if (action === "start") {
      try {
        console.log("\u0628\u064A\u0627\u0646\u0627\u062A \u062A\u0648\u062B\u064A\u0642 \u0627\u0644\u062D\u0633\u0627\u0628:", {
          userId,
          ...req.body
        });
        const verificationRequest = await storage.createVerificationRequest({
          userId,
          status: "pending",
          notes: `
- \u0627\u0644\u0627\u0633\u0645 \u0627\u0644\u0643\u0627\u0645\u0644: ${req.body.fullName || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}
- \u0631\u0642\u0645 \u0627\u0644\u0647\u0627\u062A\u0641: ${req.body.phoneNumber || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}
- \u0627\u0644\u0645\u062F\u064A\u0646\u0629: ${req.body.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}
- \u0627\u0644\u0639\u0646\u0648\u0627\u0646: ${req.body.address || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}
- \u0646\u0648\u0639 \u0627\u0644\u0647\u0648\u064A\u0629: ${req.body.idType || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}
- \u0645\u0644\u0627\u062D\u0638\u0627\u062A \u0625\u0636\u0627\u0641\u064A\u0629: ${req.body.notes || "\u0644\u0627 \u062A\u0648\u062C\u062F"}
          `.trim(),
          idPhotoUrl: req.body.idPhotoUrl || null,
          proofOfAddressUrl: req.body.proofOfAddressUrl || null
        });
        res.json({
          status: "pending",
          userId,
          lastUpdate: (/* @__PURE__ */ new Date()).toISOString(),
          message: "\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642 \u0648\u0647\u0648 \u0642\u064A\u062F \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0622\u0646\u060C \u0633\u064A\u062A\u0645 \u0625\u0634\u0639\u0627\u0631\u0643 \u0639\u0646\u062F \u0627\u0643\u062A\u0645\u0627\u0644 \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629"
        });
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
        res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
      }
    } else {
      return res.status(400).json({ message: "\u0627\u0644\u0625\u062C\u0631\u0627\u0621 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
    }
  });
  app2.post("/api/city-transfers/send", authMiddleware, async (req, res) => {
    const userId = req.user.id;
    try {
      const user = await storage.getUser(userId);
      if (!user || user.type !== "agent" && user.type !== "admin" && !user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629" });
      }
      const { receiverOfficeId, amount, currency = "LYD" } = req.body;
      const receiverOffice = await storage.getUser(receiverOfficeId);
      if (!receiverOffice || receiverOffice.type !== "agent") {
        return res.status(400).json({ message: "\u0645\u0643\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      let receiverCommissionAmount = 0;
      const applicableTier = await storage.findApplicableCityCommission(
        receiverOfficeId,
        Number(amount),
        currency,
        user.city,
        receiverOffice.city
      );
      if (applicableTier) {
        receiverCommissionAmount = Number(applicableTier.commission);
        console.log(`\u0625\u0631\u0633\u0627\u0644: \u062A\u0637\u0628\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u0634\u0631\u064A\u062D\u0629 ${applicableTier.commission} ${currency} \u0644\u0644\u0645\u0643\u062A\u0628 ${receiverOffice.fullName}`);
      } else {
        const receiverCommissionSettings = await storage.getAgentCommissionByCurrency(receiverOfficeId, currency);
        if (receiverCommissionSettings) {
          let rate = 0;
          if (receiverCommissionSettings.type === "percentage") {
            rate = Number(receiverCommissionSettings.value) / 100;
          } else if (receiverCommissionSettings.type === "fixed") {
            receiverCommissionAmount = Number(receiverCommissionSettings.value);
          }
          if (receiverCommissionSettings.type === "percentage") {
            receiverCommissionAmount = Number(amount) * rate;
          }
          console.log(`\u0625\u0631\u0633\u0627\u0644: \u062A\u0637\u0628\u064A\u0642 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0625\u062F\u0627\u0631\u064A\u0629 ${receiverCommissionSettings.type === "percentage" ? rate * 100 + "%" : "\u062B\u0627\u0628\u062A"} = ${receiverCommissionAmount} ${currency} \u0644\u0644\u0645\u0643\u062A\u0628 ${receiverOffice.fullName}`);
        } else {
          const defaultCommissionRate = 0.015;
          receiverCommissionAmount = Number(amount) * defaultCommissionRate;
          console.log(`\u0625\u0631\u0633\u0627\u0644: \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629 1.5% = ${receiverCommissionAmount} ${currency} (\u0644\u0627 \u062A\u0648\u062C\u062F \u0634\u0631\u0627\u0626\u062D \u0648\u0644\u0627 \u0625\u0639\u062F\u0627\u062F\u0627\u062A)`);
        }
      }
      const senderUser = await storage.getUser(userId);
      let systemCommission = 0;
      if (req.body.customCommission !== void 0 && req.body.customCommission !== "" && (senderUser?.type === "admin" || senderUser?.type === "agent")) {
        systemCommission = safeParseAmount(req.body.customCommission);
        if (systemCommission < 0) {
          return res.status(400).json({ message: "\u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u0627 \u064A\u0645\u0643\u0646 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0633\u0627\u0644\u0628\u0629" });
        }
      } else {
        const systemCommissionRateData = await storage.getSystemCommissionRate("city", currency);
        if (systemCommissionRateData && systemCommissionRateData.fixedAmount) {
          systemCommission = Number(systemCommissionRateData.fixedAmount);
          console.log(`\u{1F4CA} \u062A\u0637\u0628\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u062B\u0627\u0628\u062A\u0629: ${systemCommission} ${currency}`);
        } else {
          let rate = 0.01;
          if (systemCommissionRateData?.commissionRate) {
            rate = Number(systemCommissionRateData.commissionRate);
          } else if (systemCommissionRateData?.perMilleRate) {
            rate = Number(systemCommissionRateData.perMilleRate) / 1e3;
          }
          systemCommission = Number(amount) * rate;
          console.log(`\u{1F4CA} \u062A\u0637\u0628\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u064A\u0629: ${rate * 100}% = ${systemCommission} ${currency}`);
        }
      }
      const commissionForReceiver = receiverCommissionAmount;
      const commissionForSystem = systemCommission;
      const totalAmount = Number(amount) + commissionForReceiver + systemCommission;
      const balance = await storage.getUserBalance(userId, currency);
      if (!balance || safeParseAmount(balance.amount) < totalAmount) {
        return res.status(400).json({ message: "\u0627\u0644\u0631\u0635\u064A\u062F \u063A\u064A\u0631 \u0643\u0627\u0641\u064D \u0644\u0625\u062C\u0631\u0627\u0621 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const code2 = Math.floor(1e5 + Math.random() * 9e5).toString();
      const currentBalance = safeParseAmount(balance.amount);
      const newBalance = currentBalance - totalAmount;
      console.log(`\u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0635\u064A\u062F \u0644\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u0645\u062F\u064A\u0646\u064A\u0629: \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u062D\u0627\u0644\u064A ${currentBalance} - \u0627\u0644\u0645\u062C\u0645\u0648\u0639 ${totalAmount} = ${newBalance}`);
      await storage.setUserBalance(userId, currency, newBalance.toString());
      await storage.createTransaction({
        userId,
        type: "withdraw",
        amount: totalAmount.toString(),
        currency,
        description: `\u062D\u0648\u0627\u0644\u0629 \u0645\u062F\u064A\u0646\u064A\u0629 \u0625\u0644\u0649 ${receiverOffice.fullName} \u0628\u0631\u0645\u0632: ${code2}`
      });
      const cityTransferData = {
        senderId: userId,
        receiverOfficeId: receiverOffice.id,
        amount: amount.toString(),
        commissionForReceiver: commissionForReceiver.toString(),
        commissionForSystem: commissionForSystem.toString(),
        currency,
        code: code2,
        status: "pending"
      };
      try {
        const newTransfer = await storage.createCityTransfer(cityTransferData);
        console.log("\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u062D\u0648\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629:", newTransfer);
        console.log(`\u{1F4B0} \u0639\u0645\u0648\u0644\u0629 \u0646\u0638\u0627\u0645 \u0645\u0639\u0644\u0642\u0629: ${systemCommission} ${currency} (\u0633\u062A\u0636\u0627\u0641 \u0639\u0646\u062F \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645)`);
      } catch (dbError) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0641\u0638 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", dbError);
        console.log(`\u0625\u0639\u0627\u062F\u0629 \u0627\u0644\u0645\u0628\u0644\u063A \u0641\u064A \u062D\u0627\u0644 \u0627\u0644\u062E\u0637\u0623: ${Number(balance.amount)}`);
        await storage.setUserBalance(userId, currency, Number(balance.amount).toString());
        return res.status(500).json({
          message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629\u060C \u062A\u0645 \u0625\u0639\u0627\u062F\u0629 \u0627\u0644\u0645\u0628\u0644\u063A \u0625\u0644\u0649 \u0631\u0635\u064A\u062F\u0643"
        });
      }
      try {
        const settings = await rewardsService.getSettings();
        await rewardsService.awardPoints({
          userId,
          points: settings.transferPoints || 5,
          // استخدام transferPoints أو قيمة افتراضية
          action: "city_transfer",
          description: `City transfer: ${amount} ${currency} to ${receiverOffice.fullName}`,
          descriptionAr: `\u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646: ${amount} ${currency} \u0625\u0644\u0649 ${receiverOffice.fullName}`,
          referenceId: code2,
          referenceType: "city_transfer"
        });
        console.log(`\u2705 \u062A\u0645 \u0645\u0646\u062D ${settings.transferPoints || 5} \u0646\u0642\u0637\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0644\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0627\u0644\u0646\u0642\u0627\u0637 \u0644\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646:", error);
      }
      res.json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        transferCode: code2,
        receiverOffice: receiverOffice.fullName,
        amount,
        commissionForReceiver,
        commissionForSystem,
        totalAmount,
        currency
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.post("/api/city-transfers/receive", authMiddleware, async (req, res) => {
    const userId = req.user.id;
    try {
      const user = await storage.getUser(userId);
      if (!user || user.type !== "agent" && user.type !== "admin" && !user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629" });
      }
      const { code: code2 } = req.body;
      if (!code2) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0631\u0645\u0632 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
      }
      const transfer = await storage.getCityTransferByCode(code2);
      if (!transfer) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u062D\u0648\u0627\u0644\u0629 \u0628\u0647\u0630\u0627 \u0627\u0644\u0631\u0645\u0632" });
      }
      if (transfer.receiverOfficeId !== userId) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0647\u0629 \u0625\u0644\u0649 \u0645\u0643\u062A\u0628\u0643" });
      }
      if (transfer.status !== "pending") {
        return res.status(400).json({ message: "\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0645\u0633\u0628\u0642\u064B\u0627" });
      }
      const amount = Number(transfer.amount);
      const commissionForReceiver = Number(transfer.commissionForReceiver);
      const totalToReceive = amount + commissionForReceiver;
      const balance = await storage.getUserBalance(userId, transfer.currency) || { amount: "0" };
      const currentBalance = safeParseAmount(balance.amount);
      const newAmount = currentBalance + amount;
      console.log(`\u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629: \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u062D\u0627\u0644\u064A ${currentBalance} + \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u0633\u062A\u0644\u0645 ${amount} = ${newAmount} (\u0627\u0644\u0639\u0645\u0648\u0644\u0629 ${commissionForReceiver} \u062A\u0630\u0647\u0628 \u0644\u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A)`);
      await storage.setUserBalance(userId, transfer.currency, newAmount.toString());
      if (commissionForReceiver > 0) {
        await storage.addAgentCommission(
          userId,
          commissionForReceiver,
          transfer.currency,
          `\u0639\u0645\u0648\u0644\u0629 \u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646 - ${transfer.code}`
        );
        console.log(`\u{1F4B0} \u062A\u0645\u062A \u0625\u0636\u0627\u0641\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 ${commissionForReceiver} ${transfer.currency} \u0644\u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628`);
      }
      await storage.createTransaction({
        userId,
        type: "deposit",
        amount: amount.toString(),
        currency: transfer.currency,
        description: `\u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u0645\u062F\u064A\u0646\u064A\u0629 \u0628\u0631\u0645\u0632: ${code2} (\u0627\u0644\u0639\u0645\u0648\u0644\u0629 ${commissionForReceiver} \u062A\u0645\u062A \u0625\u0636\u0627\u0641\u062A\u0647\u0627 \u0644\u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A)`
      });
      await storage.updateCityTransferStatus(transfer.id, "completed");
      return res.json({
        message: "\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        amount,
        commission: commissionForReceiver,
        total: amount,
        // المبلغ الأساسي المُضاف للرصيد
        currency: transfer.currency
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/city-transfers", authMiddleware, async (req, res) => {
    const userId = req.user.id;
    try {
      const user = await storage.getUser(userId);
      if (!user || user.type !== "agent" && user.type !== "admin" && !user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629" });
      }
      const transfers2 = await storage.getCityTransfers(userId);
      const formattedTransfers = await Promise.all(
        transfers2.map(async (transfer) => {
          const receiverOffice = await storage.getUser(transfer.receiverOfficeId);
          return {
            id: transfer.id,
            code: transfer.code,
            amount: Number(transfer.amount),
            currency: transfer.currency,
            receiverOfficeName: receiverOffice?.fullName || "\u0645\u0643\u062A\u0628 \u0635\u0631\u0627\u0641\u0629",
            status: transfer.status,
            createdAt: transfer.createdAt.toISOString(),
            completedAt: transfer.completedAt ? transfer.completedAt.toISOString() : null
          };
        })
      );
      res.json(formattedTransfers);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A" });
    }
  });
  app2.post("/api/agent/receive-city-transfer", authMiddleware, async (req, res) => {
    const { id: receiverId, type } = req.user;
    const { code: code2 } = req.body;
    console.log(`\u{1F50D} \u0645\u062D\u0627\u0648\u0644\u0629 \u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${receiverId}, \u0627\u0644\u0646\u0648\u0639: "${type}", \u0627\u0644\u0643\u0648\u062F: ${code2}`);
    try {
      const currentUser = await storage.getUser(receiverId);
      console.log(`\u{1F4CA} \u0646\u0648\u0639 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A: "${currentUser?.type}"`);
      if (!currentUser || currentUser.type !== "agent") {
        return res.status(403).json({ message: "\u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629 \u0645\u062E\u0635\u0635\u0629 \u0644\u0644\u0645\u0643\u0627\u062A\u0628 \u0641\u0642\u0637 - \u064A\u0631\u062C\u0649 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062E\u0631\u0648\u062C \u0648\u0627\u0644\u062F\u062E\u0648\u0644 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649" });
      }
      if (!code2) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0631\u0645\u0632 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
      }
      const transfer = await storage.getCityTransferByCode(code2);
      if (!transfer) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u062D\u0648\u0627\u0644\u0629 \u0628\u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u062F" });
      }
      if (transfer.receiverOfficeId !== receiverId) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0647\u0629 \u0625\u0644\u0649 \u0645\u0643\u062A\u0628\u0643" });
      }
      if (transfer.status !== "pending") {
        return res.status(400).json({ message: "\u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645\u0647\u0627 \u0645\u0633\u0628\u0642\u0627\u064B \u0623\u0648 \u062A\u0645 \u0625\u0644\u063A\u0627\u0624\u0647\u0627" });
      }
      const amount = Number(transfer.amount);
      const commissionForReceiver = Number(transfer.commissionForReceiver);
      const totalToReceive = amount + commissionForReceiver;
      const balance = await storage.getUserBalance(receiverId, transfer.currency) || { amount: "0" };
      const newAmount = Number(balance.amount) + totalToReceive;
      console.log(`\u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0645\u0628\u0644\u063A \u0644\u0644\u0645\u0633\u062A\u0644\u0645: ${Number(balance.amount)} + ${totalToReceive} = ${newAmount}`);
      await storage.setUserBalance(receiverId, transfer.currency, newAmount.toString());
      const systemCommission = Number(transfer.commissionForSystem);
      if (systemCommission > 0) {
        const { allocateFixedReferralReward: allocateFixedReferralReward2 } = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
        const operationType = transfer.currency === "LYD" ? "transfer_lyd" : "transfer_usd";
        console.log(`\u{1F381} \u0641\u062D\u0635 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0644\u0644\u0645\u0631\u0633\u0644 ${transfer.senderId} \u0641\u064A \u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u0645\u062F\u0646`);
        const referralResult = await allocateFixedReferralReward2(
          transfer.id,
          operationType,
          systemCommission,
          transfer.currency,
          transfer.senderId
        );
        const netSystemCommission = referralResult.netSystemCommission;
        if (netSystemCommission > 0) {
          await storage.addCommissionPoolTransaction({
            sourceType: "user",
            sourceId: transfer.senderId,
            sourceName: `\u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u0645\u062F\u064A\u0646\u064A\u0629`,
            currencyCode: transfer.currency,
            amount: netSystemCommission.toString(),
            transactionType: "credit",
            relatedTransactionId: transfer.id,
            description: referralResult.hasReferral ? `\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 (\u0628\u0639\u062F \u062E\u0635\u0645 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 ${referralResult.rewardAmount}) - \u062D\u0648\u0627\u0644\u0629 \u0645\u062F\u064A\u0646\u064A\u0629: ${transfer.code}` : `\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 - \u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u0645\u062F\u064A\u0646\u064A\u0629 \u0628\u0631\u0645\u0632: ${transfer.code}`
          });
          console.log(`\u{1F4B0} \u062A\u0645\u062A \u0625\u0636\u0627\u0641\u0629 \u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 ${netSystemCommission} ${transfer.currency} (\u0623\u0635\u0644\u064A\u0629: ${systemCommission}, \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629: ${referralResult.rewardAmount})`);
        }
      }
      await storage.createTransaction({
        userId: receiverId,
        type: "deposit",
        amount: totalToReceive.toString(),
        currency: transfer.currency,
        description: `\u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u0645\u062F\u064A\u0646\u064A\u0629 \u0628\u0631\u0645\u0632: ${code2}`
      });
      await storage.updateCityTransferStatus(transfer.id, "completed");
      return res.json({
        message: "\u2705 \u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        amount,
        commission: commissionForReceiver,
        total: totalToReceive,
        currency: transfer.currency
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0645\u062D\u0627\u0648\u0644\u0629 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.post("/api/inter-office-transfers", authMiddleware, async (req, res) => {
    console.log("\u{1F31F}\u{1F31F}\u{1F31F} POST /api/inter-office-transfers - \u0637\u0644\u0628 \u0648\u0635\u0644 \u0644\u0644\u062E\u0627\u062F\u0645!");
    console.log("\u{1F4CB} Headers:", req.headers);
    console.log("\u{1F510} User from authMiddleware:", req.user);
    console.log("\u{1F6A8} THIS IS THE CORRECT ENDPOINT FOR EXTERNAL TRANSFERS!");
    console.log("\u{1F4DD} Raw request body:", JSON.stringify(req.body, null, 2));
    try {
      console.log("\u{1F680} Inter-office transfer request started!");
      console.log("\u{1F4DD} Request body:", req.body);
      console.log("\u{1F464} Current user ID:", req.user.id);
      const { receiverName, receiverPhone, amount, receivingOffice, destinationCountry, notes, currency } = req.body;
      console.log("Parsed fields:", {
        receiverName,
        receiverPhone,
        amount,
        receivingOffice,
        destinationCountry,
        notes,
        currency
      });
      const transferCurrency = currency || "LYD";
      const transferAmount = parseFloat(amount);
      if (!receiverName || !receiverPhone || !amount || !receivingOffice || !destinationCountry) {
        console.log("Missing required fields validation failed");
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      if (isNaN(transferAmount) || transferAmount <= 0) {
        return res.status(400).json({ message: "\u0645\u0628\u0644\u063A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      try {
        const libyanCheckResult = await db.execute(sql12`
          SELECT (u.country_id = 1 OR u.country_name = 'ليبيا') AS is_libyan
          FROM users u
          WHERE u.id = ${req.user.id}
        `);
        const isCurrentUserLibyan = libyanCheckResult.rows[0]?.is_libyan || false;
        if (isCurrentUserLibyan && destinationCountry === "LY") {
          console.log(`\u{1F6AB} BLOCKED: Libyan user ${req.user.id} attempted LY\u2192LY transfer - policy violation`);
          return res.status(403).json({
            message: "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0644\u064A\u0628\u064A\u0629 \u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D. \u0627\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0645\u062D\u0644\u064A \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u062F\u0627\u062E\u0644 \u0644\u064A\u0628\u064A\u0627.",
            code: "LIBYA_TO_LIBYA_BLOCKED",
            policy: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0644\u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0644\u064A\u0628\u064A\u0629 \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0638\u0627\u0645 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0625\u0644\u0649 \u0645\u0643\u0627\u062A\u0628 \u0644\u064A\u0628\u064A\u0629 \u0623\u062E\u0631\u0649"
          });
        }
        console.log(`\u{1F30D} Transfer validation: User has LY office=${isCurrentUserLibyan}, Destination=${destinationCountry}, Allowed=${!(isCurrentUserLibyan && destinationCountry === "LY")}`);
      } catch (error) {
        console.error("\u{1F6A8} Could not verify user country for transfer policy, denying transfer for safety:", error);
        return res.status(403).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0635\u0644\u0627\u062D\u064A\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u062D\u0627\u0644\u064A\u0627\u064B. \u064A\u0631\u062C\u0649 \u0627\u0644\u0645\u062D\u0627\u0648\u0644\u0629 \u0644\u0627\u062D\u0642\u0627\u064B.",
          code: "COUNTRY_VERIFICATION_FAILED",
          policy: "\u062A\u0645 \u0631\u0641\u0636 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0644\u0644\u0623\u0645\u0627\u0646 \u0639\u0646\u062F \u0639\u062F\u0645 \u0627\u0644\u062A\u0645\u0643\u0646 \u0645\u0646 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0628\u0644\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645"
        });
      }
      const isExternalTransfer = destinationCountry !== "LY";
      console.log(`\u{1F50D}\u{1F50D}\u{1F50D} \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0646\u0648\u0639 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 - \u0647\u0630\u0627 \u0645\u0647\u0645 \u062C\u062F\u0627\u064B!`, {
        destinationCountry,
        isExternal: isExternalTransfer,
        condition: `destinationCountry (${destinationCountry}) !== 'LY' = ${isExternalTransfer}`,
        typeOfDestination: typeof destinationCountry,
        stringComparison: `"${destinationCountry}" !== "LY" = ${destinationCountry !== "LY"}`
      });
      if (isExternalTransfer) {
        console.log("\u{1F30D} External transfer detected, checking permissions...");
        let limits = null;
        if (req.user.type === "agent" || req.user.type === "admin") {
          console.log("\u2705 \u0648\u0643\u064A\u0644 \u0623\u0648 \u0645\u062F\u064A\u0631 - \u0645\u0633\u0645\u0648\u062D \u0628\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u0628\u062F\u0648\u0646 \u0642\u064A\u0648\u062F");
        } else {
          limits = await storage.getUserExternalTransferLimits(req.user.id);
          if (!limits || !limits.extTransferEnabled) {
            return res.status(403).json({
              message: "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u063A\u064A\u0631 \u0645\u0641\u0639\u0644 \u0644\u062D\u0633\u0627\u0628\u0643. \u064A\u0631\u062C\u0649 \u062A\u0642\u062F\u064A\u0645 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0645\u0646 \u0644\u0648\u062D\u0629 \u0627\u0644\u0637\u0644\u0628\u0627\u062A.",
              code: "EXTERNAL_TRANSFER_DISABLED"
            });
          }
          if (limits.extAllowedCurrencies && !limits.extAllowedCurrencies.includes(transferCurrency)) {
            return res.status(403).json({
              message: `\u0627\u0644\u0639\u0645\u0644\u0629 ${transferCurrency} \u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A`,
              allowedCurrencies: limits.extAllowedCurrencies
            });
          }
          if (limits.extAllowedCountries && !limits.extAllowedCountries.includes(destinationCountry)) {
            return res.status(403).json({
              message: `\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u062F\u0648\u0644\u0629 \u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D`,
              allowedCountries: limits.extAllowedCountries
            });
          }
        }
        console.log("External transfer permissions verified successfully");
        if (req.user.type !== "agent" && req.user.type !== "admin" && limits) {
          console.log("\u{1F50D} \u0628\u062F\u0621 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A...");
          const dailyUsed = await storage.getUserDailyTransferAmount(req.user.id, transferCurrency);
          const dailyLimit = parseFloat(limits.extDailyLimit || "0");
          console.log(`\u{1F50D} \u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A:`, {
            transferAmount,
            dailyUsed,
            dailyLimit,
            totalAfterTransfer: dailyUsed + transferAmount,
            wouldExceed: dailyUsed + transferAmount > dailyLimit
          });
          if (dailyUsed + transferAmount > dailyLimit) {
            return res.status(403).json({
              message: `\u062A\u062C\u0627\u0648\u0632 \u0627\u0644\u062D\u062F \u0627\u0644\u064A\u0648\u0645\u064A \u0627\u0644\u0645\u0633\u0645\u0648\u062D. 
            
\u{1F4CA} \u0627\u0644\u062A\u0641\u0627\u0635\u064A\u0644:
\u2022 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A \u0627\u0644\u0645\u0633\u0645\u0648\u062D: ${dailyLimit} ${transferCurrency}
\u2022 \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u064F\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u064A\u0648\u0645: ${dailyUsed.toFixed(2)} ${transferCurrency}
\u2022 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062D\u0627\u0644\u064A: ${transferAmount} ${transferCurrency}
\u2022 \u0627\u0644\u0645\u062C\u0645\u0648\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064A: ${(dailyUsed + transferAmount).toFixed(2)} ${transferCurrency}

\u{1F4A1} \u0645\u0644\u0627\u062D\u0638\u0629: \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A \u0647\u0648 \u0645\u062C\u0645\u0648\u0639 \u0643\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u064A\u0648\u0645\u064A\u0629 \u0648\u0644\u064A\u0633 \u0644\u0643\u0644 \u062A\u062D\u0648\u064A\u0644 \u0645\u0646\u0641\u0631\u062F.`,
              dailyLimit,
              dailyUsed,
              currentTransfer: transferAmount,
              totalWouldBe: dailyUsed + transferAmount
            });
          }
          const monthlyUsed = await storage.getUserMonthlyTransferAmount(req.user.id, transferCurrency);
          const monthlyLimit = parseFloat(limits.extMonthlyLimit || "0");
          console.log(`\u{1F50D} \u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u0634\u0647\u0631\u064A:`, {
            transferAmount,
            monthlyUsed,
            monthlyLimit,
            totalAfterTransfer: monthlyUsed + transferAmount,
            wouldExceed: monthlyUsed + transferAmount > monthlyLimit
          });
          if (monthlyUsed + transferAmount > monthlyLimit) {
            return res.status(403).json({
              message: `\u062A\u062C\u0627\u0648\u0632 \u0627\u0644\u062D\u062F \u0627\u0644\u0634\u0647\u0631\u064A \u0627\u0644\u0645\u0633\u0645\u0648\u062D. 
              
\u{1F4CA} \u0627\u0644\u062A\u0641\u0627\u0635\u064A\u0644:
\u2022 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u0634\u0647\u0631\u064A \u0627\u0644\u0645\u0633\u0645\u0648\u062D: ${monthlyLimit} ${transferCurrency}
\u2022 \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u064F\u0633\u062A\u062E\u062F\u0645 \u0647\u0630\u0627 \u0627\u0644\u0634\u0647\u0631: ${monthlyUsed.toFixed(2)} ${transferCurrency}
\u2022 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062D\u0627\u0644\u064A: ${transferAmount} ${transferCurrency}
\u2022 \u0627\u0644\u0645\u062C\u0645\u0648\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064A: ${(monthlyUsed + transferAmount).toFixed(2)} ${transferCurrency}

\u{1F4A1} \u0645\u0644\u0627\u062D\u0638\u0629: \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u0634\u0647\u0631\u064A \u0647\u0648 \u0645\u062C\u0645\u0648\u0639 \u0643\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u0634\u0647\u0631\u064A\u0629 \u0648\u0644\u064A\u0633 \u0644\u0643\u0644 \u062A\u062D\u0648\u064A\u0644 \u0645\u0646\u0641\u0631\u062F.`,
              monthlyLimit,
              monthlyUsed,
              currentTransfer: transferAmount,
              totalWouldBe: monthlyUsed + transferAmount
            });
          }
        } else {
          console.log("\u2705 \u0648\u0643\u064A\u0644 \u0623\u0648 \u0645\u062F\u064A\u0631 - \u062A\u062E\u0637\u064A \u062D\u062F\u0648\u062F \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u064A\u0648\u0645\u064A\u0629 \u0648\u0627\u0644\u0634\u0647\u0631\u064A\u0629");
        }
        console.log("External transfer permissions verified successfully");
      }
      if (receivingOffice) {
        const officeId = parseInt(receivingOffice);
        console.log(`==================== SELF-TRANSFER CHECK ====================`);
        console.log(`Checking office transfer: office ID ${officeId}, sender user ID ${req.user.id}`);
        const office = await storage.getAgentOfficeById(officeId);
        console.log("Office details found:", JSON.stringify(office, null, 2));
        if (office) {
          console.log(`Comparing: office.agentId (${office.agentId}) === req.user.id (${req.user.id})`);
          if (office.agentId === req.user.id) {
            console.log("BLOCKED: User trying to transfer to their own office");
            console.log(`==================== TRANSFER BLOCKED ====================`);
            return res.status(400).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0644\u0645\u0643\u062A\u0628\u0643 \u0627\u0644\u062E\u0627\u0635" });
          } else {
            console.log("ALLOWED: Different agent office, transfer can proceed");
          }
        } else {
          console.log("WARNING: Office not found!");
        }
        console.log(`==================== END SELF-TRANSFER CHECK ====================`);
      }
      const balance = await storage.getUserBalance(req.user.id, transferCurrency);
      const currentBalance = parseFloat(balance?.amount || "0");
      const targetOffice = await storage.getAgentOfficeById(parseInt(receivingOffice));
      if (!targetOffice) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const amountOriginal = transferAmount;
      let systemCommissionRate = 0.01;
      let rateType = "default";
      try {
        const systemRateResult = await db.$client.query(`
          SELECT commission_rate as "commissionRate", per_mille_rate as "perMilleRate", fixed_amount as "fixedAmount"
          FROM system_commission_rates 
          WHERE transfer_type = $1 AND currency = $2 AND is_active = true
          ORDER BY created_at DESC
          LIMIT 1
        `, ["international", transferCurrency]);
        if (systemRateResult.rows[0]) {
          const dbRow = systemRateResult.rows[0];
          if (dbRow.fixedAmount && parseFloat(dbRow.fixedAmount) > 0) {
            systemCommissionRate = parseFloat(dbRow.fixedAmount);
            rateType = "fixed";
            console.log(`\u{1F4CA} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0645\u0628\u0644\u063A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u062B\u0627\u0628\u062A: ${parseFloat(dbRow.fixedAmount).toFixed(2)} ${transferCurrency}`);
          } else if (dbRow.perMilleRate && parseFloat(dbRow.perMilleRate) > 0) {
            systemCommissionRate = parseFloat(dbRow.perMilleRate) / 1e3;
            rateType = "per_mille";
            console.log(`\u{1F4CA} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u062D\u062F\u062F\u0629: ${parseFloat(dbRow.perMilleRate).toFixed(1)}\u2030 \u0644\u0644\u0639\u0645\u0644\u0629 ${transferCurrency}`);
            console.log(`\u{1F4CA} \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u062D\u0633\u0648\u0628\u0629: ${systemCommissionRate} (${parseFloat(dbRow.perMilleRate)}/1000)`);
          } else {
            systemCommissionRate = parseFloat(dbRow.commissionRate);
            rateType = "percentage";
            console.log(`\u{1F4CA} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u062D\u062F\u062F\u0629: ${(systemCommissionRate * 100).toFixed(2)}% \u0644\u0644\u0639\u0645\u0644\u0629 ${transferCurrency}`);
          }
        } else {
          console.log(`\u{1F4CA} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629: ${(systemCommissionRate * 100).toFixed(2)}% \u0644\u0644\u0639\u0645\u0644\u0629 ${transferCurrency}`);
        }
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629:", error);
      }
      let commissionSystem;
      if (rateType === "fixed") {
        commissionSystem = systemCommissionRate;
      } else {
        commissionSystem = transferAmount * systemCommissionRate;
      }
      console.log(`\u{1F4B0} \u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645:`, {
        transferAmount,
        systemCommissionRate,
        rateType,
        commissionSystem,
        calculation: rateType === "fixed" ? `\u0645\u0628\u0644\u063A \u062B\u0627\u0628\u062A: ${systemCommissionRate} ${transferCurrency}` : `${transferAmount} \xD7 ${systemCommissionRate} = ${commissionSystem}`
      });
      let commissionRecipient = transferAmount * 0.015;
      let applicableTier = null;
      try {
        applicableTier = await storage.findApplicableCityCommission(
          parseInt(receivingOffice),
          transferAmount,
          transferCurrency
        );
        if (applicableTier) {
          console.log(`\u{1F3AF} \u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0634\u0631\u064A\u062D\u0629 \u0639\u0645\u0648\u0644\u0629 \u0645\u0637\u0628\u0642\u0629:`, applicableTier);
          if (applicableTier.commission) {
            commissionRecipient = parseFloat(applicableTier.commission);
          } else if (applicableTier.perMilleRate) {
            commissionRecipient = transferAmount * (parseFloat(applicableTier.perMilleRate) / 1e3);
          }
          console.log(`\u{1F4CA} \u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 \u0645\u0646 \u0627\u0644\u0634\u0631\u064A\u062D\u0629:`, {
            tierCommission: applicableTier.commission,
            tierPerMilleRate: applicableTier.perMilleRate,
            calculatedCommission: commissionRecipient,
            amount: transferAmount
          });
        } else {
          console.log(`\u26A0\uFE0F \u0644\u0645 \u062A\u0648\u062C\u062F \u0634\u0631\u064A\u062D\u0629 \u0639\u0645\u0648\u0644\u0629 \u0645\u0637\u0628\u0642\u0629\u060C \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0648\u0643\u064A\u0644...`);
          const receiverCommissionSettings = await storage.getAgentCommissionByCurrency(targetOffice.agentId, transferCurrency);
          console.log(`\u{1F50D} \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u0648\u0643\u064A\u0644 ${targetOffice.agentId} \u0628\u0627\u0644\u0639\u0645\u0644\u0629 ${transferCurrency}:`, receiverCommissionSettings);
          if (receiverCommissionSettings) {
            if (receiverCommissionSettings.type === "percentage") {
              commissionRecipient = transferAmount * (parseFloat(receiverCommissionSettings.value) / 100);
              console.log(`\u2705 \u062A\u0637\u0628\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u0646\u0633\u0628\u064A\u0629 \u0644\u0644\u0648\u0643\u064A\u0644: ${receiverCommissionSettings.value}% \u0645\u0646 ${transferAmount} = ${commissionRecipient} ${transferCurrency}`);
            } else if (receiverCommissionSettings.type === "fixed") {
              commissionRecipient = parseFloat(receiverCommissionSettings.value);
              console.log(`\u2705 \u062A\u0637\u0628\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u062B\u0627\u0628\u062A\u0629 \u0644\u0644\u0648\u0643\u064A\u0644: ${commissionRecipient} ${transferCurrency}`);
            } else {
              commissionRecipient = transferAmount * 0.015;
              console.log(`\u26A0\uFE0F \u0646\u0648\u0639 \u0639\u0645\u0648\u0644\u0629 \u063A\u064A\u0631 \u0645\u062F\u0639\u0648\u0645\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A \u0627\u0644\u0646\u0633\u0628\u064A: ${commissionRecipient} ${transferCurrency} (1.5% \u0645\u0646 ${transferAmount})`);
            }
          } else {
            commissionRecipient = transferAmount * 0.015;
            console.log(`\u26A0\uFE0F \u0644\u0645 \u062A\u0648\u062C\u062F \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u0648\u0643\u064A\u0644 ${targetOffice.agentId}\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A \u0627\u0644\u0646\u0633\u0628\u064A: ${commissionRecipient} ${transferCurrency} (1.5% \u0645\u0646 ${transferAmount})`);
          }
        }
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629:", error);
      }
      let commissionSource = "\u0627\u0641\u062A\u0631\u0627\u0636\u064A";
      if (applicableTier) {
        commissionSource = "\u0634\u0631\u064A\u062D\u0629 \u0639\u0645\u0648\u0644\u0629";
      } else {
        const receiverCommissionSettings = await storage.getAgentCommissionByCurrency(targetOffice.agentId, transferCurrency);
        if (receiverCommissionSettings) {
          commissionSource = receiverCommissionSettings.type === "percentage" ? "\u0639\u0645\u0648\u0644\u0629 \u0648\u0643\u064A\u0644 \u0646\u0633\u0628\u064A\u0629" : "\u0639\u0645\u0648\u0644\u0629 \u0648\u0643\u064A\u0644 \u062B\u0627\u0628\u062A\u0629";
        }
      }
      console.log(`\u{1F3DB}\uFE0F \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645:`, {
        agentId: targetOffice.agentId,
        currency: transferCurrency,
        officeName: targetOffice.officeName,
        calculatedCommission: commissionRecipient,
        amount: transferAmount,
        percentage: (commissionRecipient / transferAmount * 100).toFixed(2) + "%",
        source: commissionSource
      });
      const amountPending = amountOriginal + commissionRecipient;
      const totalRequired = amountOriginal + commissionSystem + commissionRecipient;
      if (currentBalance < totalRequired) {
        return res.status(400).json({ message: "\u0627\u0644\u0631\u0635\u064A\u062F \u063A\u064A\u0631 \u0643\u0627\u0641\u064A" });
      }
      const receiverCode = Math.floor(1e5 + Math.random() * 9e5).toString();
      const newTransfer = await storage.createAgentTransfer({
        senderId: req.user.id,
        agentId: req.user.id,
        destinationAgentId: targetOffice.agentId,
        recipientName: receiverName,
        recipientPhone: receiverPhone,
        amount: amountOriginal.toString(),
        commission: commissionSystem.toString(),
        currency: transferCurrency,
        transferCode: receiverCode,
        // استخدام كود الاستلام كمرجع وحيد
        receiverCode,
        note: notes || "",
        status: "pending",
        type: "international",
        country: destinationCountry,
        city: "",
        // حقول النظام الجديد
        amountOriginal: amountOriginal.toString(),
        commissionSystem: commissionSystem.toString(),
        commissionRecipient: commissionRecipient.toString(),
        amountPending: amountPending.toString()
      });
      console.log(`\u{1F3E6} \u062E\u0635\u0645 \u0645\u0646 \u0631\u0635\u064A\u062F \u0627\u0644\u0645\u0631\u0633\u0644:`, {
        userId: req.user.id,
        currency: transferCurrency,
        balanceBefore: currentBalance,
        originalAmount: amountOriginal,
        systemCommission: commissionSystem,
        systemCommissionType: rateType,
        systemCommissionRate: rateType === "per_mille" ? `${(systemCommissionRate * 1e3).toFixed(1)}\u2030` : `${(systemCommissionRate * 100).toFixed(2)}%`,
        officeCommission: commissionRecipient,
        totalDeducted: totalRequired,
        balanceAfter: currentBalance - totalRequired
      });
      await storage.setUserBalance(req.user.id, transferCurrency, (currentBalance - totalRequired).toString());
      await storage.createTransaction({
        userId: req.user.id,
        type: "inter_office_transfer_pending",
        amount: totalRequired.toString(),
        currency: transferCurrency,
        description: `\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 \u0645\u0639\u0644\u0642 \u0625\u0644\u0649 ${receiverName} - \u0631\u0645\u0632 \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645: ${receiverCode}`
      });
      console.log(`\u{1F4B0} \u062A\u0645 \u062A\u0639\u0644\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 (\u0633\u062A\u064F\u0636\u0627\u0641 \u0639\u0646\u062F \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645):`, {
        amount: commissionSystem,
        currency: transferCurrency,
        receiverCode,
        status: "\u0645\u0639\u0644\u0642\u0629 \u062D\u062A\u0649 \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645"
      });
      console.log("Inter-office transfer created successfully:", newTransfer);
      try {
        const settings = await rewardsService.getSettings();
        await rewardsService.awardPoints({
          userId: req.user.id,
          points: settings.transferPoints,
          action: "inter_office_transfer",
          description: `Inter-office transfer: ${transferAmount} ${transferCurrency}`,
          descriptionAr: `\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628: ${transferAmount} ${transferCurrency}`,
          referenceId: newTransfer.id.toString(),
          referenceType: "inter_office_transfer"
        });
        console.log(`\u2705 \u062A\u0645 \u0645\u0646\u062D ${settings.transferPoints} \u0646\u0642\u0637\u0629 \u0644\u0644\u0645\u0631\u0633\u0644 ${req.user.id} \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0627\u0644\u0646\u0642\u0627\u0637 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628:", error);
      }
      try {
        const operationType = transferCurrency === "LYD" ? "transfer_lyd" : "transfer_usd";
        await allocateFixedReferralReward(
          newTransfer.id,
          operationType,
          commissionSystem,
          transferCurrency,
          req.user.id
        );
        console.log(`\u2705 \u062A\u0645 \u062A\u0637\u0628\u064A\u0642 \u0646\u0638\u0627\u0645 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u062B\u0627\u0628\u062A\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 ${newTransfer.id}`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628:", error);
      }
      res.status(201).json({
        ...newTransfer,
        receiverCode: newTransfer.receiverCode,
        amountOriginal,
        commissionSystem,
        commissionRecipient,
        amountPending,
        totalRequired,
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644" });
    }
  });
  app2.post("/api/inter-office-transfers/:transferId/cancel", authMiddleware, async (req, res) => {
    const transferId = parseInt(req.params.transferId);
    const userId = req.user.id;
    try {
      console.log(`\u{1F6AB} \u0637\u0644\u0628 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A ${transferId} \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
      const result = await storage.cancelInternationalTransfer(transferId);
      if (result.success) {
        console.log("\u2705 \u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A \u0628\u0646\u062C\u0627\u062D");
        res.json({
          success: true,
          message: "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u0646\u062C\u0627\u062D \u0648\u0627\u0633\u062A\u0639\u0627\u062F\u0629 \u0627\u0644\u0645\u0628\u0644\u063A",
          transfer: result.transfer
        });
      } else {
        console.log("\u274C \u0641\u0634\u0644 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644:", result.message);
        res.status(400).json({
          success: false,
          message: result.message
        });
      }
    } catch (error) {
      console.error("\u{1F4A5} \u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A:", error);
      res.status(500).json({
        success: false,
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644"
      });
    }
  });
  app2.get("/api/inter-office-transfers", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "agent" && type !== "admin" && !req.user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0648\u0627\u0644\u0625\u062F\u0627\u0631\u0629" });
      }
      console.log("\u062C\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0644\u0644\u0648\u0643\u064A\u0644:", req.user.id);
      const transfers2 = await storage.getAgentTransfers(req.user.id);
      console.log("\u062A\u0645 \u062C\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0628\u0646\u062C\u0627\u062D:", transfers2.length);
      res.json(transfers2);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/inter-office-transfers/:transferCode/details", authMiddleware, async (req, res) => {
    try {
      const { transferCode } = req.params;
      if (!transferCode) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0645\u0637\u0644\u0648\u0628" });
      }
      console.log(`\u{1F50D} \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0631\u0645\u0632: ${transferCode}`);
      const result = await pool.query(`
        SELECT 
          at.*,
          sender.full_name as sender_name,
          destination_agent.full_name as destination_agent_name
        FROM agent_transfers at
        LEFT JOIN users sender ON at.sender_id = sender.id
        LEFT JOIN users destination_agent ON at.destination_agent_id = destination_agent.id
        WHERE at.transfer_code = $1
      `, [transferCode]);
      if (result.rows.length === 0) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
      }
      const transfer = result.rows[0];
      const currentUserId = req.user.id;
      const currentUserType = req.user.type;
      const destinationAgentId = transfer.destination_agent_id;
      if (currentUserType !== "admin" && currentUserId !== destinationAgentId) {
        console.log(`\u274C \u0645\u062D\u0627\u0648\u0644\u0629 \u0648\u0635\u0648\u0644 \u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647\u0627: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${currentUserId} \u064A\u062D\u0627\u0648\u0644 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 ${destinationAgentId}`);
        return res.status(403).json({
          message: "\u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0645\u062E\u0635\u0635\u0629 \u0644\u0645\u0633\u062A\u0644\u0645 \u0622\u062E\u0631"
        });
      }
      console.log(`\u2705 \u0648\u0635\u0648\u0644 \u0645\u0635\u0631\u062D \u0628\u0647: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${currentUserId} (${currentUserType}) \u064A\u0635\u0644 \u0644\u0644\u062D\u0648\u0627\u0644\u0629`);
      const amountOriginal = parseFloat(transfer.amount_original || transfer.amount);
      const systemCommission = parseFloat(transfer.commission_system || transfer.commission || "0");
      const recipientCommission = parseFloat(transfer.commission_recipient || "0");
      const transferDetails = {
        id: transfer.id,
        transferCode: transfer.transfer_code,
        receiverCode: transfer.receiver_code,
        amountOriginal,
        systemCommission,
        recipientCommission,
        recipientCredit: amountOriginal + recipientCommission,
        // المبلغ الأصلي + عمولة المكتب
        totalDeduction: amountOriginal + systemCommission + recipientCommission,
        // الإجمالي المخصوم من المرسل
        currency: transfer.currency,
        recipientName: transfer.recipient_name || "\u0645\u0633\u062A\u0644\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629",
        recipientPhone: transfer.recipient_phone || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
        country: transfer.country || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
        city: transfer.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
        note: transfer.note || "",
        createdAt: transfer.created_at,
        senderName: transfer.sender_name || "\u0645\u0631\u0633\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0629",
        destinationAgentName: transfer.destination_agent_name || "\u0648\u0643\u064A\u0644 \u0627\u0644\u0648\u062C\u0647\u0629",
        status: transfer.status
      };
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:`, transferDetails);
      return res.json(transferDetails);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", error);
      return res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/inter-office-transfers/receive", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "agent" && type !== "admin" && !req.user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0648\u0627\u0644\u0625\u062F\u0627\u0631\u0629" });
      }
      const { transferCode } = req.body;
      if (!transferCode) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0631\u0645\u0632 \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645" });
      }
      console.log(`\u{1F50D} \u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u0628\u0631\u0645\u0632: ${transferCode}`);
      const result = await pool.query(`
        SELECT at.*, sender.full_name as sender_name, dest_agent.full_name as dest_agent_name
        FROM agent_transfers at
        LEFT JOIN users sender ON at.sender_id = sender.id
        LEFT JOIN users dest_agent ON at.destination_agent_id = dest_agent.id
        WHERE at.transfer_code = $1 
          AND at.status = 'pending'
        LIMIT 1
      `, [transferCode]);
      const transfer = result.rows[0];
      if (!transfer) {
        return res.status(404).json({
          message: "\u062D\u0648\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0623\u0648 \u0645\u0643\u062A\u0645\u0644\u0629 \u0628\u0627\u0644\u0641\u0639\u0644"
        });
      }
      if (transfer.destination_agent_id !== req.user.id) {
        return res.status(403).json({
          message: `\u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0645\u062E\u0635\u0635\u0629 \u0644\u0645\u0643\u062A\u0628 ${transfer.dest_agent_name} \u0648\u0644\u064A\u0633 \u0644\u0645\u0643\u062A\u0628\u0643`
        });
      }
      const originalAmount = parseFloat(transfer.amount_original || transfer.amount);
      const officeCommission = parseFloat(transfer.commission_recipient || "0");
      const amountToReceive = originalAmount + officeCommission;
      console.log(`\u{1F4B0} \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 - \u0631\u0645\u0632: ${transfer.transfer_code}`);
      console.log(`\u{1F4B4} \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0623\u0635\u0644\u064A: ${originalAmount}`);
      console.log(`\u{1F4B8} \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628: ${officeCommission}`);
      console.log(`\u{1F4B0} \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u0633\u062A\u0644\u0645: ${amountToReceive}`);
      try {
        const currentBalance = await storage.getUserBalance(req.user.id, transfer.currency);
        const currentBalanceNum = parseFloat(currentBalance?.amount || "0");
        const newBalance = currentBalanceNum + amountToReceive;
        console.log(`\u{1F3E6} \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0635\u064A\u062F: ${currentBalanceNum} + ${amountToReceive} = ${newBalance}`);
        await storage.setUserBalance(req.user.id, transfer.currency, newBalance.toString());
        await pool.query(`
          UPDATE agent_transfers 
          SET status = 'completed', completed_at = NOW() 
          WHERE id = $1
        `, [transfer.id]);
        console.log(`\u2705 \u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0635\u064A\u062F \u0648\u062D\u0627\u0644\u0629 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D - \u0631\u0645\u0632: ${transfer.transfer_code}`);
      } catch (criticalError) {
        console.error(`\u274C \u062E\u0637\u0623 \u062D\u0631\u062C \u0641\u064A \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 ${transfer.transfer_code}:`, criticalError);
        return res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0645\u062D\u0627\u0648\u0644\u0629 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
      }
      const response = {
        message: "\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        amount: amountToReceive,
        currency: transfer.currency,
        receiverCode: transfer.transfer_code
      };
      console.log(`\u2705 \u0625\u0631\u0633\u0627\u0644 \u0627\u0633\u062A\u062C\u0627\u0628\u0629 \u0627\u0644\u0646\u062C\u0627\u062D - \u0631\u0645\u0632: ${transfer.transfer_code}, \u0627\u0644\u0645\u0628\u0644\u063A: ${amountToReceive} ${transfer.currency}`);
      res.json(response);
      setImmediate(async () => {
        try {
          await storage.createTransaction({
            userId: req.user.id,
            type: "inter_office_receive",
            amount: amountToReceive.toString(),
            currency: transfer.currency,
            description: `\u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 - \u0631\u0645\u0632: ${transfer.transfer_code}`
          });
          await storage.createTransaction({
            userId: transfer.sender_id,
            type: "inter_office_transfer_completed",
            amount: "0",
            // لا يؤثر على الرصيد (تم الخصم مسبقاً)
            currency: transfer.currency,
            description: `\u062A\u0645 \u062A\u0623\u0643\u064A\u062F \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 - \u0631\u0645\u0632: ${transfer.transfer_code}`
          });
          console.log(`\u{1F4DD} \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0644\u0644\u062D\u0648\u0627\u0644\u0629 ${transfer.transfer_code}`);
        } catch (transactionError) {
          console.error(`\u26A0\uFE0F \u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0644\u0644\u062D\u0648\u0627\u0644\u0629 ${transfer.transfer_code}:`, transactionError);
        }
      });
      setImmediate(async () => {
        try {
          const systemCommission = parseFloat(transfer.commission_system || transfer.commission || "0");
          if (systemCommission > 0) {
            const { allocateFixedReferralReward: allocateFixedReferralReward2 } = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
            const operationType = transfer.currency === "LYD" ? "transfer_lyd" : "transfer_usd";
            console.log(`\u{1F381} \u0641\u062D\u0635 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0644\u0644\u0645\u0631\u0633\u0644 ${transfer.sender_id} \u0641\u064A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628`);
            const referralResult = await allocateFixedReferralReward2(
              transfer.id,
              operationType,
              systemCommission,
              transfer.currency,
              transfer.sender_id
              // المستخدم المُحال هو المرسل
            );
            const netSystemCommission = referralResult.netSystemCommission;
            if (netSystemCommission > 0) {
              console.log(`\u{1F4B0} \u0625\u0636\u0627\u0641\u0629 \u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 ${netSystemCommission} ${transfer.currency} (\u0623\u0635\u0644\u064A\u0629: ${systemCommission}, \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629: ${referralResult.rewardAmount})`);
              await storage.addToCommissionPool(
                netSystemCommission,
                transfer.currency,
                referralResult.hasReferral ? `\u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 (\u0628\u0639\u062F \u062E\u0635\u0645 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 ${referralResult.rewardAmount}) - ${transfer.transfer_code}` : `\u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 - ${transfer.transfer_code}`
              );
            }
          }
          console.log(`\u{1F3AF} \u062A\u0645 \u0627\u0644\u0627\u0646\u062A\u0647\u0627\u0621 \u0645\u0646 \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A \u0648\u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0644\u0644\u062D\u0648\u0627\u0644\u0629 ${transfer.transfer_code}`);
        } catch (commissionError) {
          console.error(`\u26A0\uFE0F \u062E\u0637\u0623 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A \u0644\u0644\u062D\u0648\u0627\u0644\u0629 ${transfer.transfer_code}:`, commissionError);
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0645\u062D\u0627\u0648\u0644\u0629 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.delete("/api/inter-office-transfers/bulk", authMiddleware, async (req, res) => {
    try {
      console.log("\u{1F3AF} \u0648\u0635\u0644 \u0637\u0644\u0628 \u0625\u062E\u0641\u0627\u0621 \u0645\u062A\u0639\u062F\u062F - \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u0644\u0645\u0629:", req.body);
      const { transferIds } = req.body;
      const userId = req.user.id;
      console.log(`\u{1F464} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userId}, \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628 \u0625\u062E\u0641\u0627\u0624\u0647\u0627: [${transferIds?.join(", ")}]`);
      if (!transferIds || !Array.isArray(transferIds) || transferIds.length === 0) {
        console.log("\u274C \u062E\u0637\u0623: \u0644\u0627 \u062A\u0648\u062C\u062F \u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0645\u062D\u062F\u062F\u0629");
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u062A\u062D\u062F\u064A\u062F \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u0645\u0631\u0627\u062F \u0625\u062E\u0641\u0627\u0624\u0647\u0627" });
      }
      console.log("\u{1F50D} \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0635\u062D\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", userId);
      const result = await pool.query(`
        SELECT id, sender_id, destination_agent_id, status
        FROM agent_transfers 
        WHERE id = ANY($1) 
          AND (sender_id = $2 OR destination_agent_id = $2)
      `, [transferIds, userId]);
      console.log("\u{1F4CB} \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u0645\u0648\u062C\u0648\u062F\u0629 \u0648\u0627\u0644\u0635\u0627\u0644\u062D\u0629:", result.rows);
      const validTransferIds = result.rows.map((row) => row.id);
      if (validTransferIds.length === 0) {
        console.log("\u274C \u0644\u0627 \u062A\u0648\u062C\u062F \u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0635\u0627\u0644\u062D\u0629 \u0644\u0644\u0625\u062E\u0641\u0627\u0621");
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0625\u062E\u0641\u0627\u0621 \u0647\u0630\u0647 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A" });
      }
      console.log(`\u2705 \u0639\u062F\u062F \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u0635\u0627\u0644\u062D\u0629 \u0644\u0644\u0625\u062E\u0641\u0627\u0621: ${validTransferIds.length}`);
      let totalHidden = 0;
      for (const transferId of validTransferIds) {
        try {
          console.log(`\u{1F648} \u0645\u062D\u0627\u0648\u0644\u0629 \u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0631\u0642\u0645 ${transferId} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
          const hideResult = await pool.query(`
            INSERT INTO hidden_transfers (user_id, transfer_id) 
            VALUES ($1, $2) 
            ON CONFLICT (user_id, transfer_id) DO NOTHING
            RETURNING id
          `, [userId, transferId]);
          if (hideResult.rows.length > 0) {
            totalHidden++;
            console.log(`\u2705 \u062A\u0645 \u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferId} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
          } else {
            console.log(`\u2139\uFE0F \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferId} \u0645\u062E\u0641\u064A \u0645\u0633\u0628\u0642\u0627\u064B \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
            totalHidden++;
          }
        } catch (error) {
          console.error(`\u062E\u0637\u0623 \u0641\u064A \u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferId}:`, error);
        }
      }
      console.log(`\u{1F648} \u062A\u0645 \u0625\u062E\u0641\u0627\u0621 ${totalHidden} \u062A\u062D\u0648\u064A\u0644 \u0645\u0646 \u0639\u0631\u0636 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
      return res.json({
        message: "\u062A\u0645 \u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0628\u0646\u062C\u0627\u062D",
        deletedCount: totalHidden,
        skippedCount: transferIds.length - totalHidden
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0645\u062D\u0627\u0648\u0644\u0629 \u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A" });
    }
  });
  const legacyInternationalTransferHandler = async (req, res) => {
    const { id: senderId, type } = req.user;
    try {
      if (type !== "agent") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629" });
      }
      const {
        receiverOfficeId,
        receivingCountry,
        amount,
        currency,
        note
      } = req.body;
      if (!receiverOfficeId || !receivingCountry || !amount || !currency) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u062C\u0645\u064A\u0639 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const receiverOffice = await storage.getUser(Number(receiverOfficeId));
      if (!receiverOffice || receiverOffice.type !== "agent") {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const numAmount = Number(amount);
      if (isNaN(numAmount) || numAmount <= 0) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0645\u0628\u0644\u063A \u0635\u062D\u064A\u062D \u0648\u0645\u0648\u062C\u0628" });
      }
      const sender = await storage.getUser(senderId);
      const sendingCountry = sender?.countryName || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F";
      const systemCommissionSetting = await storage.getAdminSetting("inter_office_transfer_commission");
      const systemCommissionRate = systemCommissionSetting ? parseFloat(systemCommissionSetting.value) : 0.01;
      const receiverCommission = await storage.getOfficeCommissionByCountry(
        Number(receiverOfficeId),
        receivingCountry
      );
      const receiverCommissionRate = receiverCommission ? parseFloat(receiverCommission.commissionRate.toString()) : 5e-3;
      let commissionForSystem = 0;
      if (req.body.customCommission !== void 0 && req.body.customCommission !== "" && sender?.type === "admin") {
        commissionForSystem = safeParseAmount(req.body.customCommission);
        if (commissionForSystem < 0) {
          return res.status(400).json({ message: "\u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u0627 \u064A\u0645\u0643\u0646 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0633\u0627\u0644\u0628\u0629" });
        }
      } else {
        commissionForSystem = numAmount * systemCommissionRate;
      }
      const commissionForReceiver = numAmount * receiverCommissionRate;
      const totalAmount = numAmount + commissionForSystem;
      const senderBalance = await storage.getUserBalance(senderId, currency);
      if (!senderBalance || safeParseAmount(senderBalance.amount) < totalAmount) {
        return res.status(400).json({ message: "\u0631\u0635\u064A\u062F\u0643 \u063A\u064A\u0631 \u0643\u0627\u0641\u064D \u0644\u0625\u062C\u0631\u0627\u0621 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const code2 = Math.floor(1e5 + Math.random() * 9e5).toString();
      const transfer = await storage.createInternationalTransfer({
        senderId,
        receiverOfficeId: Number(receiverOfficeId),
        sendingCountry,
        receivingCountry,
        amount: numAmount.toString(),
        currency,
        commissionForReceiver: commissionForReceiver.toString(),
        commissionForSystem: commissionForSystem.toString(),
        code: code2,
        note
      });
      const newSenderAmount = safeParseAmount(senderBalance.amount) - totalAmount;
      console.log(`\u062E\u0635\u0645 \u0645\u0628\u0644\u063A \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629 \u0645\u0646 \u0627\u0644\u0645\u0631\u0633\u0644: ${safeParseAmount(senderBalance.amount)} - ${totalAmount} = ${newSenderAmount}`);
      await storage.setUserBalance(senderId, currency, newSenderAmount.toString());
      await storage.createTransaction({
        userId: senderId,
        type: "withdraw",
        amount: totalAmount.toString(),
        currency,
        description: `\u0625\u0631\u0633\u0627\u0644 \u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 \u0625\u0644\u0649 ${receivingCountry}`
      });
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629 \u0628\u0646\u062C\u0627\u062D",
        transferCode: code2,
        details: {
          id: transfer.id,
          receiverOffice: receiverOffice.fullName,
          amount: numAmount,
          receivingCountry,
          commissionForReceiver,
          commissionForSystem,
          totalAmount,
          currency
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629" });
    }
  };
  app2.get("/api/agents", authMiddleware, async (req, res) => {
    const userId = req.user.id;
    try {
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const localOffices = await db.select({
        id: agentOffices.agentId,
        fullName: users.fullName,
        city: agentOffices.city,
        commissionRate: users.commissionRate,
        officeCode: agentOffices.officeCode,
        officeName: agentOffices.officeName
      }).from(agentOffices).innerJoin(users, eq10(agentOffices.agentId, users.id)).where(and9(
        eq10(agentOffices.countryCode, "LY"),
        // ليبيا فقط
        eq10(agentOffices.isActive, true),
        eq10(users.type, "agent")
      ));
      const filteredAgents = localOffices.filter((agent) => agent.id !== userId);
      res.json(filteredAgents);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0645\u062D\u0644\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0645\u062D\u0644\u064A\u0629" });
    }
  });
  app2.get("/api/office-commissions", authMiddleware, async (req, res) => {
    const { id, type } = req.user;
    try {
      if (type !== "agent") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u0648\u0627\u0631\u062F" });
      }
      const result = await db.execute(sql12`
        SELECT id, office_id as "officeId", city, commission_rate as "commissionRate"
        FROM office_commissions 
        WHERE office_id = ${id}
        ORDER BY city
      `);
      res.json(result.rows);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u062A\u0628" });
    }
  });
  app2.post("/api/agent/set-commission", authMiddleware, async (req, res) => {
    const { id: officeId, type } = req.user;
    const { city, commission_rate } = req.body;
    try {
      if (type !== "agent") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0627 \u0627\u0644\u0625\u062C\u0631\u0627\u0621" });
      }
      if (!city || commission_rate === void 0) {
        return res.status(400).json({ message: "\u0627\u0644\u0631\u062C\u0627\u0621 \u062A\u062D\u062F\u064A\u062F \u0627\u0644\u0645\u062F\u064A\u0646\u0629 \u0648\u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
      }
      await storage.createOrUpdateOfficeCommission({
        officeId,
        city,
        commissionRate: commission_rate.toString()
      });
      res.json({ message: "\u2705 \u062A\u0645 \u062D\u0641\u0638 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u0645\u062F\u064A\u0646\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628" });
    }
  });
  app2.get("/api/agent/my-commissions", authMiddleware, async (req, res) => {
    const { id: officeId, type } = req.user;
    try {
      if (type !== "agent") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u0648\u0627\u0631\u062F" });
      }
      const commissions = await storage.getOfficeCommissions(officeId);
      const formattedCommissions = commissions.map((comm) => ({
        city: comm.city,
        commission_rate: comm.commissionRate
      }));
      res.json({ commissions: formattedCommissions });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u062A\u0628" });
    }
  });
  app2.post("/api/office-commissions", authMiddleware, async (req, res) => {
    const { id, type } = req.user;
    const { city, commissionRate } = req.body;
    try {
      if (type !== "agent") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u0648\u0627\u0631\u062F" });
      }
      if (!city || commissionRate === void 0) {
        return res.status(400).json({ message: "\u0627\u0644\u0631\u062C\u0627\u0621 \u062A\u062D\u062F\u064A\u062F \u0627\u0644\u0645\u062F\u064A\u0646\u0629 \u0648\u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
      }
      const rate = Number(commissionRate);
      if (isNaN(rate) || rate < 0 || rate > 10) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B \u0628\u064A\u0646 0 \u0648 10" });
      }
      const checkExisting = await db.execute(sql12`
        SELECT id FROM office_commissions 
        WHERE office_id = ${id} AND city = ${city}
      `);
      let result;
      if (checkExisting.rows.length > 0) {
        result = await db.execute(sql12`
          UPDATE office_commissions 
          SET commission_rate = ${rate.toString()}
          WHERE office_id = ${id} AND city = ${city}
          RETURNING *
        `);
      } else {
        result = await db.execute(sql12`
          INSERT INTO office_commissions (office_id, city, commission_rate)
          VALUES (${id}, ${city}, ${rate.toString()})
          RETURNING *
        `);
      }
      res.status(201).json({
        message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 \u0628\u0646\u062C\u0627\u062D",
        commission: result.rows[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629/\u062A\u062D\u062F\u064A\u062B \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629/\u062A\u062D\u062F\u064A\u062B \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628" });
    }
  });
  app2.delete("/api/office-commissions/:id", authMiddleware, async (req, res) => {
    const { id, type } = req.user;
    const commissionId = parseInt(req.params.id);
    try {
      if (type !== "agent") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u0648\u0627\u0631\u062F" });
      }
      const result = await db.execute(sql12`
        DELETE FROM office_commissions 
        WHERE id = ${commissionId} AND office_id = ${id}
        RETURNING *
      `);
      if (result.rows.length === 0) {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u062D\u0630\u0641 \u0639\u0645\u0648\u0644\u0629 \u0644\u0627 \u062A\u0646\u062A\u0645\u064A \u0625\u0644\u0649 \u0645\u0643\u062A\u0628\u0643 \u0623\u0648 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      res.status(200).json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628" });
    }
  });
  app2.post("/api/office-country-commissions", authMiddleware, async (req, res) => {
    const { id, type } = req.user;
    try {
      if (type !== "agent" && type !== "admin" && !req.user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629" });
      }
      const { country, commissionRate } = req.body;
      if (!country || !commissionRate) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0627\u0644\u062F\u0648\u0644\u0629 \u0648\u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
      }
      const commission = await storage.createOrUpdateOfficeCountryCommission({
        officeId: id,
        country,
        commissionRate
      });
      res.status(201).json({
        message: "\u062A\u0645 \u062D\u0641\u0638 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        commission
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629/\u062A\u062D\u062F\u064A\u062B \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0641\u0638 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/office-country-commissions", authMiddleware, async (req, res) => {
    const { id, type } = req.user;
    try {
      if (type !== "agent" && type !== "admin" && !req.user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629" });
      }
      const commissions = await storage.getOfficeCountryCommissions(id);
      res.json(commissions);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u062F\u0648\u0644\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u062F\u0648\u0644\u064A\u0629" });
    }
  });
  app2.delete("/api/office-country-commissions/:id", authMiddleware, async (req, res) => {
    const { id, type } = req.user;
    try {
      if (type !== "agent" && type !== "admin" && !req.user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629" });
      }
      const commissionId = parseInt(req.params.id);
      if (isNaN(commissionId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0651\u0641 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      const commissions = await storage.getOfficeCountryCommissions(id);
      const hasPermission3 = commissions.some((c) => c.id === commissionId);
      if (!hasPermission3) {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u062D\u0630\u0641 \u0639\u0645\u0648\u0644\u0629 \u0644\u0627 \u062A\u0646\u062A\u0645\u064A \u0625\u0644\u0649 \u0645\u0643\u062A\u0628\u0643" });
      }
      await storage.deleteOfficeCountryCommission(commissionId);
      res.status(200).json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/office-country-commissions/:country", authMiddleware, async (req, res) => {
    const { id, type } = req.user;
    try {
      if (type !== "agent" && type !== "admin" && !req.user.extTransferEnabled) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629" });
      }
      const country = req.params.country;
      if (!country) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u062A\u062D\u062F\u064A\u062F \u0627\u0644\u062F\u0648\u0644\u0629" });
      }
      const commission = await storage.getOfficeCommissionByCountry(id, country);
      if (!commission) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0639\u0645\u0648\u0644\u0629 \u0644\u0647\u0630\u0647 \u0627\u0644\u062F\u0648\u0644\u0629" });
      }
      res.json(commission);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/admin-settings", authMiddleware, async (req, res) => {
    const { type } = req.user;
    try {
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646" });
      }
      const settings = await storage.getAdminSettings();
      res.json(settings);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0646\u0638\u0627\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  app2.post("/api/admin-settings", authMiddleware, async (req, res) => {
    const { type } = req.user;
    try {
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646" });
      }
      const { key, value, description } = req.body;
      if (!key || !value) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u062C\u0645\u064A\u0639 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const setting = await storage.createOrUpdateAdminSetting({
        key,
        value,
        description
      });
      res.status(201).json({
        message: "\u062A\u0645 \u062D\u0641\u0638 \u0627\u0644\u0625\u0639\u062F\u0627\u062F \u0628\u0646\u062C\u0627\u062D",
        setting
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0641\u0638 \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0646\u0638\u0627\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0641\u0638 \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  app2.delete("/api/admin-settings/:key", authMiddleware, async (req, res) => {
    const { type } = req.user;
    try {
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646" });
      }
      const key = req.params.key;
      if (!key) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u062A\u062D\u062F\u064A\u062F \u0645\u0641\u062A\u0627\u062D \u0627\u0644\u0625\u0639\u062F\u0627\u062F" });
      }
      await storage.deleteAdminSetting(key);
      res.json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0625\u0639\u062F\u0627\u062F \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0646\u0638\u0627\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  registerAdminTransactionRoutes(app2, authMiddleware, storage);
  app2.get("/api/admin/internal-transfer-logs", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const user = await storage.getUser(userId);
      if (user?.type !== "admin") {
        return res.status(403).json({
          message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0639\u0631\u0636 \u0633\u062C\u0644\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062F\u0627\u062E\u0644\u064A\u0629"
        });
      }
      const page = parseInt(req.query.page) || 1;
      const limit = parseInt(req.query.limit) || 50;
      const offset = (page - 1) * limit;
      const search = req.query.search;
      const currency = req.query.currency;
      const status = req.query.status;
      const dateFrom = req.query.dateFrom;
      const dateTo = req.query.dateTo;
      const conditions = [];
      if (search) {
        conditions.push(
          or4(
            like4(internalTransferLogs.senderName, `%${search}%`),
            like4(internalTransferLogs.receiverName, `%${search}%`),
            like4(internalTransferLogs.senderAccountNumber, `%${search}%`),
            like4(internalTransferLogs.receiverAccountNumber, `%${search}%`)
          )
        );
      }
      if (currency) {
        conditions.push(eq10(internalTransferLogs.currency, currency));
      }
      if (status) {
        conditions.push(eq10(internalTransferLogs.status, status));
      }
      if (dateFrom) {
        conditions.push(sql12`${internalTransferLogs.createdAt} >= ${dateFrom}::timestamp`);
      }
      if (dateTo) {
        conditions.push(sql12`${internalTransferLogs.createdAt} <= ${dateTo}::timestamp`);
      }
      const whereClause = conditions.length > 0 ? and9(...conditions) : void 0;
      const logs = await db.select().from(internalTransferLogs).where(whereClause).orderBy(desc8(internalTransferLogs.createdAt)).limit(limit).offset(offset);
      const totalCountResult = await db.select({ count: sql12`count(*)` }).from(internalTransferLogs).where(whereClause);
      const totalCount = totalCountResult[0]?.count || 0;
      const statsQuery = await db.select({
        totalAmount: sql12`COALESCE(SUM(CAST(${internalTransferLogs.amount} AS DECIMAL)), 0)`,
        totalCommission: sql12`COALESCE(SUM(CAST(${internalTransferLogs.commission} AS DECIMAL)), 0)`,
        totalTransfers: sql12`COUNT(*)`
      }).from(internalTransferLogs).where(whereClause);
      const stats = statsQuery[0] || { totalAmount: "0", totalCommission: "0", totalTransfers: 0 };
      res.json({
        logs,
        pagination: {
          currentPage: page,
          totalPages: Math.ceil(totalCount / limit),
          totalCount,
          limit
        },
        statistics: {
          totalAmount: stats.totalAmount,
          totalCommission: stats.totalCommission,
          totalTransfers: stats.totalTransfers
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062F\u0627\u062E\u0644\u064A\u0629:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062F\u0627\u062E\u0644\u064A\u0629",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  app2.get("/api/admin/internal-transfer-logs/:id", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const user = await storage.getUser(userId);
      if (user?.type !== "admin") {
        return res.status(403).json({
          message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0639\u0631\u0636 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062F\u0627\u062E\u0644\u064A\u0629"
        });
      }
      const logId = parseInt(req.params.id);
      if (isNaN(logId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0633\u062C\u0644 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const logWithTransfer = await db.select({
        // بيانات السجل
        id: internalTransferLogs.id,
        transferId: internalTransferLogs.transferId,
        senderName: internalTransferLogs.senderName,
        senderAccountNumber: internalTransferLogs.senderAccountNumber,
        receiverName: internalTransferLogs.receiverName,
        receiverAccountNumber: internalTransferLogs.receiverAccountNumber,
        amount: internalTransferLogs.amount,
        commission: internalTransferLogs.commission,
        currency: internalTransferLogs.currency,
        note: internalTransferLogs.note,
        status: internalTransferLogs.status,
        ipAddress: internalTransferLogs.ipAddress,
        userAgent: internalTransferLogs.userAgent,
        createdAt: internalTransferLogs.createdAt,
        // بيانات التحويل الأصلي
        originalTransferNote: transfers.note,
        originalTransferCreatedAt: transfers.createdAt
      }).from(internalTransferLogs).leftJoin(transfers, eq10(internalTransferLogs.transferId, transfers.id)).where(eq10(internalTransferLogs.id, logId)).limit(1);
      if (logWithTransfer.length === 0) {
        return res.status(404).json({ message: "\u0633\u062C\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      res.json(logWithTransfer[0]);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062A\u0641\u0627\u0635\u064A\u0644 \u0633\u062C\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u062A\u0641\u0627\u0635\u064A\u0644 \u0633\u062C\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644",
        error: error instanceof Error ? error.message : String(error)
      });
    }
  });
  app2.get("/api/admin/internal-transfers", authMiddleware, async (req, res) => {
    const { type } = req.user;
    try {
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646" });
      }
      const mockTransfers = [
        {
          id: 1,
          amount: "500",
          commission: "5",
          currency: "LYD",
          sender_name: "\u0645\u062D\u0645\u062F \u0639\u0644\u064A",
          receiver_name: "\u0623\u062D\u0645\u062F \u0645\u062D\u0645\u0648\u062F",
          status: "completed",
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        },
        {
          id: 2,
          amount: "1200",
          commission: "12",
          currency: "USD",
          sender_name: "\u0633\u0627\u0644\u0645 \u062E\u0627\u0644\u062F",
          receiver_name: "\u0645\u062D\u0645\u062F \u0623\u062D\u0645\u062F",
          status: "completed",
          createdAt: new Date(Date.now() - 864e5).toISOString()
        },
        {
          id: 3,
          amount: "300",
          commission: "3",
          currency: "EUR",
          sender_name: "\u0639\u0644\u064A \u0633\u0627\u0644\u0645",
          receiver_name: "\u0639\u0645\u0631 \u0625\u0628\u0631\u0627\u0647\u064A\u0645",
          status: "completed",
          createdAt: new Date(Date.now() - 1728e5).toISOString()
        }
      ];
      res.json(mockTransfers);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A \u0627\u0644\u062F\u0627\u062E\u0644\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A \u0627\u0644\u062F\u0627\u062E\u0644\u064A\u0629" });
    }
  });
  app2.get("/api/admin/all-transfers", authMiddleware, async (req, res) => {
    const { type } = req.user;
    try {
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646" });
      }
      const allTransfers = [];
      const internalTransfersQuery = `
        SELECT 
          t.id,
          t.sender_id as senderId,
          t.receiver_id as receiverId,
          t.amount,
          t.commission,
          t.currency,
          t.reference_number as referenceNumber,
          t.created_at as createdAt,
          sender.full_name as senderName,
          receiver.full_name as receiverName
        FROM transfers t
        LEFT JOIN users sender ON t.sender_id = sender.id
        LEFT JOIN users receiver ON t.receiver_id = receiver.id
        ORDER BY t.created_at DESC
      `;
      const internalTransfersFromDb = await db.execute(sql12.raw(internalTransfersQuery));
      for (const transfer of internalTransfersFromDb.rows) {
        allTransfers.push({
          id: transfer.id,
          type: "internal",
          senderId: transfer.senderid,
          senderName: transfer.sendername || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          receiverId: transfer.receiverid,
          receiverName: transfer.receivername || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          amount: transfer.amount,
          commission: transfer.commission,
          currency: transfer.currency,
          referenceNumber: transfer.referencenumber,
          status: "completed",
          // التحويلات الداخلية دائماً مكتملة
          createdAt: transfer.createdat
        });
      }
      const cityTransfersFromDb = await db.select({
        id: cityTransfers.id,
        senderId: cityTransfers.senderId,
        receiverOfficeId: cityTransfers.receiverOfficeId,
        recipientName: cityTransfers.recipientName,
        amount: cityTransfers.amount,
        commission: cityTransfers.commissionForReceiver,
        currency: cityTransfers.currency,
        status: cityTransfers.status,
        verificationCode: cityTransfers.code,
        createdAt: cityTransfers.createdAt,
        completedAt: cityTransfers.completedAt
      }).from(cityTransfers).orderBy(desc8(cityTransfers.createdAt));
      const citySenderIds = cityTransfersFromDb.map((ct) => ct.senderId);
      const citySenders = citySenderIds.length > 0 ? await db.select({
        id: users.id,
        fullName: users.fullName
      }).from(users).where(inArray4(users.id, citySenderIds)) : [];
      const cityOfficeIds = cityTransfersFromDb.map((ct) => ct.receiverOfficeId);
      const cityOffices = cityOfficeIds.length > 0 ? await db.select({
        id: users.id,
        fullName: users.fullName
      }).from(users).where(inArray4(users.id, cityOfficeIds)) : [];
      for (const transfer of cityTransfersFromDb) {
        const sender = citySenders.find((s) => s.id === transfer.senderId);
        const receiverOffice = cityOffices.find((o) => o.id === transfer.receiverOfficeId);
        allTransfers.push({
          id: transfer.id,
          type: "city",
          senderId: transfer.senderId,
          senderName: sender?.fullName || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          receiverOfficeId: transfer.receiverOfficeId,
          receiverOfficeName: receiverOffice?.fullName || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          recipientName: transfer.recipientName,
          amount: transfer.amount,
          commission: transfer.commission,
          currency: transfer.currency,
          status: transfer.status,
          verificationCode: transfer.verificationCode,
          createdAt: transfer.createdAt,
          completedAt: transfer.completedAt
        });
      }
      allTransfers.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
      res.json(allTransfers);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062C\u0645\u064A\u0639 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u062C\u0645\u064A\u0639 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/admin/city-transfers", authMiddleware, async (req, res) => {
    const { type } = req.user;
    try {
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646" });
      }
      const cityTransfersFromDb = await db.select({
        id: cityTransfers.id,
        senderId: cityTransfers.senderId,
        receiverOfficeId: cityTransfers.receiverOfficeId,
        recipientName: cityTransfers.recipientName,
        amount: cityTransfers.amount,
        commission: cityTransfers.commissionForReceiver,
        currency: cityTransfers.currency,
        status: cityTransfers.status,
        verificationCode: cityTransfers.code,
        createdAt: cityTransfers.createdAt,
        completedAt: cityTransfers.completedAt
      }).from(cityTransfers).orderBy(desc8(cityTransfers.createdAt));
      const senderIds = cityTransfersFromDb.map((ct) => ct.senderId);
      const senders = senderIds.length > 0 ? await db.select({
        id: users.id,
        fullName: users.fullName
      }).from(users).where(inArray4(users.id, senderIds)) : [];
      const receiverOfficeIds = cityTransfersFromDb.map((ct) => ct.receiverOfficeId);
      const receiverOffices = receiverOfficeIds.length > 0 ? await db.select({
        id: agentOffices.id,
        officeName: agentOffices.officeName
      }).from(agentOffices).where(inArray4(agentOffices.id, receiverOfficeIds)) : [];
      const result = cityTransfersFromDb.map((transfer) => {
        const sender = senders.find((s) => s.id === transfer.senderId);
        const receiverOffice = receiverOffices.find((ro) => ro.id === transfer.receiverOfficeId);
        return {
          id: transfer.id,
          senderId: transfer.senderId,
          senderName: sender?.fullName || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          receiverOfficeId: transfer.receiverOfficeId,
          receiverOfficeName: receiverOffice?.officeName || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          recipientName: transfer.recipientName,
          amount: transfer.amount,
          commission: transfer.commission,
          currency: transfer.currency,
          status: transfer.status,
          verificationCode: transfer.verificationCode,
          createdAt: transfer.createdAt,
          completedAt: transfer.completedAt
        };
      });
      res.json(result);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A \u0627\u0644\u0645\u062F\u064A\u0646\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A \u0627\u0644\u0645\u062F\u064A\u0646\u064A\u0629" });
    }
  });
  app2.get("/api/admin/inter-office-transfers", authMiddleware, async (req, res) => {
    const { type } = req.user;
    try {
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646" });
      }
      const mockInternationalTransfers = [
        {
          id: 1,
          amount: "5000",
          currency: "USD",
          sender_name: "\u0645\u0643\u062A\u0628 \u0627\u0644\u0623\u0645\u0627\u0646\u0629 \u0644\u0644\u0635\u0631\u0627\u0641\u0629",
          receiver_name: "\u0645\u0643\u062A\u0628 \u0627\u0633\u0637\u0646\u0628\u0648\u0644 \u0644\u0644\u0635\u0631\u0627\u0641\u0629",
          status: "completed",
          commission_for_receiver: "50",
          commission_for_system: "25",
          sending_country: "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          receiving_country: "\u062A\u0631\u0643\u064A\u0627",
          code: "INT123456",
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        },
        {
          id: 2,
          amount: "3000",
          currency: "EUR",
          sender_name: "\u0645\u0643\u062A\u0628 \u0627\u0644\u0646\u0648\u0631 \u0644\u0644\u0635\u0631\u0627\u0641\u0629",
          receiver_name: "\u0645\u0643\u062A\u0628 \u0627\u0644\u0642\u0627\u0647\u0631\u0629 \u0644\u0644\u0635\u0631\u0627\u0641\u0629",
          status: "pending",
          commission_for_receiver: "30",
          commission_for_system: "15",
          sending_country: "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          receiving_country: "\u0645\u0635\u0631",
          code: "INT654321",
          createdAt: new Date(Date.now() - 864e5).toISOString()
        },
        {
          id: 3,
          amount: "7000",
          currency: "USD",
          sender_name: "\u0645\u0643\u062A\u0628 \u0627\u0644\u0634\u0631\u0642 \u0644\u0644\u0635\u0631\u0627\u0641\u0629",
          receiver_name: "\u0645\u0643\u062A\u0628 \u062F\u0628\u064A \u0644\u0644\u0635\u0631\u0627\u0641\u0629",
          status: "completed",
          commission_for_receiver: "70",
          commission_for_system: "35",
          sending_country: "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          receiving_country: "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A",
          code: "INT789012",
          createdAt: new Date(Date.now() - 1728e5).toISOString()
        }
      ];
      res.json(mockInternationalTransfers);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628" });
    }
  });
  app2.get("/api/admin/transfers-stats", authMiddleware, async (req, res) => {
    const { type } = req.user;
    try {
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646" });
      }
      const [internalStats] = (await db.sql`
        SELECT 
          COUNT(*) as count,
          COALESCE(SUM(CAST(amount AS DECIMAL)), 0) as total_amount,
          COALESCE(SUM(CAST(commission AS DECIMAL)), 0) as total_commission
        FROM transfers
      `).map((row) => ({
        count: Number(row.count) || 0,
        totalAmount: String(row.total_amount) || "0",
        totalCommission: String(row.total_commission) || "0"
      }));
      const [cityStats] = (await db.sql`
        SELECT 
          COUNT(*) as count,
          COALESCE(SUM(CAST(amount AS DECIMAL)), 0) as total_amount,
          COALESCE(SUM(CAST(commission_for_system AS DECIMAL)), 0) as total_system_commission,
          SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed_count,
          SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending_count
        FROM city_transfers
      `).map((row) => ({
        count: Number(row.count) || 0,
        totalAmount: String(row.total_amount) || "0",
        totalSystemCommission: String(row.total_system_commission) || "0",
        completedCount: Number(row.completed_count) || 0,
        pendingCount: Number(row.pending_count) || 0
      }));
      const [internationalStats] = (await db.sql`
        SELECT 
          COUNT(*) as count,
          COALESCE(SUM(CAST(amount AS DECIMAL)), 0) as total_amount,
          COALESCE(SUM(CAST(commission_for_system AS DECIMAL)), 0) as total_system_commission,
          SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed_count,
          SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending_count
        FROM inter_office_transfers
      `).map((row) => ({
        count: Number(row.count) || 0,
        totalAmount: String(row.total_amount) || "0",
        totalSystemCommission: String(row.total_system_commission) || "0",
        completedCount: Number(row.completed_count) || 0,
        pendingCount: Number(row.pending_count) || 0
      }));
      const topAgents = (await db.sql`
        SELECT 
          u.id,
          u.full_name as full_name,
          u.city,
          (
            SELECT COUNT(*) FROM city_transfers WHERE sender_id = u.id
          ) + (
            SELECT COUNT(*) FROM inter_office_transfers WHERE sender_id = u.id
          ) as transfer_count
        FROM users u
        WHERE u.type = 'agent'
        ORDER BY transfer_count DESC
        LIMIT 5
      `).map((row) => ({
        id: Number(row.id),
        fullName: String(row.full_name),
        city: String(row.city),
        transferCount: Number(row.transfer_count) || 0
      }));
      const currencyStats = (await db.sql`
        SELECT 
          currency,
          COUNT(*) as count,
          COALESCE(SUM(CAST(amount AS DECIMAL)), 0) as total_amount
        FROM transfers
        GROUP BY currency
        ORDER BY total_amount DESC
      `).map((row) => ({
        currency: String(row.currency),
        count: Number(row.count) || 0,
        totalAmount: String(row.total_amount) || "0"
      }));
      res.json({
        internalStats,
        cityStats,
        internationalStats,
        topAgents,
        currencyStats
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/admin/users/:userId/activities", async (req, res) => {
    try {
      const authHeader = req.headers.authorization;
      if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return res.status(401).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0647" });
      }
      const token = authHeader.split(" ")[1];
      const JWT_SECRET3 = getJwtSecret();
      try {
        const decoded = jwt5.verify(token, JWT_SECRET3);
        if (decoded.type !== "admin") {
          console.log("\u0631\u0641\u0636 \u0627\u0644\u0648\u0635\u0648\u0644: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0644\u064A\u0633 \u0645\u0633\u0624\u0648\u0644\u0627\u064B", decoded);
          return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
        }
        const { userId } = req.params;
        const transactions2 = await storage.getUserTransactions(parseInt(userId));
        console.log("\u062A\u0645 \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A:", transactions2.length);
        const transfers2 = await storage.getUserTransfers(parseInt(userId));
        console.log("\u062A\u0645 \u062C\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A:", transfers2.length);
        const formattedTransactions = transactions2.map((tx) => ({
          type: "transaction",
          date: tx.date || tx.createdAt || /* @__PURE__ */ new Date(),
          data: tx
        }));
        const formattedTransfers = transfers2.map((transfer) => ({
          type: "transfer",
          date: transfer.createdAt || /* @__PURE__ */ new Date(),
          data: transfer
        }));
        const activities = [...formattedTransactions, ...formattedTransfers].sort((a, b) => {
          const dateA = a.date instanceof Date ? a.date : new Date(a.date || /* @__PURE__ */ new Date());
          const dateB = b.date instanceof Date ? b.date : new Date(b.date || /* @__PURE__ */ new Date());
          return dateB.getTime() - dateA.getTime();
        });
        return res.status(200).json({ activities });
      } catch (jwtError) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u062A\u0648\u0643\u0646:", jwtError);
        return res.status(401).json({ message: "\u062A\u0648\u0643\u0646 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u0623\u0646\u0634\u0637\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u0623\u0646\u0634\u0637\u0629" });
    }
  });
  app2.get("/api/verification-requests/my", authMiddleware, async (req, res) => {
    try {
      const { id: userId } = req.user;
      const request = await storage.getUserVerificationRequest(userId);
      if (!request) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642" });
      }
      res.json(request);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.post("/api/user/verify-account", authMiddleware, upload2.fields([
    { name: "id_photo", maxCount: 1 },
    { name: "proof_of_address", maxCount: 1 }
  ]), handleUploadErrors2, async (req, res) => {
    try {
      const { id: userId } = req.user;
      const files = req.files;
      if (!files.id_photo || !files.proof_of_address) {
        return res.status(400).json({
          message: "\u064A\u062C\u0628 \u062A\u0648\u0641\u064A\u0631 \u0635\u0648\u0631\u0629 \u0627\u0644\u0647\u0648\u064A\u0629 \u0648\u0625\u062B\u0628\u0627\u062A \u0627\u0644\u0639\u0646\u0648\u0627\u0646"
        });
      }
      const existingRequest = await storage.getUserVerificationRequest(userId);
      if (existingRequest) {
        if (existingRequest.status === "pending") {
          return res.status(400).json({
            message: "\u0644\u062F\u064A\u0643 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u0642\u064A\u062F \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629 \u0628\u0627\u0644\u0641\u0639\u0644\u060C \u0627\u0646\u062A\u0638\u0631 \u0627\u0644\u0631\u062F \u0645\u0646 \u0627\u0644\u0625\u062F\u0627\u0631\u0629",
            request: existingRequest
          });
        } else if (existingRequest.status === "approved") {
          return res.status(400).json({
            message: "\u062D\u0633\u0627\u0628\u0643 \u0645\u0648\u062B\u0642 \u0628\u0627\u0644\u0641\u0639\u0644",
            request: existingRequest
          });
        }
      }
      const idPhotoUrl = `/uploads/verification/id/${files.id_photo[0].filename}`;
      const proofOfAddressUrl = `/uploads/verification/address/${files.proof_of_address[0].filename}`;
      const request = await storage.createVerificationRequest({
        userId,
        idPhotoUrl,
        proofOfAddressUrl
      });
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642 \u0628\u0646\u062C\u0627\u062D \u0648\u0633\u064A\u062A\u0645 \u0645\u0631\u0627\u062C\u0639\u062A\u0647 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0625\u062F\u0627\u0631\u0629",
        request
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.post("/api/verification-requests", authMiddleware, async (req, res) => {
    try {
      const { id: userId } = req.user;
      const { idPhotoUrl, proofOfAddressUrl } = req.body;
      if (!idPhotoUrl || !proofOfAddressUrl) {
        return res.status(400).json({
          message: "\u064A\u062C\u0628 \u062A\u0648\u0641\u064A\u0631 \u0635\u0648\u0631\u0629 \u0627\u0644\u0647\u0648\u064A\u0629 \u0648\u0625\u062B\u0628\u0627\u062A \u0627\u0644\u0639\u0646\u0648\u0627\u0646"
        });
      }
      const existingRequest = await storage.getUserVerificationRequest(userId);
      if (existingRequest) {
        if (existingRequest.status === "pending") {
          return res.status(400).json({
            message: "\u0644\u062F\u064A\u0643 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u0642\u064A\u062F \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629 \u0628\u0627\u0644\u0641\u0639\u0644\u060C \u0627\u0646\u062A\u0638\u0631 \u0627\u0644\u0631\u062F \u0645\u0646 \u0627\u0644\u0625\u062F\u0627\u0631\u0629",
            request: existingRequest
          });
        } else if (existingRequest.status === "approved") {
          return res.status(400).json({
            message: "\u062D\u0633\u0627\u0628\u0643 \u0645\u0648\u062B\u0642 \u0628\u0627\u0644\u0641\u0639\u0644",
            request: existingRequest
          });
        }
      }
      const request = await storage.createVerificationRequest({
        userId,
        idPhotoUrl,
        proofOfAddressUrl
      });
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642 \u0628\u0646\u062C\u0627\u062D \u0648\u0633\u064A\u062A\u0645 \u0645\u0631\u0627\u062C\u0639\u062A\u0647 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0625\u062F\u0627\u0631\u0629",
        request
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.get("/api/verification-requests/my", authMiddleware, async (req, res) => {
    try {
      const { id: userId } = req.user;
      const request = await storage.getUserVerificationRequest(userId);
      if (!request) {
        return res.status(404).json({ message: "\u0644\u0645 \u062A\u0642\u0645 \u0628\u062A\u0642\u062F\u064A\u0645 \u0637\u0644\u0628 \u062A\u0648\u062B\u064A\u0642 \u0628\u0639\u062F" });
      }
      res.json(request);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.get("/api/verification-requests", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const status = req.query.status;
      const requests = await storage.getAllVerificationRequests(status);
      res.json(requests);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.get("/api/admin/verification-requests", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const status = req.query.status;
      const requests = await storage.getAllVerificationRequests(status);
      res.json(requests);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.post("/api/verification-requests/:id/status", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u063A\u064A\u064A\u0631 \u062D\u0627\u0644\u0629 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
      }
      const requestId = parseInt(req.params.id);
      const { status, notes } = req.body;
      if (!requestId || !status || status !== "approved" && status !== "rejected") {
        return res.status(400).json({ message: "\u0628\u064A\u0627\u0646\u0627\u062A \u063A\u064A\u0631 \u0635\u0627\u0644\u062D\u0629" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.get("/api/user", authMiddleware, async (req, res) => {
    res.set({
      "Cache-Control": "no-cache, no-store, must-revalidate",
      "Pragma": "no-cache",
      "Expires": "0",
      "ETag": Math.random().toString()
    });
    try {
      const { id } = req.user;
      console.log(`\u{1F50D} [${(/* @__PURE__ */ new Date()).toISOString()}] Checking permissions for user ${id}`);
      const user = await storage.getUser(id);
      if (!user) {
        console.log(`\u274C User ${id} not found`);
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      console.log(`\u{1F464} User found: ${user.fullName}, type: ${user.type}`);
      let hasExternalTransferAccess = false;
      let hasAgentAccess = false;
      if (user.type === "agent") {
        const externalTransferRequest = await db.query.upgradeRequests.findFirst({
          where: and9(
            eq10(upgradeRequests.userId, id),
            eq10(upgradeRequests.type, "external_transfer"),
            eq10(upgradeRequests.status, "approved")
          )
        });
        hasExternalTransferAccess = !!externalTransferRequest;
        console.log(`\u{1F4E1} External transfer request found:`, externalTransferRequest);
        console.log(`\u{1F30D} hasExternalTransferAccess: ${hasExternalTransferAccess}`);
        const agentRequest = await db.query.upgradeRequests.findFirst({
          where: and9(
            eq10(upgradeRequests.userId, id),
            eq10(upgradeRequests.type, "agent_upgrade"),
            eq10(upgradeRequests.status, "approved")
          )
        });
        hasAgentAccess = !!agentRequest;
        console.log(`\u{1F3E2} Agent request found:`, agentRequest);
        console.log(`\u{1F535} hasAgentAccess: ${hasAgentAccess}`);
      }
      const { password, ...userWithoutPassword } = user;
      res.set({
        "Cache-Control": "no-store, no-cache, must-revalidate, proxy-revalidate",
        "Pragma": "no-cache",
        "Expires": "0"
      });
      res.json({
        ...userWithoutPassword,
        hasExternalTransferAccess,
        hasAgentAccess
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.get("/api/user/login-sessions", authMiddleware, async (req, res) => {
    try {
      const { id: userId, email } = req.user;
      console.log(`\u{1F50D} \u062C\u0644\u0628 \u062C\u0644\u0633\u0627\u062A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${email} (${userId})`);
      const securityLogs2 = await storage.getSecurityLogs({
        userId,
        email,
        limit: 50,
        // آخر 50 محاولة تسجيل دخول
        offset: 0
      });
      const loginSessions = securityLogs2.filter((log2) => log2.eventType === "LOGIN" || log2.eventType === "FAILED_LOGIN").map((log2) => ({
        id: log2.id,
        timestamp: log2.createdAt,
        success: log2.eventType === "LOGIN",
        ipAddress: log2.ipAddress || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
        location: {
          city: log2.city || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          country: log2.country || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
        },
        device: {
          userAgent: log2.userAgent || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          platform: log2.platform || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
          fingerprint: log2.fingerprint?.substring(0, 8) + "..." || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
        },
        // تحديد ما إذا كانت هذه هي الجلسة الحالية
        isCurrent: false
        // سيتم تحديث هذا لاحقاً
      })).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
      const response = {
        sessions: loginSessions,
        totalCount: loginSessions.length,
        successfulLogins: loginSessions.filter((s) => s.success).length,
        failedAttempts: loginSessions.filter((s) => !s.success).length,
        lastLogin: loginSessions.find((s) => s.success)?.timestamp || null
      };
      console.log(`\u{1F4CA} \u062A\u0645 \u062C\u0644\u0628 ${loginSessions.length} \u062C\u0644\u0633\u0629 \u062A\u0633\u062C\u064A\u0644 \u062F\u062E\u0648\u0644 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${email}`);
      res.json(response);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062C\u0644\u0633\u0627\u062A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u062C\u0644\u0633\u0627\u062A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644",
        sessions: [],
        totalCount: 0,
        successfulLogins: 0,
        failedAttempts: 0,
        lastLogin: null
      });
    }
  });
  app2.get("/api/admin/users", authMiddleware, requirePermission("users"), async (req, res) => {
    try {
      const allUsers = await db.select({
        id: users.id,
        fullName: users.fullName,
        email: users.email,
        phone: users.phone,
        type: users.type,
        adminLevel: users.adminLevel,
        // الصلاحيات التفصيلية
        canManageUsers: users.canManageUsers,
        canManageMarket: users.canManageMarket,
        canManageChat: users.canManageChat,
        canManageInternalTransfers: users.canManageInternalTransfers,
        canManageExternalTransfers: users.canManageExternalTransfers,
        canManageNewAccounts: users.canManageNewAccounts,
        canManageSecurity: users.canManageSecurity,
        canManageSupport: users.canManageSupport,
        canManageReports: users.canManageReports,
        canManageSettings: users.canManageSettings,
        active: users.active,
        verified: users.verified,
        city: users.city,
        extTransferEnabled: users.extTransferEnabled,
        extDailyLimit: users.extDailyLimit,
        extMonthlyLimit: users.extMonthlyLimit,
        extAllowedCountries: users.extAllowedCountries,
        extAllowedCurrencies: users.extAllowedCurrencies
      }).from(users).orderBy(desc8(users.createdAt));
      const usersWithBalances = await Promise.all(
        allUsers.map(async (user) => {
          const balances3 = await storage.getUserBalances(user.id);
          const hasAgentAccess = user.type === "agent" || user.type === "office";
          const hasExternalTransferAccess = hasAgentAccess && user.extTransferEnabled === true;
          return {
            ...user,
            hasExternalTransferAccess,
            hasAgentAccess,
            balances: balances3.reduce((acc, balance) => {
              acc[balance.currency] = balance.amount;
              return acc;
            }, {})
          };
        })
      );
      res.json({
        users: usersWithBalances
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646" });
    }
  });
  app2.post("/api/admin/users/:id/toggle-status", authMiddleware, requirePermission("users"), async (req, res) => {
    try {
      const adminUser = req.user;
      const { type } = adminUser;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const userId = parseInt(req.params.id);
      const targetUser = await storage.getUser(userId);
      if (!targetUser) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (isSuperAdmin(targetUser.email)) {
        console.log(`\u{1F6A8} SUPER ADMIN PROTECTION: \u0645\u062D\u0627\u0648\u0644\u0629 \u062A\u0639\u0637\u064A\u0644 \u0627\u0644\u0633\u0648\u0628\u0631 \u0623\u062F\u0645\u0646 ${targetUser.email} \u0645\u0646 \u0642\u0628\u0644 ${adminUser.email} - \u062A\u0645 \u0627\u0644\u0645\u0646\u0639!`);
        return res.status(403).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062A\u0639\u0637\u064A\u0644 \u0627\u0644\u0645\u062F\u064A\u0631 \u0627\u0644\u0645\u0633\u0624\u0648\u0644 \u0627\u0644\u0623\u0633\u0627\u0633\u064A - \u0647\u0630\u0627 \u0627\u0644\u062D\u0633\u0627\u0628 \u0645\u062D\u0645\u064A \u0628\u0634\u0643\u0644 \u062F\u0627\u0626\u0645 \u0648\u0644\u0627 \u064A\u0645\u0643\u0646 \u062A\u0639\u0637\u064A\u0644\u0647",
          error: "SUPER_ADMIN_PROTECTION_ACTIVATED"
        });
      }
      if (!canRestrictUser(targetUser.email, adminUser.email)) {
        return res.status(403).json({
          message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u063A\u064A\u064A\u0631 \u062D\u0627\u0644\u0629 \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645",
          error: "INSUFFICIENT_PERMISSIONS"
        });
      }
      const newStatus = !targetUser.active;
      console.log(`\u062A\u063A\u064A\u064A\u0631 \u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${targetUser.fullName} (${userId}) \u0645\u0646 ${targetUser.active ? "\u0645\u0641\u0639\u0651\u0644" : "\u0645\u0639\u0637\u0651\u0644"} \u0625\u0644\u0649 ${newStatus ? "\u0645\u0641\u0639\u0651\u0644" : "\u0645\u0639\u0637\u0651\u0644"}`);
      const result = await db.$client.query(`
        UPDATE users 
        SET active = $1 
        WHERE id = $2
        RETURNING *
      `, [newStatus, userId]);
      if (result.rowCount === 0) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
      }
      await storage.createUserNotification({
        userId,
        title: newStatus ? "\u062A\u0645 \u062A\u0641\u0639\u064A\u0644 \u062D\u0633\u0627\u0628\u0643" : "\u062A\u0645 \u062A\u0639\u0637\u064A\u0644 \u062D\u0633\u0627\u0628\u0643",
        body: newStatus ? "\u062A\u0645 \u062A\u0641\u0639\u064A\u0644 \u062D\u0633\u0627\u0628\u0643 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0625\u062F\u0627\u0631\u0629\u060C \u064A\u0645\u0643\u0646\u0643 \u0627\u0644\u0622\u0646 \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u062C\u0645\u064A\u0639 \u062E\u062F\u0645\u0627\u062A \u0627\u0644\u0646\u0638\u0627\u0645" : "\u062A\u0645 \u062A\u0639\u0637\u064A\u0644 \u062D\u0633\u0627\u0628\u0643 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0625\u062F\u0627\u0631\u0629\u060C \u064A\u0631\u062C\u0649 \u0627\u0644\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u062F\u0639\u0645 \u0627\u0644\u0641\u0646\u064A",
        type: newStatus ? "success" : "error",
        isRead: false
      });
      res.status(200).json({
        message: newStatus ? "\u062A\u0645 \u062A\u0641\u0639\u064A\u0644 \u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0646\u062C\u0627\u062D" : "\u062A\u0645 \u062A\u0639\u0637\u064A\u0644 \u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0646\u062C\u0627\u062D",
        user: result.rows[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/admin/users/:id/raise-external-transfer-limit", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const userId = parseInt(req.params.id);
      const {
        extDailyLimit,
        extMonthlyLimit,
        extAllowedCurrencies
      } = req.body;
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (user.type !== "agent") {
        return res.status(400).json({ message: "\u064A\u0645\u0643\u0646 \u0631\u0641\u0639 \u0633\u0642\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u0644\u0644\u0648\u0643\u0644\u0627\u0621 \u0641\u0642\u0637" });
      }
      const updatedSettings = await storage.updateUserExternalTransferSettings(userId, {
        extTransferEnabled: true,
        // تفعيل التحويل الخارجي تلقائياً
        extDailyLimit: extDailyLimit?.toString(),
        extMonthlyLimit: extMonthlyLimit?.toString(),
        extAllowedCurrencies: extAllowedCurrencies || ["USD"]
      });
      await storage.createUserNotification({
        userId,
        title: "\u062A\u0645 \u0631\u0641\u0639 \u0633\u0642\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A",
        body: `\u062A\u0645 \u0631\u0641\u0639 \u0633\u0642\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u0627\u0644\u062E\u0627\u0635 \u0628\u0643. \u0627\u0644\u062D\u062F \u0627\u0644\u064A\u0648\u0645\u064A: ${extDailyLimit || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}\u060C \u0627\u0644\u062D\u062F \u0627\u0644\u0634\u0647\u0631\u064A: ${extMonthlyLimit || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}`,
        type: "success",
        isRead: false
      });
      console.log(`\u2705 \u062A\u0645 \u0631\u0641\u0639 \u0633\u0642\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u0644\u0644\u0648\u0643\u064A\u0644 ${user.fullName} (${userId})`);
      res.status(200).json({
        message: "\u062A\u0645 \u0631\u0641\u0639 \u0633\u0642\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u0628\u0646\u062C\u0627\u062D",
        settings: updatedSettings
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0631\u0641\u0639 \u0633\u0642\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0631\u0641\u0639 \u0633\u0642\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A" });
    }
  });
  app2.delete("/api/admin/users/:id", authMiddleware, requirePermission("users"), async (req, res) => {
    try {
      const adminUser = req.user;
      const { type } = adminUser;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const userId = parseInt(req.params.id);
      const targetUser = await storage.getUser(userId);
      if (!targetUser) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (isSuperAdmin(targetUser.email)) {
        console.log(`\u{1F6A8} SUPER ADMIN PROTECTION: \u0645\u062D\u0627\u0648\u0644\u0629 \u062D\u0630\u0641 \u0627\u0644\u0633\u0648\u0628\u0631 \u0623\u062F\u0645\u0646 ${targetUser.email} \u0645\u0646 \u0642\u0628\u0644 ${adminUser.email} - \u062A\u0645 \u0627\u0644\u0645\u0646\u0639!`);
        return res.status(403).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062D\u0630\u0641 \u0627\u0644\u0645\u062F\u064A\u0631 \u0627\u0644\u0645\u0633\u0624\u0648\u0644 \u0627\u0644\u0623\u0633\u0627\u0633\u064A - \u0647\u0630\u0627 \u0627\u0644\u062D\u0633\u0627\u0628 \u0645\u062D\u0645\u064A \u0628\u0634\u0643\u0644 \u062F\u0627\u0626\u0645",
          error: "SUPER_ADMIN_PROTECTION_ACTIVATED"
        });
      }
      if (!canDeleteUser(targetUser.email, adminUser.email)) {
        return res.status(403).json({
          message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0630\u0641 \u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645",
          error: "INSUFFICIENT_PERMISSIONS"
        });
      }
      console.log(`\u2705 \u062A\u0645 \u062A\u0623\u0643\u064A\u062F \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629: ${adminUser.email} \u064A\u0633\u062A\u0637\u064A\u0639 \u062D\u0630\u0641 ${targetUser.email}`);
      console.log(`\u{1F680} \u0628\u062F\u0621 \u062D\u0630\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0628\u0627\u0633\u062A\u062E\u062F\u0627\u0645 transaction \u0622\u0645\u0646...`);
      await db.transaction(async (tx) => {
        console.log("\u{1F504} \u062D\u0630\u0641 \u0625\u0639\u062C\u0627\u0628\u0627\u062A \u0648\u0642\u0631\u0627\u0621\u0627\u062A \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u0639\u0627\u0645\u0629...");
        await tx.execute(sql12`DELETE FROM message_likes WHERE message_id IN (SELECT id FROM chat_messages WHERE sender_id = ${userId})`);
        await tx.execute(sql12`DELETE FROM chat_message_reads WHERE message_id IN (SELECT id FROM chat_messages WHERE sender_id = ${userId})`);
        await tx.execute(sql12`DELETE FROM chat_message_reads WHERE user_id = ${userId}`);
        console.log("\u{1F504} \u062D\u0630\u0641 \u0625\u0639\u062C\u0627\u0628\u0627\u062A \u0648\u0642\u0631\u0627\u0621\u0627\u062A \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0627\u062A...");
        await tx.execute(sql12`DELETE FROM message_likes WHERE message_id IN (SELECT id FROM group_messages WHERE sender_id = ${userId})`);
        await tx.execute(sql12`DELETE FROM group_message_reads WHERE message_id IN (SELECT id FROM group_messages WHERE sender_id = ${userId})`);
        await tx.execute(sql12`DELETE FROM group_message_reads WHERE user_id = ${userId}`);
        console.log("\u{1F504} \u062D\u0630\u0641 \u0625\u0639\u062C\u0627\u0628\u0627\u062A \u0648\u0642\u0631\u0627\u0621\u0627\u062A \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062E\u0627\u0635\u0629...");
        await tx.execute(sql12`DELETE FROM message_likes WHERE message_id IN (SELECT id FROM private_messages WHERE sender_id = ${userId})`);
        await tx.execute(sql12`DELETE FROM private_message_reads WHERE message_id IN (SELECT id FROM private_messages WHERE sender_id = ${userId})`);
        await tx.execute(sql12`DELETE FROM private_message_reads WHERE user_id = ${userId}`);
        console.log("\u{1F504} \u062D\u0630\u0641 \u0625\u0639\u062C\u0627\u0628\u0627\u062A \u0648\u0642\u0631\u0627\u0621\u0627\u062A \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629...");
        await tx.execute(sql12`
          DELETE FROM message_likes 
          WHERE message_id IN (
            SELECT pm.id FROM private_messages pm 
            JOIN private_chats pc ON pm.chat_id = pc.id 
            WHERE pc.user1_id = ${userId} OR pc.user2_id = ${userId}
          )
        `);
        await tx.execute(sql12`
          DELETE FROM private_message_reads 
          WHERE message_id IN (
            SELECT pm.id FROM private_messages pm 
            JOIN private_chats pc ON pm.chat_id = pc.id 
            WHERE pc.user1_id = ${userId} OR pc.user2_id = ${userId}
          )
        `);
        console.log("\u{1F504} \u062D\u0630\u0641 \u0625\u0639\u062C\u0627\u0628\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0639\u0644\u0649 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0623\u062E\u0631\u0649...");
        await tx.execute(sql12`DELETE FROM message_likes WHERE user_id = ${userId}`);
        console.log("\u2705 \u062A\u0645 \u062D\u0630\u0641 \u062C\u0645\u064A\u0639 \u0627\u0644\u0625\u0639\u062C\u0627\u0628\u0627\u062A \u0648\u0627\u0644\u0642\u0631\u0627\u0621\u0627\u062A \u0628\u0646\u062C\u0627\u062D - \u062F\u0627\u062E\u0644 transaction");
        console.log("\u{1F504} \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0626\u0644...");
        await tx.execute(sql12`DELETE FROM chat_messages WHERE sender_id = ${userId}`);
        await tx.execute(sql12`
          DELETE FROM private_messages 
          WHERE sender_id = ${userId} 
          OR chat_id IN (
            SELECT id FROM private_chats 
            WHERE user1_id = ${userId} OR user2_id = ${userId}
          )
        `);
        await tx.execute(sql12`DELETE FROM group_messages WHERE sender_id = ${userId}`);
        console.log("\u{1F504} \u062D\u0630\u0641 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629...");
        await tx.execute(sql12`DELETE FROM private_chats WHERE user1_id = ${userId} OR user2_id = ${userId}`);
        console.log("\u{1F504} \u062D\u0630\u0641 \u0628\u0627\u0642\u064A \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0631\u062A\u0628\u0637\u0629...");
        await tx.execute(sql12`DELETE FROM upgrade_requests WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM agent_transfers WHERE sender_id = ${userId} OR receiver_id = ${userId} OR agent_id = ${userId} OR destination_agent_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM international_transfers WHERE agent_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM transfers WHERE sender_id = ${userId} OR receiver_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM transactions WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM balances WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM agent_commissions WHERE agent_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM push_subscriptions WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM user_notifications WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM agent_offices WHERE agent_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM hidden_transfers WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM user_settings WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM user_receive_settings WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM user_points WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM points_history WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM user_rewards WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM user_badges WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM referral_balances WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM group_members WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM market_offers WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM market_bids WHERE user_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM city_transfers WHERE sender_id = ${userId}`);
        await tx.execute(sql12`DELETE FROM international_transfers_new WHERE sender_agent_id = ${userId}`);
        console.log("\u{1F504} \u062D\u0630\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0646\u0641\u0633\u0647...");
        await tx.delete(users).where(eq10(users.id, userId));
        console.log("\u{1F389} \u062A\u0645 \u0625\u0643\u0645\u0627\u0644 \u062C\u0645\u064A\u0639 \u0639\u0645\u0644\u064A\u0627\u062A \u0627\u0644\u062D\u0630\u0641 \u0628\u0646\u062C\u0627\u062D \u062F\u0627\u062E\u0644 transaction \u0648\u0627\u062D\u062F");
      });
      console.log(`\u2705 \u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0628\u0646\u062C\u0627\u062D \u0645\u0639 \u062C\u0645\u064A\u0639 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0631\u062A\u0628\u0637\u0629`);
      res.json({
        message: "\u062A\u0645 \u062D\u0630\u0641 \u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.put("/api/admin/users/:id", authMiddleware, requirePermission("users"), async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const userId = parseInt(req.params.id);
      const { fullName, email, phone, city, type: userType } = req.body;
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const updatedUser = await storage.updateUser(userId, {
        fullName: fullName || user.fullName,
        email: email || user.email,
        phone: phone || user.phone,
        city: city || user.city,
        type: userType || user.type
      });
      await storage.createUserNotification({
        userId,
        title: "\u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u062D\u0633\u0627\u0628",
        body: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u062D\u0633\u0627\u0628\u0643 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u0624\u0648\u0644",
        type: "info",
        isRead: false
      });
      res.json({
        message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0646\u062C\u0627\u062D",
        user: updatedUser
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/admin/users/:id/notify", authMiddleware, requirePermission("users"), async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const userId = parseInt(req.params.id);
      const { message, subject } = req.body;
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      console.log("\u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", {
        userId,
        userName: user.fullName,
        userEmail: user.email,
        phone: user.phone
      });
      const notification = await storage.createUserNotification({
        userId,
        title: subject,
        body: message,
        type: "info",
        isRead: false
      });
      console.log("\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u0634\u0639\u0627\u0631:", notification);
      res.json({
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0628\u0646\u062C\u0627\u062D",
        notification
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631" });
    }
  });
  app2.post("/api/admin/notify-by-account", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const { account_number, message, subject } = req.body;
      if (!account_number || !message || !subject) {
        return res.status(400).json({ message: "\u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0645\u0637\u0644\u0648\u0628\u0629: \u0631\u0642\u0645 \u0627\u0644\u062D\u0633\u0627\u0628\u060C \u0627\u0644\u0645\u0648\u0636\u0648\u0639\u060C \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
      }
      const user = await storage.getUserByPhoneOrId(account_number);
      if (!user) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0647\u0630\u0627 \u0627\u0644\u0631\u0642\u0645" });
      }
      console.log("\u0625\u0631\u0633\u0627\u0644 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0648\u0627\u0633\u0637\u0629 \u0631\u0642\u0645 \u0627\u0644\u062D\u0633\u0627\u0628:", {
        accountNumber: account_number,
        userId: user.id,
        userName: user.fullName,
        userEmail: user.email
      });
      const notification = await storage.createUserNotification({
        userId: user.id,
        title: subject,
        body: message,
        type: "info",
        isRead: false
      });
      console.log(`\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0628\u0631\u0642\u0645 ${notification.id} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${user.fullName} (${user.id}) \u0628\u0631\u0642\u0645 \u062D\u0633\u0627\u0628 ${account_number}`);
      return res.status(200).json({
        message: `\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0628\u0646\u062C\u0627\u062D \u0625\u0644\u0649 ${user.fullName}`,
        notification,
        success: true
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631" });
    }
  });
  app2.get("/api/admin/users/:id/activities", authMiddleware, async (req, res) => {
    res.set({
      "Cache-Control": "no-cache, no-store, must-revalidate",
      "Pragma": "no-cache",
      "Expires": "0"
    });
    try {
      console.log(`\u{1F3AF}\u{1F3AF}\u{1F3AF} \u0628\u062F\u0621 \u0645\u0639\u0627\u0644\u062C\u0629 \u0637\u0644\u0628 activities \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${req.params.id}`);
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const userId = parseInt(req.params.id);
      console.log(`\u{1F50D} \u0645\u0639\u0627\u0644\u062C\u0629 activities \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ID: ${userId}`);
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      console.log(`\u{1F4CA} \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0648\u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}...`);
      const transactions2 = await storage.getUserTransactions(userId);
      const transfers2 = await storage.getUserTransfers(userId);
      console.log(`\u062A\u0645 \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A: ${transactions2.length}`);
      console.log(`\u062A\u0645 \u062C\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A: ${transfers2.length}`);
      console.log(`\u{1F50D} \u062A\u062D\u0633\u064A\u0646 \u0628\u064A\u0627\u0646\u0627\u062A ${transfers2.length} \u062A\u062D\u0648\u064A\u0644\u0627\u062A...`);
      const enrichedTransfers = await Promise.all(
        transfers2.map(async (transfer) => {
          console.log(`\u{1F50D} \u0645\u0639\u0627\u0644\u062C\u0629 \u062A\u062D\u0648\u064A\u0644 ${transfer.id} - \u0627\u0644\u0645\u0631\u0633\u0644 ID: ${transfer.senderId}, \u0627\u0644\u0645\u0633\u062A\u0642\u0628\u0644 ID: ${transfer.receiverId}`);
          const senderUser = await storage.getUser(transfer.senderId);
          const receiverUser = await storage.getUser(transfer.receiverId);
          console.log(`\u{1F4E7} \u0625\u062B\u0631\u0627\u0621 \u062A\u062D\u0648\u064A\u0644 ${transfer.id}:`);
          console.log(`   - \u0627\u0644\u0645\u0631\u0633\u0644: ${senderUser?.fullName} (${senderUser?.accountNumber})`);
          console.log(`   - \u0627\u0644\u0645\u0633\u062A\u0642\u0628\u0644: ${receiverUser?.fullName} (${receiverUser?.accountNumber})`);
          const enrichedTransfer = {
            ...transfer,
            senderName: senderUser?.fullName || `\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${transfer.senderId}`,
            receiverName: receiverUser?.fullName || `\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${transfer.receiverId}`,
            senderAccountNumber: senderUser?.accountNumber || null,
            receiverAccountNumber: receiverUser?.accountNumber || null
          };
          console.log(`\u2705 \u062A\u062D\u0648\u064A\u0644 ${transfer.id} \u0645\u062D\u0633\u0646 \u0628\u0646\u062C\u0627\u062D`);
          return enrichedTransfer;
        })
      );
      console.log(`\u{1F389} \u062A\u0645 \u062A\u062D\u0633\u064A\u0646 ${enrichedTransfers.length} \u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0628\u0646\u062C\u0627\u062D`);
      const activities = [
        ...transactions2.map((t) => ({
          type: "transaction",
          data: t,
          createdAt: t.createdAt
        })),
        ...enrichedTransfers.map((t) => ({
          type: "transfer",
          data: t,
          createdAt: t.createdAt
        }))
      ].sort(
        (a, b) => new Date(b.createdAt || /* @__PURE__ */ new Date()).getTime() - new Date(a.createdAt || /* @__PURE__ */ new Date()).getTime()
      );
      res.json({
        user: {
          id: user.id,
          fullName: user.fullName,
          email: user.email
        },
        activities
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u0623\u0646\u0634\u0637\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u0623\u0646\u0634\u0637\u0629" });
    }
  });
  app2.post("/api/admin/topup", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const { account_number, currency, amount } = req.body;
      if (!account_number || !currency || !amount || isNaN(Number(amount)) || Number(amount) <= 0) {
        return res.status(400).json({ message: "\u0628\u064A\u0627\u0646\u0627\u062A \u063A\u064A\u0631 \u0635\u0627\u0644\u062D\u0629" });
      }
      const user = await storage.getUserByPhoneOrId(account_number);
      if (!user) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0647\u0630\u0627 \u0627\u0644\u0631\u0642\u0645" });
      }
      const transaction = await storage.createTransaction({
        userId: user.id,
        type: "deposit",
        amount: Number(amount),
        currency,
        description: "\u0625\u064A\u062F\u0627\u0639 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0625\u062F\u0627\u0631\u0629",
        createdAt: /* @__PURE__ */ new Date()
      });
      let balance;
      console.log(`\u0628\u062F\u0621 \u0639\u0645\u0644\u064A\u0629 \u062A\u062D\u062F\u064A\u062B \u0631\u0635\u064A\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${user.id} \u0628\u0645\u0628\u0644\u063A ${amount} ${currency}`);
      const numericAmount = parseFloat(amount);
      const result = await db.$client.query(`
        INSERT INTO balances (user_id, currency, amount)
        VALUES ($1, $2, $3::numeric)
        ON CONFLICT (user_id, currency) DO UPDATE
        SET amount = (COALESCE(balances.amount, '0')::numeric + $3::numeric)
        RETURNING *;
      `, [user.id, currency, numericAmount]);
      balance = result.rows[0];
      console.log(`\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0635\u064A\u062F \u0628\u0646\u062C\u0627\u062D: ${JSON.stringify(balance)}`);
      await storage.createUserNotification({
        userId: user.id,
        title: "\u062A\u0645 \u0634\u062D\u0646 \u0631\u0635\u064A\u062F\u0643",
        body: `\u062A\u0645 \u0625\u0636\u0627\u0641\u0629 ${amount} ${currency} \u0625\u0644\u0649 \u0631\u0635\u064A\u062F\u0643 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0625\u062F\u0627\u0631\u0629`,
        type: "success",
        isRead: false
      });
      res.status(200).json({
        message: `\u2705 \u062A\u0645 \u0634\u062D\u0646 ${amount} ${currency} \u0644\u062D\u0633\u0627\u0628 ${user.fullName} \u0628\u0646\u062C\u0627\u062D.`,
        transaction,
        balance
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0634\u062D\u0646 \u0631\u0635\u064A\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0634\u062D\u0646 \u0631\u0635\u064A\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/admin/withdraw", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const { user_id, currency, amount } = req.body;
      if (!user_id || !currency || !amount || isNaN(Number(amount)) || Number(amount) <= 0) {
        return res.status(400).json({ message: "\u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0645\u0637\u0644\u0648\u0628\u0629: user_id, amount, currency" });
      }
      const user = await storage.getUser(Number(user_id));
      if (!user) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
      }
      const userBalance = await storage.getUserBalance(user.id, currency);
      if (!userBalance || parseFloat(userBalance.amount) < parseFloat(amount)) {
        return res.status(400).json({ message: "\u0627\u0644\u0631\u0635\u064A\u062F \u063A\u064A\u0631 \u0643\u0627\u0641\u064D \u0644\u0625\u062C\u0631\u0627\u0621 \u0639\u0645\u0644\u064A\u0629 \u0627\u0644\u0633\u062D\u0628" });
      }
      const transaction = await storage.createTransaction({
        userId: user.id,
        type: "withdraw",
        amount: Number(amount),
        currency,
        description: "\u0633\u062D\u0628 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0625\u062F\u0627\u0631\u0629",
        createdAt: /* @__PURE__ */ new Date()
      });
      let balance;
      const existingBalance = await storage.getUserBalance(user.id, currency);
      if (existingBalance) {
        const currentAmount = parseFloat(existingBalance.amount);
        const amountToSubtract = parseFloat(amount);
        const newAmount = (currentAmount - amountToSubtract).toString();
        console.log(`\u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0635\u064A\u062F: \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u062D\u0627\u0644\u064A ${existingBalance.amount} - \u0627\u0644\u0633\u062D\u0628 ${amount} = ${newAmount}`);
        const numericAmount = parseFloat(amount);
        const result = await db.$client.query(`
          UPDATE balances 
          SET amount = (COALESCE(balances.amount, '0')::numeric - $3::numeric)
          WHERE user_id = $1 AND currency = $2
          RETURNING *;
        `, [user.id, currency, numericAmount]);
        balance = result.rows[0];
        console.log(`\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0635\u064A\u062F \u0628\u0639\u062F \u0627\u0644\u0633\u062D\u0628 \u0628\u0646\u062C\u0627\u062D: ${JSON.stringify(balance)}`);
      } else {
        console.error("\u062E\u0637\u0623: \u0644\u0627 \u064A\u0648\u062C\u062F \u0631\u0635\u064A\u062F \u0644\u0644\u0633\u062D\u0628 \u0645\u0646\u0647!");
        return res.status(400).json({ message: "\u0644\u0627 \u064A\u0648\u062C\u062F \u0631\u0635\u064A\u062F \u0644\u0644\u0633\u062D\u0628 \u0645\u0646\u0647" });
      }
      await storage.createUserNotification({
        userId: user.id,
        title: "\u062A\u0645 \u0633\u062D\u0628 \u0631\u0635\u064A\u062F \u0645\u0646 \u062D\u0633\u0627\u0628\u0643",
        body: `\u062A\u0645 \u0633\u062D\u0628 ${amount} ${currency} \u0645\u0646 \u0631\u0635\u064A\u062F\u0643 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0625\u062F\u0627\u0631\u0629`,
        type: "error",
        isRead: false
      });
      res.status(200).json({
        message: `\u2705 \u062A\u0645 \u0633\u062D\u0628 ${amount} ${currency} \u0645\u0646 \u062D\u0633\u0627\u0628 ${user.fullName} \u0628\u0646\u062C\u0627\u062D.`,
        transaction,
        balance
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0633\u062D\u0628 \u0631\u0635\u064A\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0633\u062D\u0628 \u0631\u0635\u064A\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/admin/verification-requests/:id/status", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u063A\u064A\u064A\u0631 \u062D\u0627\u0644\u0629 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
      }
      const requestId = parseInt(req.params.id);
      const { status, notes } = req.body;
      if (!requestId || !status || status !== "approved" && status !== "rejected") {
        return res.status(400).json({ message: "\u0628\u064A\u0627\u0646\u0627\u062A \u063A\u064A\u0631 \u0635\u0627\u0644\u062D\u0629" });
      }
      const updatedRequest = await storage.updateVerificationRequestStatus(requestId, status, notes);
      if (status === "approved") {
        try {
          const verificationRequest = await storage.getUserVerificationRequestById(requestId);
          if (verificationRequest) {
            await db.update(users).set({ verified: true }).where(eq10(users.id, verificationRequest.userId));
          }
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u062A\u0648\u062B\u064A\u0642 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
        }
      }
      res.json({
        message: status === "approved" ? "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642 \u0628\u0646\u062C\u0627\u062D" : "\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642",
        request: updatedRequest
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0637\u0644\u0628 \u0627\u0644\u062A\u0648\u062B\u064A\u0642" });
    }
  });
  app2.get("/api/notifications", authMiddleware, async (req, res) => {
    try {
      const { id } = req.user;
      const result = await db.$client.query(`
        SELECT id, user_id as "userId", title, body, type, is_read as "isRead", created_at as "createdAt"
        FROM user_notifications
        WHERE user_id = $1
        ORDER BY created_at DESC
      `, [id]);
      const notifications = result.rows;
      res.json(notifications);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/notifications/:id/read", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const notificationId = parseInt(req.params.id);
      if (isNaN(notificationId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const notifications = await storage.getUserNotifications(userId);
      const notification = notifications.find((n) => n.id === notificationId);
      if (!notification) {
        return res.status(404).json({ message: "\u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const updatedNotification = await storage.markNotificationAsRead(notificationId);
      res.json(updatedNotification);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0643\u0645\u0642\u0631\u0648\u0621:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0643\u0645\u0642\u0631\u0648\u0621" });
    }
  });
  app2.post("/api/notifications/read-all", authMiddleware, async (req, res) => {
    try {
      const { id } = req.user;
      await storage.markAllUserNotificationsAsRead(id);
      res.json({ message: "\u062A\u0645 \u062A\u0639\u0644\u064A\u0645 \u062C\u0645\u064A\u0639 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0643\u0645\u0642\u0631\u0648\u0621\u0629" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u0644\u064A\u0645 \u062C\u0645\u064A\u0639 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0643\u0645\u0642\u0631\u0648\u0621\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u0644\u064A\u0645 \u062C\u0645\u064A\u0639 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0643\u0645\u0642\u0631\u0648\u0621\u0629" });
    }
  });
  app2.post("/api/admin/notifications", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0636\u0627\u0641\u0629 \u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646" });
      }
      const { userId, title, body, notificationType } = req.body;
      if (!userId || !title) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0648\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const notification = await storage.createUserNotification({
        userId,
        title,
        body,
        type: notificationType || "info",
        isRead: false
      });
      res.status(201).json(notification);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0625\u0634\u0639\u0627\u0631 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/admin/notify-by-account", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0636\u0627\u0641\u0629 \u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646" });
      }
      const { account_number, subject, message } = req.body;
      if (!account_number || !subject || !message) {
        return res.status(400).json({ message: "\u0631\u0642\u0645 \u0627\u0644\u062D\u0633\u0627\u0628 \u0648\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0648\u0645\u062D\u062A\u0648\u0627\u0647 \u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const user = await storage.getUserByPhoneOrId(account_number);
      if (!user) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u062D\u0633\u0627\u0628 \u0628\u0647\u0630\u0627 \u0627\u0644\u0631\u0642\u0645" });
      }
      const notification = await storage.createUserNotification({
        userId: user.id,
        title: subject,
        body: message,
        type: "info",
        isRead: false
      });
      console.log(`\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0625\u0634\u0639\u0627\u0631 \u0628\u0631\u0642\u0645 ${notification.id} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${user.fullName} (${user.id}) \u0628\u0631\u0642\u0645 \u062D\u0633\u0627\u0628 ${account_number}`);
      return res.status(200).json({
        message: `\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0628\u0646\u062C\u0627\u062D \u0625\u0644\u0649 ${user.fullName}`,
        notification,
        success: true
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631" });
    }
  });
  app2.post("/api/user/admin-message", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { message } = req.body;
      if (!message || typeof message !== "string" || message.trim() === "") {
        return res.status(400).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0645\u0637\u0644\u0648\u0628\u0629 \u0648\u0644\u0627 \u064A\u0645\u0643\u0646 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0641\u0627\u0631\u063A\u0629" });
      }
      const result = await db.$client.query(`
        INSERT INTO admin_messages (user_id, message, is_read)
        VALUES ($1, $2, $3)
        RETURNING *
      `, [userId, message, false]);
      await storage.createUserNotification({
        userId,
        title: "\u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u0644\u0644\u0645\u0633\u0624\u0648\u0644",
        body: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u062A\u0643 \u0644\u0644\u0645\u0633\u0624\u0648\u0644 \u0648\u0633\u064A\u062A\u0645 \u0627\u0644\u0631\u062F \u0639\u0644\u064A\u0647\u0627 \u0641\u064A \u0623\u0642\u0631\u0628 \u0648\u0642\u062A",
        type: "info",
        isRead: false
      });
      const senderUser = await storage.getUser(userId);
      const adminUser = await storage.getAdminUser();
      if (adminUser) {
        await storage.createUserNotification({
          userId: adminUser.id,
          title: "\u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0646 \u0645\u0633\u062A\u062E\u062F\u0645",
          body: `\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${senderUser?.fullName || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"} (${userId})`,
          type: "info",
          isRead: false
        });
      }
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        adminMessage: result.rows[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u0644\u0644\u0645\u0633\u0624\u0648\u0644:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/user/admin-messages", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const result = await db.$client.query(`
        SELECT * FROM admin_messages
        WHERE user_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      res.json(result.rows);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0645\u0633\u0624\u0648\u0644:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0631\u0633\u0627\u0626\u0644" });
    }
  });
  app2.get("/api/admin/messages", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const result = await db.$client.query(`
        SELECT m.*, u.full_name, u.email
        FROM admin_messages m
        JOIN users u ON m.user_id = u.id
        ORDER BY m.created_at DESC
      `);
      res.json(result.rows);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0631\u0633\u0627\u0626\u0644" });
    }
  });
  app2.post("/api/admin/message", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const { user_id, message } = req.body;
      if (!user_id || !message || typeof message !== "string" || message.trim() === "") {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0648\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const user = await storage.getUser(user_id);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const result = await db.$client.query(`
        INSERT INTO admin_messages (user_id, message, is_read)
        VALUES ($1, $2, $3)
        RETURNING *
      `, [user_id, message, false]);
      const targetUser = await storage.getUser(user_id);
      await storage.createUserNotification({
        userId: user_id,
        title: "\u0631\u0633\u0627\u0644\u0629 \u0645\u0646 \u0625\u062F\u0627\u0631\u0629 \u0627\u0644\u0646\u0638\u0627\u0645",
        body: message,
        type: "info",
        isRead: false
      });
      res.json({
        message: "\u{1F4E9} \u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        adminMessage: result.rows[0],
        notification: {
          userId: user_id,
          title: "\u0631\u0633\u0627\u0644\u0629 \u0645\u0646 \u0625\u062F\u0627\u0631\u0629 \u0627\u0644\u0646\u0638\u0627\u0645",
          body: message,
          createdAt: /* @__PURE__ */ new Date()
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/admin/messages/:id/reply", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const messageId = parseInt(req.params.id);
      const { reply } = req.body;
      if (!reply || typeof reply !== "string" || reply.trim() === "") {
        return res.status(400).json({ message: "\u0627\u0644\u0631\u062F \u0645\u0637\u0644\u0648\u0628 \u0648\u0644\u0627 \u064A\u0645\u0643\u0646 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0641\u0627\u0631\u063A\u064B\u0627" });
      }
      const messageResult = await db.$client.query(`
        SELECT m.*, u.id as user_id
        FROM admin_messages m
        JOIN users u ON m.user_id = u.id
        WHERE m.id = $1
      `, [messageId]);
      if (messageResult.rowCount === 0) {
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const message = messageResult.rows[0];
      await db.$client.query(`
        UPDATE admin_messages
        SET is_read = TRUE
        WHERE id = $1
      `, [messageId]);
      await storage.createUserNotification({
        userId: message.user_id,
        title: "\u0631\u062F \u0645\u0646 \u0627\u0644\u0645\u0633\u0624\u0648\u0644 \u0639\u0644\u0649 \u0631\u0633\u0627\u0644\u062A\u0643",
        body: reply,
        type: "success",
        isRead: false
      });
      res.json({
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u062F \u0628\u0646\u062C\u0627\u062D",
        adminMessage: {
          ...message,
          is_read: true
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0631\u062F \u0639\u0644\u0649 \u0631\u0633\u0627\u0644\u0629:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0631\u062F \u0639\u0644\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
    }
  });
  app2.post("/api/admin/messages/:id/read", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const messageId = parseInt(req.params.id);
      const result = await db.$client.query(`
        UPDATE admin_messages
        SET is_read = TRUE
        WHERE id = $1
        RETURNING *
      `, [messageId]);
      if (result.rowCount === 0) {
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      res.json({
        message: "\u062A\u0645 \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0643\u0645\u0642\u0631\u0648\u0621\u0629",
        adminMessage: result.rows[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0643\u0645\u0642\u0631\u0648\u0621\u0629:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0643\u0645\u0642\u0631\u0648\u0621\u0629" });
    }
  });
  app2.post("/api/admin/edit-user", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const { user_id, full_name, email } = req.body;
      if (!user_id || !full_name || !email) {
        return res.status(400).json({ message: "\u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0645\u0637\u0644\u0648\u0628\u0629: user_id, full_name, email" });
      }
      const user = await storage.getUser(user_id);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (email !== user.email) {
        const existingUser = await storage.getUserByEmail(email);
        if (existingUser && existingUser.id !== user_id) {
          return res.status(400).json({ message: "\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0627\u0644\u0641\u0639\u0644" });
        }
      }
      await db.$client.query(`
        UPDATE users SET full_name = $1, email = $2 WHERE id = $3
      `, [full_name, email, user_id]);
      await storage.createUserNotification({
        userId: user_id,
        title: "\u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A",
        body: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A\u0643 \u0627\u0644\u0634\u062E\u0635\u064A\u0629 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u0624\u0648\u0644",
        type: "info",
        isRead: false
      });
      res.json({ message: "\u2705 \u062A\u0645 \u062A\u0639\u062F\u064A\u0644 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u062F\u064A\u0644 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u062F\u064A\u0644 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/admin/toggle-user", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const { user_id, status } = req.body;
      if (!user_id) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0637\u0644\u0648\u0628" });
      }
      if (typeof status !== "boolean") {
        return res.status(400).json({ message: "\u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0635\u062D\u064A\u062D\u0629 \u0623\u0648 \u062E\u0627\u0637\u0626\u0629" });
      }
      await db.$client.query(`
        UPDATE users SET active = $1 WHERE id = $2
      `, [status, user_id]);
      await storage.createUserNotification({
        userId: user_id,
        title: status ? "\u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u062D\u0633\u0627\u0628" : "\u062A\u0639\u0637\u064A\u0644 \u0627\u0644\u062D\u0633\u0627\u0628",
        body: status ? "\u062A\u0645 \u062A\u0641\u0639\u064A\u0644 \u062D\u0633\u0627\u0628\u0643 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u0624\u0648\u0644" : "\u062A\u0645 \u062A\u0639\u0637\u064A\u0644 \u062D\u0633\u0627\u0628\u0643 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u0624\u0648\u0644",
        type: status ? "success" : "warning",
        isRead: false
      });
      res.json({
        message: status ? "\u2705 \u062A\u0645 \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" : "\u{1F6AB} \u062A\u0645 \u062A\u0639\u0637\u064A\u0644 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.post("/api/admin/withdraw", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0646\u0641\u064A\u0630 \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const { user_id, amount, currency } = req.body;
      if (!user_id || !amount || !currency) {
        return res.status(400).json({ message: "\u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0645\u0637\u0644\u0648\u0628\u0629: user_id, amount, currency" });
      }
      const amountNum = parseFloat(amount);
      if (isNaN(amountNum) || amountNum <= 0) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0628\u0644\u063A \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B" });
      }
      const result = await db.$client.query(`
        UPDATE balances SET amount = amount - $1
        WHERE user_id = $2 AND currency = $3 AND amount >= $1
        RETURNING *
      `, [amount, user_id, currency]);
      if (result.rowCount === 0) {
        return res.status(400).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u0633\u062D\u0628 \u0627\u0644\u0645\u0628\u0644\u063A. \u062A\u0623\u0643\u062F \u0645\u0646 \u0648\u062C\u0648\u062F \u0631\u0635\u064A\u062F \u0643\u0627\u0641\u064D." });
      }
      await storage.createUserNotification({
        userId: user_id,
        title: "\u0633\u062D\u0628 \u0645\u0646 \u0627\u0644\u0631\u0635\u064A\u062F",
        body: `\u062A\u0645 \u0633\u062D\u0628 ${amount} ${currency} \u0645\u0646 \u0631\u0635\u064A\u062F\u0643 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u0624\u0648\u0644`,
        type: "warning",
        isRead: false
      });
      await storage.createTransaction({
        userId: user_id,
        type: "withdraw",
        amount: amount.toString(),
        currency,
        description: "\u0633\u062D\u0628 \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u0624\u0648\u0644"
      });
      res.json({
        message: "\u2705 \u062A\u0645 \u0633\u062D\u0628 \u0627\u0644\u0645\u0628\u0644\u063A \u0628\u0646\u062C\u0627\u062D",
        updatedBalance: result.rows[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0633\u062D\u0628 \u0627\u0644\u0645\u0628\u0644\u063A:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0633\u062D\u0628 \u0627\u0644\u0645\u0628\u0644\u063A" });
    }
  });
  app2.get("/api/admin/user-activity/:id", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const userId = parseInt(req.params.id);
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const transfersResult = await db.$client.query(`
        SELECT * FROM transfers
        WHERE sender_id = $1 OR receiver_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const cityTransfersResult = await db.$client.query(`
        SELECT * FROM city_transfers
        WHERE sender_id = $1 OR receiver_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const internationalTransfersResult = await db.$client.query(`
        SELECT * FROM inter_office_transfers
        WHERE sender_id = $1 OR receiver_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const transactionsResult = await db.$client.query(`
        SELECT * FROM transactions
        WHERE user_id = $1
        ORDER BY date DESC
      `, [userId]);
      const marketOffersResult = await db.$client.query(`
        SELECT * FROM market_offers
        WHERE user_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const marketTransactionsResult = await db.$client.query(`
        SELECT * FROM market_transactions
        WHERE buyer_id = $1 OR seller_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const upgradeRequestsResult = await db.$client.query(`
        SELECT * FROM upgrade_requests
        WHERE user_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const verificationRequestsResult = await db.$client.query(`
        SELECT * FROM verification_requests
        WHERE user_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const agentTransfersResult = await db.$client.query(`
        SELECT * FROM agent_transfers
        WHERE sender_id = $1 OR receiver_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const notificationsResult = await db.$client.query(`
        SELECT * FROM user_notifications
        WHERE user_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const adminMessagesResult = await db.$client.query(`
        SELECT * FROM admin_messages
        WHERE user_id = $1
        ORDER BY created_at DESC
      `, [userId]);
      const balancesResult = await db.$client.query(`
        SELECT * FROM balances
        WHERE user_id = $1
      `, [userId]);
      res.json({
        user,
        activity: {
          transfers: transfersResult.rows || [],
          cityTransfers: cityTransfersResult.rows || [],
          internationalTransfers: internationalTransfersResult.rows || [],
          transactions: transactionsResult.rows || [],
          marketOffers: marketOffersResult.rows || [],
          marketTransactions: marketTransactionsResult.rows || [],
          upgradeRequests: upgradeRequestsResult.rows || [],
          verificationRequests: verificationRequestsResult.rows || [],
          agentTransfers: agentTransfersResult.rows || [],
          notifications: notificationsResult.rows || [],
          adminMessages: adminMessagesResult.rows || [],
          balances: balancesResult.rows || []
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0646\u0634\u0627\u0637 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0646\u0634\u0627\u0637 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.get("/api/chat/rooms", authMiddleware, async (req, res) => {
    try {
      const rooms = await storage.getChatRooms();
      res.json(rooms);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u063A\u0631\u0641 \u0627\u0644\u062F\u0631\u062F\u0634\u0629" });
    }
  });
  app2.get("/api/chat/public-room", authMiddleware, async (req, res) => {
    try {
      const room = await storage.getPublicChatRoom();
      if (!room) {
        return res.status(404).json({ message: "\u0627\u0644\u063A\u0631\u0641\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      res.json(room);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u063A\u0631\u0641\u0629 \u0627\u0644\u0639\u0627\u0645\u0629" });
    }
  });
  app2.get("/api/chat/messages/:roomId", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { roomId } = req.params;
      const limit = req.query.limit ? parseInt(req.query.limit) : 50;
      const messages = await storage.getChatMessages(parseInt(roomId), limit, userId);
      res.json(messages);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062F\u0631\u062F\u0634\u0629" });
    }
  });
  app2.post("/api/chat/messages", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { roomId, content } = req.body;
      if (!content) {
        return res.status(400).json({ message: "\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0645\u0637\u0644\u0648\u0628" });
      }
      let targetRoomId = roomId;
      if (!targetRoomId) {
        const publicRoom = await storage.getPublicChatRoom();
        if (!publicRoom) {
          return res.status(404).json({ message: "\u0627\u0644\u063A\u0631\u0641\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
        }
        targetRoomId = publicRoom.id;
      }
      const message = await storage.createChatMessage({
        roomId: targetRoomId,
        senderId: userId,
        content
      });
      const user = await storage.getUser(userId);
      if (user && io) {
        io.to(`room-${targetRoomId}`).emit("newMessage", {
          ...message,
          senderName: user.fullName
        });
      }
      res.status(201).json(message);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/chat/private", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const chats = await storage.getUserPrivateChats(userId);
      const unreadCounts = await storage.getUnreadMessagesCount(userId);
      const enhancedChats = chats.map((chat) => {
        const unreadInfo = unreadCounts.find((u) => u.chatId === chat.id);
        return {
          ...chat,
          unreadCount: unreadInfo ? parseInt(unreadInfo.count) : 0
        };
      });
      res.json(enhancedChats);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u062F\u0631\u062F\u0634\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629" });
    }
  });
  app2.post("/api/chat/group/create", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { name, isPrivate, description } = req.body;
      if (!name || name.trim() === "") {
        return res.status(400).json({ message: "\u0627\u0633\u0645 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0645\u0637\u0644\u0648\u0628" });
      }
      const group = await storage.createGroupChat({
        name,
        creatorId: userId,
        isPrivate: isPrivate === true,
        description
      });
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0628\u0646\u062C\u0627\u062D",
        groupId: group.id
      });
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
    }
  });
  app2.get("/api/chat/groups", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const userGroups = await storage.getUserGroupChats(userId);
      const publicGroups = await storage.getAllPublicGroupChats();
      const userGroupIds = new Set(userGroups.map((g) => g.id));
      const additionalPublicGroups = publicGroups.filter((g) => !userGroupIds.has(g.id));
      const allGroups = [...userGroups, ...additionalPublicGroups];
      console.log(`\u{1F465} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} - \u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u0639\u0636\u0648\u064A\u0629: ${userGroups.length}, \u0639\u0627\u0645\u0629 \u0625\u0636\u0627\u0641\u064A\u0629: ${additionalPublicGroups.length}, \u0627\u0644\u0645\u062C\u0645\u0648\u0639: ${allGroups.length}`);
      res.json(allGroups);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0627\u062A" });
    }
  });
  app2.post("/api/chat/groups/leave-public", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      console.log(`\u{1F9F9} \u0637\u0644\u0628 \u062E\u0631\u0648\u062C \u062A\u0644\u0642\u0627\u0626\u064A \u0645\u0646 \u062C\u0645\u064A\u0639 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u0639\u0627\u0645\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
      const userGroups = await storage.getUserGroupChats(userId);
      const publicGroups = userGroups.filter((group) => !group.isPrivate);
      let removedCount = 0;
      for (const group of publicGroups) {
        try {
          const userRole = await storage.getUserRoleInGroup(group.id, userId);
          if (userRole !== "owner") {
            const success = await storage.removeGroupMember(group.id, userId);
            if (success) {
              removedCount++;
              console.log(`\u2705 \u062A\u0645 \u0625\u062E\u0631\u0627\u062C \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0645\u0646 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 ${group.id}`);
            }
          }
        } catch (error) {
          console.error(`\u274C \u0641\u0634\u0644 \u0625\u062E\u0631\u0627\u062C \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0645\u0646 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${group.id}:`, error);
        }
      }
      console.log(`\u{1F9F9} \u062A\u0645 \u0625\u062E\u0631\u0627\u062C \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0645\u0646 ${removedCount} \u0645\u062C\u0645\u0648\u0639\u0629 \u0639\u0627\u0645\u0629`);
      res.json({
        success: true,
        removedCount,
        message: `\u062A\u0645 \u0627\u0644\u062E\u0631\u0648\u062C \u0645\u0646 ${removedCount} \u0645\u062C\u0645\u0648\u0639\u0629 \u0639\u0627\u0645\u0629`
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0631\u0648\u062C \u0645\u0646 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u0639\u0627\u0645\u0629:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u062E\u0631\u0648\u062C \u0645\u0646 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u0639\u0627\u0645\u0629" });
    }
  });
  app2.delete("/api/chat/groups/:groupId/leave", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      if (!groupId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const userRole = await storage.getUserRoleInGroup(groupId, userId);
      if (!userRole) {
        return res.status(404).json({ message: "\u0623\u0646\u062A \u0644\u0633\u062A \u0639\u0636\u0648\u0627\u064B \u0641\u064A \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      if (userRole === "owner") {
        const members = await storage.getGroupMembers(groupId);
        if (members.length > 1) {
          return res.status(400).json({
            message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0644\u0645\u0627\u0644\u0643 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u062A\u0631\u0643\u0647\u0627. \u064A\u062C\u0628 \u062A\u0639\u064A\u064A\u0646 \u0645\u0627\u0644\u0643 \u062C\u062F\u064A\u062F \u0623\u0648 \u062D\u0630\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0646\u0647\u0627\u0626\u064A\u0627\u064B"
          });
        }
      }
      const success = await storage.removeGroupMember(groupId, userId);
      if (!success) {
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u062A\u0631\u0643 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      res.json({
        success: true,
        message: "\u062A\u0645 \u062A\u0631\u0643 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0631\u0643 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0631\u0643 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
    }
  });
  app2.delete("/api/chat/groups/:groupId", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      if (!groupId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      if (group.creatorId !== userId) {
        return res.status(403).json({
          message: "\u0641\u0642\u0637 \u0645\u0624\u0633\u0633 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u064A\u0645\u0643\u0646\u0647 \u062D\u0630\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0646\u0647\u0627\u0626\u064A\u0627\u064B"
        });
      }
      const members = await storage.getGroupMembers(groupId);
      const success = await storage.deleteGroup(groupId);
      if (!success) {
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      if (io) {
        for (const member of members) {
          const memberUserId = member.user_id || member.userId;
          if (memberUserId !== userId) {
            io.to(`user-${memberUserId}`).emit("groupDeleted", {
              groupId,
              groupName: group.name,
              deletedBy: userId
            });
          }
        }
        const roomName = `group-${groupId}`;
        const sockets = await io.in(roomName).fetchSockets();
        for (const socket of sockets) {
          await socket.leave(roomName);
        }
        console.log(`\u{1F5D1}\uFE0F \u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} \u0648\u0625\u062E\u0631\u0627\u062C ${sockets.length} \u0645\u062A\u0635\u0644 \u0645\u0646 \u0627\u0644\u063A\u0631\u0641\u0629`);
      }
      res.json({
        success: true,
        message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0646\u0647\u0627\u0626\u064A\u0627\u064B"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
    }
  });
  app2.post("/api/chat/groups/:groupId/members", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const { memberId, role } = req.body;
      if (!memberId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0639\u0636\u0648 \u0645\u0637\u0644\u0648\u0628" });
      }
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const members = await storage.getGroupMembers(groupId);
      console.log("\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629", groupId, "\u0627\u0644\u0623\u0639\u0636\u0627\u0621:", members);
      console.log("\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u062D\u0627\u0644\u064A:", userId);
      const isAdmin = members.some(
        (m) => (m.user_id === userId || m.userId === userId) && (m.role === "admin" || m.role === "owner")
      );
      if (!isAdmin) {
        return res.status(403).json({ message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0645\u0633\u0624\u0648\u0644\u0627\u064B \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0644\u0625\u0636\u0627\u0641\u0629 \u0623\u0639\u0636\u0627\u0621" });
      }
      const targetUser = await storage.getUser(memberId);
      if (!targetUser) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0645\u0631\u0627\u062F \u0625\u0636\u0627\u0641\u062A\u0647 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const isMember = members.some((m) => m.userId === memberId);
      if (isMember) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0639\u0636\u0648 \u0628\u0627\u0644\u0641\u0639\u0644 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      if (!group.isPrivate && members.length >= 100) {
        return res.status(400).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0625\u0636\u0627\u0641\u0629 \u0623\u0639\u0636\u0627\u0621 \u062C\u062F\u062F. \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u0639\u0627\u0645\u0629 \u0645\u062D\u062F\u0648\u062F\u0629 \u0628\u0640 100 \u0639\u0636\u0648 \u0643\u062D\u062F \u0623\u0642\u0635\u0649"
        });
      }
      await storage.addGroupMember({
        groupId,
        userId: memberId,
        role: role || "member"
      });
      await storage.createUserNotification({
        userId: memberId,
        title: "\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0645\u062C\u0645\u0648\u0639\u0629 \u0645\u062D\u0627\u062F\u062B\u0629",
        body: `\u062A\u0645\u062A \u0625\u0636\u0627\u0641\u062A\u0643 \u0625\u0644\u0649 \u0645\u062C\u0645\u0648\u0639\u0629 ${group.name}`,
        type: "info",
        isRead: false
      });
      res.json({ message: "\u062A\u0645\u062A \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0639\u0636\u0648 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0639\u0636\u0648" });
    }
  });
  app2.get("/api/chat/groups/:groupId", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const members = await storage.getGroupMembers(groupId);
      const isMember = members.some((m) => m.user_id === userId || m.userId === userId);
      if (!isMember && group.isPrivate) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      res.json({
        group,
        members
      });
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
    }
  });
  app2.post("/api/chat/group/:groupId/add-member", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const { targetUserId } = req.body;
      if (!targetUserId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0645\u0631\u0627\u062F \u0625\u0636\u0627\u0641\u062A\u0647 \u0645\u0637\u0644\u0648\u0628" });
      }
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const isAdmin = await storage.isGroupAdmin(groupId, userId);
      if (!isAdmin) {
        return res.status(403).json({ message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0645\u0633\u0624\u0648\u0644\u0627\u064B \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0644\u0625\u0636\u0627\u0641\u0629 \u0623\u0639\u0636\u0627\u0621" });
      }
      const targetUser = await storage.getUser(targetUserId);
      if (!targetUser) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0645\u0631\u0627\u062F \u0625\u0636\u0627\u0641\u062A\u0647 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      await storage.addGroupMember({
        groupId,
        userId: targetUserId,
        role: "member"
      });
      await storage.createUserNotification({
        userId: targetUserId,
        title: "\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0645\u062C\u0645\u0648\u0639\u0629 \u0645\u062D\u0627\u062F\u062B\u0629",
        body: `\u062A\u0645\u062A \u0625\u0636\u0627\u0641\u062A\u0643 \u0625\u0644\u0649 \u0645\u062C\u0645\u0648\u0639\u0629 ${group.name}`,
        type: "info",
        isRead: false
      });
      res.json({ message: "\u062A\u0645\u062A \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0639\u0636\u0648 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0639\u0636\u0648" });
    }
  });
  app2.post("/api/chat/groups/:groupId/auto-join", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      if (group.isPrivate) {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u062E\u0627\u0635\u0629 \u0648\u0644\u0627 \u064A\u0645\u0643\u0646 \u0627\u0644\u062F\u062E\u0648\u0644 \u0625\u0644\u064A\u0647\u0627 \u062A\u0644\u0642\u0627\u0626\u064A\u0627\u064B" });
      }
      const io2 = req.app.get("io");
      if (io2) {
        const members2 = await storage.getGroupMembers(groupId);
        console.log(`\u{1F9F9} \u0641\u062D\u0635 ${members2.length} \u0639\u0636\u0648 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 ${groupId} \u0644\u0644\u062A\u0646\u0638\u064A\u0641 \u0627\u0644\u062A\u0644\u0642\u0627\u0626\u064A`);
        for (const member of members2) {
          const memberId = member.user_id || member.userId;
          const connectedSockets = await io2.in(`group-${groupId}`).fetchSockets();
          const memberConnected = connectedSockets.some((socket) => socket.data?.userId === memberId);
          if (!memberConnected) {
            console.log(`\u{1F9F9} \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0639\u0636\u0648 \u063A\u064A\u0631 \u0627\u0644\u0645\u062A\u0635\u0644 ${memberId} \u0645\u0646 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 ${groupId}`);
            await storage.removeGroupMember(groupId, memberId);
          }
        }
      }
      const members = await storage.getGroupMembers(groupId);
      const isMember = members.some(
        (m) => m.user_id === userId || m.userId === userId
      );
      if (isMember) {
        return res.json({
          message: "\u0623\u0646\u062A \u0639\u0636\u0648 \u0628\u0627\u0644\u0641\u0639\u0644 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629",
          joined: false,
          memberCount: members.length
        });
      }
      if (members.length >= 100) {
        return res.status(400).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0627\u0644\u0627\u0646\u0636\u0645\u0627\u0645 \u0644\u0644\u0645\u062C\u0645\u0648\u0639\u0629. \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 100 \u0639\u0636\u0648 \u0644\u0644\u0645\u062C\u0645\u0648\u0639\u0627\u062A \u0627\u0644\u0639\u0627\u0645\u0629",
          memberCount: members.length
        });
      }
      await storage.addGroupMember({
        groupId,
        userId,
        role: "member"
      });
      console.log(`\u2705 \u0627\u0646\u0636\u0645\u0627\u0645 \u062A\u0644\u0642\u0627\u0626\u064A: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0627\u0646\u0636\u0645 \u0644\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 ${groupId}`);
      res.json({
        message: "\u062A\u0645 \u0627\u0644\u0627\u0646\u0636\u0645\u0627\u0645 \u0644\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u062A\u0644\u0642\u0627\u0626\u064A\u0627\u064B",
        joined: true,
        memberCount: members.length + 1
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0627\u0646\u0636\u0645\u0627\u0645 \u0627\u0644\u062A\u0644\u0642\u0627\u0626\u064A:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0627\u0646\u0636\u0645\u0627\u0645 \u0644\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
    }
  });
  app2.post("/api/chat/groups/:groupId/messages", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const { content, fileUrl, fileType } = req.body;
      console.log(`\u0645\u062D\u0627\u0648\u0644\u0629 \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0625\u0644\u0649 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}: "${content}", \u0645\u0631\u0641\u0642: ${fileUrl ? "\u0646\u0639\u0645" : "\u0644\u0627"}`);
      if ((!content || typeof content !== "string" || content.trim() === "") && !fileUrl) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u062D\u062A\u0648\u064A \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0639\u0644\u0649 \u0646\u0635 \u0623\u0648 \u0645\u0644\u0641 \u0645\u0631\u0641\u0642" });
      }
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      if (group.isPrivate) {
        const isMember = await storage.isGroupMember(groupId, userId);
        if (!isMember) {
          return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
        }
      }
      const isBanned = await storage.isUserBanned(groupId, userId);
      if (isBanned) {
        console.log(`\u{1F6AB} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0645\u062D\u0638\u0648\u0631 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} - \u0631\u0641\u0636 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0639\u0628\u0631 HTTP`);
        return res.status(403).json({
          message: "\u062A\u0645 \u062D\u0638\u0631\u0643 \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0648\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0626\u0644 \u0623\u0648 \u0627\u0644\u0645\u0634\u0627\u0631\u0643\u0629 \u0641\u064A\u0647\u0627",
          isBanned: true
        });
      }
      const isMuted = await storage.isUserMuted(groupId, userId);
      if (isMuted) {
        console.log(`\u{1F507} \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0645\u0643\u062A\u0648\u0645 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} - \u0631\u0641\u0636 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0639\u0628\u0631 HTTP`);
        return res.status(403).json({
          message: "\u0623\u0646\u062A \u0645\u0643\u062A\u0648\u0645 \u0641\u064A \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0648\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0626\u0644 \u062D\u0627\u0644\u064A\u0627\u064B",
          isMuted: true
        });
      }
      const message = await storage.createGroupMessage({
        groupId,
        senderId: userId,
        content: content ? content.trim() : "",
        fileUrl,
        fileType
      });
      const user = await storage.getUser(userId);
      const fullMessage = {
        ...message,
        senderName: user ? user.fullName : "\u0645\u0633\u062A\u062E\u062F\u0645"
      };
      res.status(201).json(fullMessage);
      const roomName = `group-${groupId}`;
      io.to(roomName).emit("newGroupMessage", fullMessage);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0631\u0633\u0627\u0644\u0629 \u0625\u0644\u0649 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
    }
  });
  app2.put("/api/chat/groups/:groupId/messages/:messageId", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const messageId = parseInt(req.params.messageId);
      const { content } = req.body;
      console.log(`\u0645\u062D\u0627\u0648\u0644\u0629 \u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
      console.log("\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u062C\u062F\u064A\u062F:", content);
      if (!groupId || isNaN(groupId)) {
        console.log("\u062E\u0637\u0623: \u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D");
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      if (!messageId || isNaN(messageId)) {
        console.log("\u062E\u0637\u0623: \u0645\u0639\u0631\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D");
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      if (!content || typeof content !== "string" || content.trim() === "") {
        console.log("\u062E\u0637\u0623: \u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D");
        return res.status(400).json({ message: "\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0645\u0637\u0644\u0648\u0628" });
      }
      console.log(`\u062C\u0627\u0631\u064A \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0628\u0627\u0644\u0645\u0639\u0631\u0641 ${groupId}`);
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        console.log("\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629:", groupId);
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      console.log("\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629:", group);
      console.log(`\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0639\u0636\u0648\u064A\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}`);
      const isMember = await storage.isGroupMember(groupId, userId);
      console.log("\u0647\u0644 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0639\u0636\u0648 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629\u061F", isMember);
      if (!isMember) {
        console.log(`\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0644\u064A\u0633 \u0639\u0636\u0648\u0627 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}`);
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      console.log(`\u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0627\u0644\u0645\u0639\u0631\u0641 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}`);
      const messageResult = await db.execute(sql12`
        SELECT * FROM group_messages 
        WHERE id = ${messageId} AND group_id = ${groupId}
        LIMIT 1
      `);
      console.log("\u0646\u062A\u064A\u062C\u0629 \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", messageResult);
      console.log("\u0639\u062F\u062F \u0627\u0644\u0635\u0641\u0648\u0641 \u0627\u0644\u0645\u0633\u062A\u0631\u062C\u0639\u0629:", messageResult.rows.length);
      if (!messageResult.rows || messageResult.rows.length === 0) {
        console.log(`\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0631\u0633\u0627\u0644\u0629 \u0628\u0627\u0644\u0645\u0639\u0631\u0641 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}`);
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const message = messageResult.rows[0];
      console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u0631\u0627\u062F \u062A\u0639\u062F\u064A\u0644\u0647\u0627:", message);
      console.log(`\u0645\u0642\u0627\u0631\u0646\u0629 \u0645\u0639\u0631\u0641 \u0645\u0631\u0633\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${message.sender_id} \u0645\u0639 \u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u062D\u0627\u0644\u064A ${userId}`);
      if (message.sender_id !== userId) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0644\u064A\u0633 \u0645\u0627\u0644\u0643 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId}`);
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u062A\u0639\u062F\u064A\u0644 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0622\u062E\u0631\u064A\u0646" });
      }
      const FIVE_MINUTES = 5 * 60 * 1e3;
      const now = /* @__PURE__ */ new Date();
      const sentTime = new Date(message.created_at);
      const timeElapsed = now.getTime() - sentTime.getTime();
      console.log(`\u0627\u0644\u0648\u0642\u062A \u0627\u0644\u0645\u0646\u0642\u0636\u064A \u0645\u0646\u0630 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629: ${timeElapsed}ms \u0645\u0646 \u0623\u0635\u0644 ${FIVE_MINUTES}ms \u0645\u0633\u0645\u0648\u062D \u0628\u0647`);
      if (timeElapsed > FIVE_MINUTES) {
        console.log(`\u062E\u0637\u0623: \u0627\u0646\u062A\u0647\u0649 \u0648\u0642\u062A \u0627\u0644\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0645\u0633\u0645\u0648\u062D \u0628\u0647 (${FIVE_MINUTES}ms)`);
        return res.status(400).json({ message: "\u0627\u0646\u062A\u0647\u0649 \u0648\u0642\u062A \u0627\u0644\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0645\u0633\u0645\u0648\u062D \u0628\u0647 (5 \u062F\u0642\u0627\u0626\u0642)" });
      }
      console.log("\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0627\u062A \u0648\u0627\u0644\u0648\u0642\u062A \u0627\u0643\u062A\u0645\u0644 \u0628\u0646\u062C\u0627\u062D");
      console.log(`\u062A\u062D\u062F\u064A\u062B \u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0625\u0644\u0649: "${content.trim()}"`);
      try {
        const updateResult = await db.execute(sql12`
          UPDATE group_messages 
          SET content = ${content.trim()}, edited_at = NOW(), is_edited = TRUE
          WHERE id = ${messageId} AND sender_id = ${userId}
          RETURNING *
        `);
        console.log("\u0646\u062A\u064A\u062C\u0629 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", updateResult);
        if (updateResult.rows && updateResult.rows.length > 0) {
          console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629 \u0645\u0646 \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u062A\u062D\u062F\u064A\u062B:", updateResult.rows[0]);
        } else {
          console.log("\u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u062A\u062D\u062F\u064A\u062B \u0644\u0645 \u064A\u064F\u0631\u062C\u0639 \u0623\u064A \u0635\u0641\u0648\u0641");
        }
      } catch (updateError) {
        console.error("\u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", updateError);
        return res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
      }
      console.log("\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0641\u064A \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A\u060C \u062C\u0627\u0631\u064A \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u062D\u062F\u062B\u0629");
      try {
        const updatedMessageResult2 = await db.execute(sql12`
          SELECT * FROM group_messages 
          WHERE id = ${messageId}
          LIMIT 1
        `);
        console.log("\u0646\u062A\u064A\u062C\u0629 \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629:", updatedMessageResult2);
        console.log("\u0639\u062F\u062F \u0627\u0644\u0635\u0641\u0648\u0641 \u0627\u0644\u0645\u0633\u062A\u0631\u062C\u0639\u0629:", updatedMessageResult2.rows ? updatedMessageResult2.rows.length : 0);
        if (!updatedMessageResult2.rows || updatedMessageResult2.rows.length === 0) {
          console.log(`\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629 \u0628\u0627\u0644\u0645\u0639\u0631\u0641 ${messageId}`);
          return res.status(500).json({ message: "\u0641\u0634\u0644 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
        }
      } catch (fetchError) {
        console.error("\u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629:", fetchError);
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629" });
      }
      const updatedMessageResult = await db.execute(sql12`
        SELECT * FROM group_messages 
        WHERE id = ${messageId}
        LIMIT 1
      `);
      console.log("\u0646\u062A\u064A\u062C\u0629 \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629:", updatedMessageResult);
      if (!updatedMessageResult.rows || updatedMessageResult.rows.length === 0) {
        console.log(`\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629 \u0628\u0627\u0644\u0645\u0639\u0631\u0641 ${messageId}`);
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629" });
      }
      const messageData = updatedMessageResult.rows[0];
      console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0639\u062F \u0627\u0644\u062A\u062D\u062F\u064A\u062B:", messageData);
      const user = await storage.getUser(userId);
      const fullMessage = {
        id: messageData.id,
        groupId: messageData.group_id,
        senderId: messageData.sender_id,
        content: messageData.content,
        createdAt: messageData.created_at,
        editedAt: messageData.edited_at,
        isEdited: messageData.is_edited,
        senderName: user ? user.fullName : "\u0645\u0633\u062A\u062E\u062F\u0645"
      };
      console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0645\u0644\u0629 \u0627\u0644\u0645\u064F\u0639\u062F\u0651\u0629 \u0644\u0644\u0625\u0631\u0633\u0627\u0644:", JSON.stringify(fullMessage));
      console.log("\u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629 \u0639\u0628\u0631 WebSocket:", fullMessage);
      const roomName = `group-${groupId}`;
      if (io) {
        io.to(roomName).emit("updatedGroupMessage", fullMessage);
      } else {
        console.error("\u062E\u0637\u0623: WebSocket \u063A\u064A\u0631 \u0645\u062A\u0627\u062D");
      }
      res.json(fullMessage);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u062F\u064A\u0644 \u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/chat/groups/:groupId/members", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = req.params.groupId;
      if (!groupId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0645\u0637\u0644\u0648\u0628" });
      }
      const groupIdNumber = parseInt(groupId);
      const group = await storage.getGroupChat(groupIdNumber);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const members = await storage.getGroupMembers(groupIdNumber);
      const isMember = members.some((m) => m.user_id === userId || m.userId === userId);
      if (!isMember && group.isPrivate) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      res.json(members);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0623\u0639\u0636\u0627\u0621 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
    }
  });
  app2.get("/api/chat/groups/:groupId/messages", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const group = await storage.getGroupChat(groupId);
      if (!group) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const members = await storage.getGroupMembers(groupId);
      const isMember = members.some((m) => m.user_id === userId || m.userId === userId);
      if (!isMember && group.isPrivate) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      const messages = await storage.getGroupMessages(groupId, 50, userId);
      res.json(messages);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
    }
  });
  app2.get("/api/chat/public-room", authMiddleware, async (req, res) => {
    try {
      const publicRoom = await storage.getPublicChatRoom();
      if (!publicRoom) {
        return res.status(404).json({ message: "\u0627\u0644\u063A\u0631\u0641\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      res.json(publicRoom);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u063A\u0631\u0641\u0629 \u0627\u0644\u0639\u0627\u0645\u0629" });
    }
  });
  app2.get("/api/chat/messages", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const publicRoom = await storage.getPublicChatRoom();
      if (!publicRoom) {
        return res.status(404).json({ message: "\u0627\u0644\u063A\u0631\u0641\u0629 \u0627\u0644\u0639\u0627\u0645\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const messages = await storage.getChatMessages(publicRoom.id, 100, userId);
      res.json(messages);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u0639\u0627\u0645\u0629" });
    }
  });
  app2.post("/api/chat/messages/:messageId/like", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const messageId = parseInt(req.params.messageId);
      if (isNaN(messageId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const result = await storage.toggleMessageLike(messageId, userId);
      res.json({
        success: true,
        liked: result.liked,
        count: result.count
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0628\u062F\u064A\u0644 \u0625\u0639\u062C\u0627\u0628 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0625\u0639\u062C\u0627\u0628" });
    }
  });
  app2.get("/api/chat/messages/:messageId/likes", authMiddleware, async (req, res) => {
    try {
      const messageId = parseInt(req.params.messageId);
      if (isNaN(messageId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const likes = await storage.getMessageLikes(messageId);
      res.json(likes);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062C\u0627\u0628\u0627\u062A \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u0639\u062C\u0627\u0628\u0627\u062A" });
    }
  });
  app2.post("/api/chat/upload", authMiddleware, upload2.single("file"), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u062A\u062D\u0645\u064A\u0644 \u0623\u064A \u0645\u0644\u0641" });
      }
      const fileUrl = `/uploads/${req.file.filename}`;
      const fileType = req.file.mimetype;
      console.log(`\u062A\u0645 \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0645\u0644\u0641 \u0628\u0646\u062C\u0627\u062D: ${fileUrl} \u0645\u0646 \u0627\u0644\u0646\u0648\u0639 ${fileType}`);
      res.status(200).json({
        fileUrl,
        fileType,
        originalName: req.file.originalname,
        size: req.file.size
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0645\u0644\u0641:", error);
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0645\u0644\u0641" });
    }
  }, handleUploadErrors2);
  app2.put("/api/chat/messages/:messageId", authMiddleware, async (req, res) => {
    const { messageId } = req.params;
    const { content, roomId } = req.body;
    const userId = req.user.id;
    console.log(`\u0645\u062D\u0627\u0648\u0644\u0629 \u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0641\u064A \u0627\u0644\u063A\u0631\u0641\u0629 ${roomId} \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
    if (!content || !content.trim()) {
      console.log("\u062E\u0637\u0623: \u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0641\u0627\u0631\u063A");
      return res.status(400).json({ message: "\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0645\u0637\u0644\u0648\u0628" });
    }
    try {
      const messageResult = await db.$client.query(`
        SELECT * FROM chat_messages 
        WHERE id = $1 
        AND sender_id = $2
        AND room_id = $3
        LIMIT 1
      `, [parseInt(messageId), userId, roomId]);
      if (messageResult.rows.length === 0) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0623\u0648 \u063A\u064A\u0631 \u0645\u0645\u0644\u0648\u0643\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0623\u0648 \u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u0639\u062F\u064A\u0644\u0647\u0627" });
      }
      const message = messageResult.rows[0];
      console.log("\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", message);
      const FIVE_MINUTES = 5 * 60 * 1e3;
      const now = /* @__PURE__ */ new Date();
      const sentTime = new Date(message.created_at);
      const timeElapsed = now.getTime() - sentTime.getTime();
      console.log(`\u0627\u0644\u0648\u0642\u062A \u0627\u0644\u0645\u0646\u0642\u0636\u064A \u0645\u0646\u0630 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629: ${timeElapsed}ms \u0645\u0646 \u0623\u0635\u0644 ${FIVE_MINUTES}ms \u0645\u0633\u0645\u0648\u062D \u0628\u0647`);
      if (timeElapsed > FIVE_MINUTES) {
        console.log(`\u062E\u0637\u0623: \u0627\u0646\u062A\u0647\u0649 \u0648\u0642\u062A \u0627\u0644\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0645\u0633\u0645\u0648\u062D \u0628\u0647 (${FIVE_MINUTES}ms)`);
        return res.status(400).json({ message: "\u0627\u0646\u062A\u0647\u0649 \u0648\u0642\u062A \u0627\u0644\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0645\u0633\u0645\u0648\u062D \u0628\u0647 (5 \u062F\u0642\u0627\u0626\u0642)" });
      }
      console.log("\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0627\u062A \u0648\u0627\u0644\u0648\u0642\u062A \u0627\u0643\u062A\u0645\u0644 \u0628\u0646\u062C\u0627\u062D");
      console.log(`\u062A\u062D\u062F\u064A\u062B \u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0625\u0644\u0649: "${content.trim()}"`);
      const updateResult = await db.$client.query(`
        UPDATE chat_messages 
        SET content = $1, 
            is_edited = true, 
            edited_at = NOW() 
        WHERE id = $2 
        RETURNING *
      `, [content.trim(), parseInt(messageId)]);
      const updatedMessage = updateResult.rows[0];
      console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629:", updatedMessage);
      const userResult = await db.$client.query(`
        SELECT full_name FROM users WHERE id = $1 LIMIT 1
      `, [userId]);
      const result = {
        id: updatedMessage.id,
        roomId: updatedMessage.room_id,
        senderId: updatedMessage.sender_id,
        content: updatedMessage.content,
        createdAt: updatedMessage.created_at,
        senderName: userResult.rows[0]?.full_name || req.user.fullName,
        isEdited: updatedMessage.is_edited,
        editedAt: updatedMessage.edited_at
      };
      io.to(`room-${roomId}`).emit("messageUpdated", result);
      console.log("\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629 \u0625\u0644\u0649 \u0627\u0644\u063A\u0631\u0641\u0629 room-" + roomId);
      return res.status(200).json(result);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", error);
      return res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/chat/private/:chatId", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const chatId = parseInt(req.params.chatId);
      const privateChatsResult = await db.execute(sql12`
        SELECT * FROM private_chats
        WHERE id = ${chatId} AND (user1_id = ${userId} OR user2_id = ${userId})
        LIMIT 1
      `);
      const chat = privateChatsResult.rows[0];
      if (!chat || chat.id !== chatId) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u062F\u0631\u062F\u0634\u0629" });
      }
      const messagesResult = await db.execute(sql12`
        SELECT pm.*, u.full_name as sender_name
        FROM private_messages pm
        JOIN users u ON pm.sender_id = u.id
        WHERE pm.chat_id = ${chatId}
          AND pm.is_deleted = false
          AND (pm.deleted_for_users IS NULL 
               OR pm.deleted_for_users = '{}' 
               OR ${userId} != ALL(pm.deleted_for_users))
        ORDER BY pm.created_at DESC
        LIMIT 50
      `);
      const messages = messagesResult.rows.map((msg) => ({
        id: msg.id,
        chatId: msg.chat_id,
        senderId: msg.sender_id,
        content: msg.content,
        fileUrl: msg.file_url,
        fileType: msg.file_type,
        isRead: msg.is_read,
        isEdited: msg.is_edited,
        createdAt: msg.created_at,
        editedAt: msg.edited_at,
        senderName: msg.sender_name,
        isDeleted: msg.is_deleted,
        deletedBy: msg.deleted_by,
        deletedAt: msg.deleted_at
      }));
      const otherUserId = chat.user1Id === userId ? chat.user2Id : chat.user1Id;
      const otherUser = await storage.getUser(otherUserId);
      await storage.markMessagesAsRead(chatId, userId);
      res.json({
        messages: messages.reverse(),
        chat,
        otherUser: otherUser ? {
          id: otherUser.id,
          fullName: otherUser.fullName
        } : null
      });
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u062E\u0627\u0635\u0629" });
    }
  });
  app2.post("/api/chat/private/create", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { otherUserId } = req.body;
      if (!otherUserId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0622\u062E\u0631 \u0645\u0637\u0644\u0648\u0628" });
      }
      if (userId === otherUserId) {
        return res.status(400).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0625\u0646\u0634\u0627\u0621 \u0645\u062D\u0627\u062F\u062B\u0629 \u0645\u0639 \u0646\u0641\u0633\u0643" });
      }
      const otherUser = await storage.getUser(otherUserId);
      if (!otherUser) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0622\u062E\u0631 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      let chat = await storage.getPrivateChat(userId, otherUserId);
      if (!chat) {
        chat = await storage.createPrivateChat(userId, otherUserId);
        const userInfo = await storage.getUser(userId);
        if (userInfo) {
          await storage.createUserNotification({
            userId: otherUserId,
            title: "\u0645\u062D\u0627\u062F\u062B\u0629 \u062C\u062F\u064A\u062F\u0629",
            body: `\u0628\u062F\u0623 ${userInfo.fullName} \u0645\u062D\u0627\u062F\u062B\u0629 \u0645\u0639\u0643`,
            type: "info",
            isRead: false
          });
        }
        if (io && userInfo) {
          io.to(`user-${otherUserId}`).emit("newChatCreated", {
            chat: {
              id: chat.id,
              user1Id: chat.user1Id,
              user2Id: chat.user2Id,
              lastMessageAt: chat.lastMessageAt || (/* @__PURE__ */ new Date()).toISOString(),
              createdAt: chat.createdAt || (/* @__PURE__ */ new Date()).toISOString(),
              otherUser: {
                id: userInfo.id,
                fullName: userInfo.fullName
              },
              unreadCount: 0
            }
          });
        }
      }
      res.status(201).json({
        chat,
        otherUser: {
          id: otherUser.id,
          fullName: otherUser.fullName
        }
      });
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u062E\u0627\u0635\u0629" });
    }
  });
  app2.post("/api/chat/private/messages", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { chatId, content } = req.body;
      if (!chatId || !content) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u062F\u0631\u062F\u0634\u0629 \u0648\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const chatResult = await db.execute(sql12`
        SELECT * FROM private_chats
        WHERE id = ${chatId} AND (user1_id = ${userId} OR user2_id = ${userId})
        LIMIT 1
      `);
      const chat = chatResult.rows[0];
      if (!chat) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u062F\u0631\u062F\u0634\u0629" });
      }
      const message = await storage.createPrivateMessage({
        chatId,
        senderId: userId,
        content,
        isRead: false
      });
      const otherUserId = chat.user1Id === userId ? chat.user2Id : chat.user1Id;
      const sender = await storage.getUser(userId);
      await storage.createUserNotification({
        userId: otherUserId,
        title: "\u0631\u0633\u0627\u0644\u0629 \u062E\u0627\u0635\u0629 \u062C\u062F\u064A\u062F\u0629",
        body: `\u0644\u062F\u064A\u0643 \u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0645\u0646 ${sender?.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645 \u0622\u062E\u0631"}`,
        type: "info",
        isRead: false
      });
      if (sender && io) {
        io.to(`private-${chatId}`).emit("newPrivateMessage", {
          ...message,
          senderName: sender.fullName
        });
      }
      res.status(201).json(message);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u062E\u0627\u0635\u0629" });
    }
  });
  app2.put("/api/chat/private/:chatId/messages/:messageId", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const chatId = parseInt(req.params.chatId);
      const messageId = parseInt(req.params.messageId);
      const { content } = req.body;
      console.log(`\u0645\u062D\u0627\u0648\u0644\u0629 \u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u0627\u0644\u062E\u0627\u0635\u0629 ${chatId} \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
      console.log("\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u062C\u062F\u064A\u062F:", content);
      if (!chatId || isNaN(chatId)) {
        console.log("\u062E\u0637\u0623: \u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D");
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      if (!messageId || isNaN(messageId)) {
        console.log("\u062E\u0637\u0623: \u0645\u0639\u0631\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D");
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      if (!content || typeof content !== "string" || content.trim() === "") {
        console.log("\u062E\u0637\u0623: \u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D");
        return res.status(400).json({ message: "\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0645\u0637\u0644\u0648\u0628" });
      }
      const chatResult = await db.execute(sql12`
        SELECT * FROM private_chats
        WHERE id = ${chatId} AND (user1_id = ${userId} OR user2_id = ${userId})
        LIMIT 1
      `);
      if (!chatResult.rows || chatResult.rows.length === 0) {
        console.log(`\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0644\u064A\u0633 \u0637\u0631\u0641\u0627\u064B \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId} \u0623\u0648 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629`);
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629" });
      }
      console.log(`\u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0627\u0644\u0645\u0639\u0631\u0641 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId}`);
      const messageResult = await db.execute(sql12`
        SELECT * FROM private_messages 
        WHERE id = ${messageId} AND chat_id = ${chatId}
        LIMIT 1
      `);
      console.log("\u0646\u062A\u064A\u062C\u0629 \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", messageResult);
      console.log("\u0639\u062F\u062F \u0627\u0644\u0635\u0641\u0648\u0641 \u0627\u0644\u0645\u0633\u062A\u0631\u062C\u0639\u0629:", messageResult.rows ? messageResult.rows.length : 0);
      if (!messageResult.rows || messageResult.rows.length === 0) {
        console.log(`\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0631\u0633\u0627\u0644\u0629 \u0628\u0627\u0644\u0645\u0639\u0631\u0641 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId}`);
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const message = messageResult.rows[0];
      console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u0631\u0627\u062F \u062A\u0639\u062F\u064A\u0644\u0647\u0627:", message);
      console.log(`\u0645\u0642\u0627\u0631\u0646\u0629 \u0645\u0639\u0631\u0641 \u0645\u0631\u0633\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${message.sender_id} \u0645\u0639 \u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u062D\u0627\u0644\u064A ${userId}`);
      if (message.sender_id !== userId) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0644\u064A\u0633 \u0645\u0627\u0644\u0643 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId}`);
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u062A\u0639\u062F\u064A\u0644 \u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0622\u062E\u0631\u064A\u0646" });
      }
      const FIVE_MINUTES = 5 * 60 * 1e3;
      const now = /* @__PURE__ */ new Date();
      const sentTime = new Date(message.created_at);
      const timeElapsed = now.getTime() - sentTime.getTime();
      console.log(`\u0627\u0644\u0648\u0642\u062A \u0627\u0644\u0645\u0646\u0642\u0636\u064A \u0645\u0646\u0630 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629: ${timeElapsed}ms \u0645\u0646 \u0623\u0635\u0644 ${FIVE_MINUTES}ms \u0645\u0633\u0645\u0648\u062D \u0628\u0647`);
      if (timeElapsed > FIVE_MINUTES) {
        console.log(`\u062E\u0637\u0623: \u0627\u0646\u062A\u0647\u0649 \u0648\u0642\u062A \u0627\u0644\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0645\u0633\u0645\u0648\u062D \u0628\u0647 (${FIVE_MINUTES}ms)`);
        return res.status(400).json({ message: "\u0627\u0646\u062A\u0647\u0649 \u0648\u0642\u062A \u0627\u0644\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0645\u0633\u0645\u0648\u062D \u0628\u0647 (5 \u062F\u0642\u0627\u0626\u0642)" });
      }
      console.log("\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0627\u062A \u0648\u0627\u0644\u0648\u0642\u062A \u0627\u0643\u062A\u0645\u0644 \u0628\u0646\u062C\u0627\u062D");
      console.log(`\u062A\u062D\u062F\u064A\u062B \u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0625\u0644\u0649: "${content.trim()}"`);
      try {
        const updateResult = await db.execute(sql12`
          UPDATE private_messages 
          SET content = ${content.trim()}, edited_at = NOW(), is_edited = TRUE
          WHERE id = ${messageId} AND sender_id = ${userId}
          RETURNING *
        `);
        console.log("\u0646\u062A\u064A\u062C\u0629 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", updateResult);
        if (updateResult.rows && updateResult.rows.length > 0) {
          console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629 \u0645\u0646 \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u062A\u062D\u062F\u064A\u062B:", updateResult.rows[0]);
        } else {
          console.log("\u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u062A\u062D\u062F\u064A\u062B \u0644\u0645 \u064A\u064F\u0631\u062C\u0639 \u0623\u064A \u0635\u0641\u0648\u0641");
        }
      } catch (updateError) {
        console.error("\u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", updateError);
        return res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
      }
      const updatedMessageResult = await db.execute(sql12`
        SELECT * FROM private_messages 
        WHERE id = ${messageId}
        LIMIT 1
      `);
      console.log("\u0646\u062A\u064A\u062C\u0629 \u0627\u0633\u062A\u0639\u0644\u0627\u0645 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629:", updatedMessageResult);
      if (!updatedMessageResult.rows || updatedMessageResult.rows.length === 0) {
        console.log(`\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629 \u0628\u0627\u0644\u0645\u0639\u0631\u0641 ${messageId}`);
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0627\u0633\u062A\u0631\u062C\u0627\u0639 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629" });
      }
      const messageData = updatedMessageResult.rows[0];
      console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0639\u062F \u0627\u0644\u062A\u062D\u062F\u064A\u062B:", messageData);
      const user = await storage.getUser(userId);
      const fullMessage = {
        id: messageData.id,
        chatId: messageData.chat_id,
        senderId: messageData.sender_id,
        content: messageData.content,
        isRead: messageData.is_read,
        createdAt: messageData.created_at,
        editedAt: messageData.edited_at,
        isEdited: messageData.is_edited,
        senderName: user ? user.fullName : "\u0645\u0633\u062A\u062E\u062F\u0645"
      };
      console.log("\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0645\u0644\u0629 \u0627\u0644\u0645\u064F\u0639\u062F\u0651\u0629 \u0644\u0644\u0625\u0631\u0633\u0627\u0644:", JSON.stringify(fullMessage));
      const roomName = `private-${chatId}`;
      if (io) {
        io.to(roomName).emit("updatedPrivateMessage", fullMessage);
        console.log(`\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062B\u0629 \u0625\u0644\u0649 \u0627\u0644\u063A\u0631\u0641\u0629 ${roomName}`);
      } else {
        console.error("\u062E\u0637\u0623: WebSocket \u063A\u064A\u0631 \u0645\u062A\u0627\u062D");
      }
      res.json(fullMessage);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0639\u062F\u064A\u0644 \u0631\u0633\u0627\u0644\u0629 \u062E\u0627\u0635\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
    }
  });
  app2.post("/api/chat/private/:chatId/read", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const chatId = parseInt(req.params.chatId);
      const chatResult = await db.execute(sql12`
        SELECT * FROM private_chats
        WHERE id = ${chatId} AND (user1_id = ${userId} OR user2_id = ${userId})
        LIMIT 1
      `);
      const chat = chatResult.rows[0];
      if (!chat) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u062F\u0631\u062F\u0634\u0629" });
      }
      await storage.markMessagesAsRead(chatId, userId);
      res.json({ success: true });
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0639\u0644\u064A\u0645 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0643\u0645\u0642\u0631\u0648\u0621\u0629" });
    }
  });
  app2.get("/api/search/users", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const query = req.query.query;
      if (!query || query.length < 2) {
        return res.status(200).json([]);
      }
      const users3 = await db.execute(sql12`
        SELECT id, full_name as "fullName"
        FROM users
        WHERE id != ${userId} 
        AND (full_name ILIKE ${"%" + query + "%"} OR email ILIKE ${"%" + query + "%"})
        LIMIT 10
      `);
      res.json(users3.rows);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646" });
    }
  });
  app2.get("/api/users/available", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const users3 = await db.execute(sql12`
        SELECT id, full_name as "fullName", type, verified
        FROM users
        WHERE id != ${userId} AND active = true
        ORDER BY full_name ASC
        LIMIT 20
      `);
      res.json(users3.rows);
    } catch (error) {
      res.status(500).json({ message: error.message || "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646" });
    }
  });
  app2.delete("/api/chat/messages/:messageId", authMiddleware, async (req, res) => {
    const { messageId } = req.params;
    const userId = req.user.id;
    const userType = req.user.type;
    console.log(`\u0645\u062D\u0627\u0648\u0644\u0629 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} (\u0627\u0644\u0646\u0648\u0639: ${userType})`);
    try {
      const messageResult = await db.execute(sql12`
        SELECT * FROM chat_messages 
        WHERE id = ${parseInt(messageId)} 
        LIMIT 1
      `);
      if (messageResult.rows.length === 0) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629`);
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const message = messageResult.rows[0];
      console.log("\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", message);
      if (message.sender_id !== userId && userType !== "admin") {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0647 \u0628\u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId}`);
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0630\u0641 \u0647\u0630\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
      }
      const updateResult = await db.execute(sql12`
        UPDATE chat_messages 
        SET is_deleted = true, 
            deleted_by = ${userId}, 
            deleted_at = NOW() 
        WHERE id = ${parseInt(messageId)} 
        RETURNING *
      `);
      const deletedMessage = updateResult.rows[0];
      console.log("\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", deletedMessage);
      if (io) {
        io.to(`room-${message.room_id}`).emit("messageDeleted", {
          id: parseInt(messageId),
          roomId: message.room_id,
          deletedBy: userId
        });
      }
      return res.json({
        success: true,
        message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629:", error);
      return res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.delete("/api/chat/groups/:groupId/messages/:messageId", authMiddleware, async (req, res) => {
    const { groupId, messageId } = req.params;
    const userId = req.user.id;
    const userType = req.user.type;
    console.log(`\u0645\u062D\u0627\u0648\u0644\u0629 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
    try {
      const messageResult = await db.execute(sql12`
        SELECT * FROM group_messages 
        WHERE id = ${parseInt(messageId)} 
        AND group_id = ${parseInt(groupId)}
        LIMIT 1
      `);
      if (messageResult.rows.length === 0) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}`);
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const message = messageResult.rows[0];
      const memberResult = await db.execute(sql12`
        SELECT * FROM group_members 
        WHERE group_id = ${parseInt(groupId)} 
        AND user_id = ${userId}
        LIMIT 1
      `);
      const isGroupAdmin = memberResult.rows.length > 0 && memberResult.rows[0].role === "admin";
      const isMessageSender = message.sender_id === userId;
      const isSystemAdmin = userType === "admin";
      if (!isMessageSender && !isGroupAdmin && !isSystemAdmin) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0647 \u0628\u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}`);
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0630\u0641 \u0647\u0630\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629" });
      }
      let deletedForUsers = [];
      if (Array.isArray(message.deleted_for_users)) {
        deletedForUsers = message.deleted_for_users;
      }
      if (!deletedForUsers.includes(userId)) {
        deletedForUsers.push(userId);
      }
      console.log(`\u062A\u062D\u062F\u064A\u062B deleted_for_users \u0644\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId} \u0625\u0644\u0649: [${deletedForUsers.join(", ")}]`);
      const arrayString = deletedForUsers.length > 0 ? `{${deletedForUsers.join(",")}}` : "{}";
      const updateResult = await db.execute(sql12`
        UPDATE group_messages 
        SET deleted_for_users = ${arrayString}::integer[], 
            deleted_at = NOW() 
        WHERE id = ${parseInt(messageId)} 
        RETURNING *
      `);
      if (io) {
        const userSockets = await io.in(`group-${groupId}`).fetchSockets();
        for (const socket of userSockets) {
          if (socket.userId === userId) {
            socket.emit("messageDeletedForUser", {
              messageId: parseInt(messageId),
              groupId: parseInt(groupId),
              deletedBy: userId,
              deletedForUser: userId
            });
            console.log(`\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u062D\u062F\u062B messageDeletedForUser \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 ${groupId}`);
            break;
          }
        }
      }
      return res.json({
        success: true,
        message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629:", error);
      return res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.delete("/api/chat/private/:chatId/messages/:messageId", authMiddleware, async (req, res) => {
    const { chatId, messageId } = req.params;
    const userId = req.user.id;
    const userType = req.user.type;
    console.log(`\u0645\u062D\u0627\u0648\u0644\u0629 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u062E\u0627\u0635\u0629 ${messageId} \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId} \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
    try {
      const messageResult = await db.execute(sql12`
        SELECT * FROM private_messages 
        WHERE id = ${parseInt(messageId)} 
        AND chat_id = ${parseInt(chatId)}
        LIMIT 1
      `);
      if (messageResult.rows.length === 0) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0641\u064A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId}`);
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const message = messageResult.rows[0];
      const chatResult = await db.execute(sql12`
        SELECT * FROM private_chats 
        WHERE id = ${parseInt(chatId)} 
        AND (user1_id = ${userId} OR user2_id = ${userId})
        LIMIT 1
      `);
      if (chatResult.rows.length === 0) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0644\u064A\u0633 \u062C\u0632\u0621\u064B\u0627 \u0645\u0646 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId}`);
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629" });
      }
      const isMessageSender = message.sender_id === userId;
      const isSystemAdmin = userType === "admin";
      const canDelete = isMessageSender || isSystemAdmin;
      if (!canDelete) {
        console.log(`\u062E\u0637\u0623: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0647 \u0628\u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId}. \u0627\u0644\u0633\u0628\u0628: \u064A\u0645\u0643\u0646 \u0644\u0644\u0645\u0631\u0633\u0644 \u0641\u0642\u0637 \u062D\u0630\u0641 \u0631\u0633\u0627\u0626\u0644\u0647`);
        return res.status(403).json({ message: "\u064A\u0645\u0643\u0646 \u0644\u0644\u0645\u0631\u0633\u0644 \u0641\u0642\u0637 \u062D\u0630\u0641 \u0631\u0633\u0627\u0626\u0644\u0647" });
      }
      let updateResult;
      let deletedForUsers = [];
      if (Array.isArray(message.deleted_for_users)) {
        deletedForUsers = message.deleted_for_users;
      }
      if (!deletedForUsers.includes(userId)) {
        deletedForUsers.push(userId);
      }
      console.log(`\u062A\u062D\u062F\u064A\u062B deleted_for_users \u0644\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0625\u0644\u0649: [${deletedForUsers.join(", ")}]`);
      const arrayString = deletedForUsers.length > 0 ? `{${deletedForUsers.join(",")}}` : "{}";
      updateResult = await db.execute(sql12`
        UPDATE private_messages 
        SET deleted_for_users = ${arrayString}::integer[], 
            deleted_at = NOW() 
        WHERE id = ${parseInt(messageId)} 
        RETURNING *
      `);
      const chat = chatResult.rows[0];
      const otherUserId = chat.user1_id === userId ? chat.user2_id : chat.user1_id;
      console.log(`\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0628\u0646\u062C\u0627\u062D \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A`);
      const io2 = req.app.get("io");
      if (io2) {
        console.log(`\u0625\u0631\u0633\u0627\u0644 \u062D\u062F\u062B \u062D\u0630\u0641 \u0641\u0631\u062F\u064A \u0644\u0644\u0631\u0633\u0627\u0644\u0629 ${messageId} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
        const deletionData = {
          messageId: parseInt(messageId),
          chatId: parseInt(chatId),
          deletedBy: userId,
          isGlobalDelete: false,
          // دائماً حذف فردي
          deletedForUser: userId
          // المستخدم الذي حذف الرسالة
        };
        const userSockets = await io2.in(`private-${chatId}`).fetchSockets();
        for (const socket of userSockets) {
          if (socket.userId === userId) {
            socket.emit("messageDeletedForUser", deletionData);
            console.log(`\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u062D\u062F\u062B messageDeletedForUser \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0641\u0642\u0637`);
            break;
          }
        }
      } else {
        console.error("Socket.IO \u063A\u064A\u0631 \u0645\u062A\u0627\u062D \u0644\u0644\u0625\u0631\u0633\u0627\u0644");
      }
      return res.json({
        success: true,
        message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u062E\u0627\u0635\u0629:", error);
      return res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.delete("/api/chat/private/:chatId/clear", authMiddleware, async (req, res) => {
    try {
      const chatId = parseInt(req.params.chatId);
      const userId = req.user.id;
      if (!chatId || isNaN(chatId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      console.log(`\u0628\u062F\u0621 \u062A\u0646\u0638\u064A\u0641 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId}`);
      const messagesResult = await db.execute(sql12`
        SELECT id, deleted_for_users 
        FROM private_messages 
        WHERE chat_id = ${chatId}
      `);
      const messages = messagesResult.rows;
      if (messages.length === 0) {
        return res.status(200).json({ message: "\u0644\u0627 \u062A\u0648\u062C\u062F \u0631\u0633\u0627\u0626\u0644 \u0644\u062D\u0630\u0641\u0647\u0627" });
      }
      for (const message of messages) {
        const currentDeletedUsers = message.deleted_for_users || [];
        if (!currentDeletedUsers.includes(userId)) {
          const updatedDeletedUsers = [...currentDeletedUsers, userId];
          await db.execute(sql12`
            UPDATE private_messages 
            SET deleted_for_users = ${sql12.raw(`ARRAY[${updatedDeletedUsers.join(",")}]::integer[]`)}
            WHERE id = ${message.id}
          `);
        }
      }
      console.log(`\u062A\u0645 \u062A\u0646\u0638\u064A\u0641 ${messages.length} \u0631\u0633\u0627\u0644\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${userId} \u0645\u0646 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId}`);
      return res.status(200).json({
        message: "\u062A\u0645 \u062A\u0646\u0638\u064A\u0641 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u0628\u0646\u062C\u0627\u062D",
        clearedCount: messages.length
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0646\u0638\u064A\u0641 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 \u0627\u0644\u062E\u0627\u0635\u0629:", error);
      return res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0646\u0638\u064A\u0641 \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.post("/api/chat/groups/:groupId/members/:userId/mute", authMiddleware, async (req, res) => {
    try {
      const actorId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const targetUserId = parseInt(req.params.userId);
      const { durationMinutes, reason } = req.body;
      if (!groupId || !targetUserId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0623\u0648 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const actorRole2 = await storage.getUserRoleInGroup(groupId, actorId);
      if (!actorRole2 || !["admin", "owner"].includes(actorRole2)) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0643\u062A\u0645 \u0627\u0644\u0623\u0639\u0636\u0627\u0621" });
      }
      const targetRole = await storage.getUserRoleInGroup(groupId, targetUserId);
      if (!targetRole) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      if (targetRole === "admin" && actorRole2 !== "owner") {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0643\u062A\u0645 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064A\u0646" });
      }
      if (targetRole === "owner") {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0643\u062A\u0645 \u0645\u0627\u0644\u0643 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      const mutedUntil = durationMinutes ? new Date(Date.now() + durationMinutes * 60 * 1e3) : null;
      const success = await storage.setMemberMuteUntil(groupId, targetUserId, mutedUntil);
      if (!success) {
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u0643\u062A\u0645 \u0627\u0644\u0639\u0636\u0648" });
      }
      const io2 = req.app.get("io");
      if (io2) {
        io2.to(`group-${groupId}`).emit("memberMuted", {
          groupId,
          userId: targetUserId,
          mutedBy: actorId,
          mutedUntil,
          reason
        });
      }
      res.json({
        success: true,
        message: "\u062A\u0645 \u0643\u062A\u0645 \u0627\u0644\u0639\u0636\u0648 \u0628\u0646\u062C\u0627\u062D",
        mutedUntil
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0643\u062A\u0645 \u0627\u0644\u0639\u0636\u0648:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/chat/groups/:groupId/members/:userId/unmute", authMiddleware, async (req, res) => {
    try {
      const actorId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const targetUserId = parseInt(req.params.userId);
      if (!groupId || !targetUserId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0623\u0648 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const actorRole2 = await storage.getUserRoleInGroup(groupId, actorId);
      if (!actorRole2 || !["admin", "owner"].includes(actorRole2)) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0644\u063A\u0627\u0621 \u0643\u062A\u0645 \u0627\u0644\u0623\u0639\u0636\u0627\u0621" });
      }
      const targetMember = await storage.getGroupMember(groupId, targetUserId);
      if (!targetMember) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      const success = await storage.setMemberMuteUntil(groupId, targetUserId, null);
      if (!success) {
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0643\u062A\u0645 \u0627\u0644\u0639\u0636\u0648" });
      }
      const io2 = req.app.get("io");
      if (io2) {
        io2.to(`group-${groupId}`).emit("memberUnmuted", {
          groupId,
          userId: targetUserId,
          unmutedBy: actorId
        });
      }
      res.json({
        success: true,
        message: "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0643\u062A\u0645 \u0627\u0644\u0639\u0636\u0648 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0643\u062A\u0645 \u0627\u0644\u0639\u0636\u0648:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/chat/groups/:groupId/members/:userId/ban", authMiddleware, async (req, res) => {
    try {
      const actorId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const targetUserId = parseInt(req.params.userId);
      const { reason } = req.body;
      if (!groupId || !targetUserId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0623\u0648 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const actorRole2 = await storage.getUserRoleInGroup(groupId, actorId);
      if (!actorRole2 || !["admin", "owner"].includes(actorRole2)) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0638\u0631 \u0627\u0644\u0623\u0639\u0636\u0627\u0621" });
      }
      const targetRole = await storage.getUserRoleInGroup(groupId, targetUserId);
      if (!targetRole) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      if (targetRole === "admin" && actorRole2 !== "owner") {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062D\u0638\u0631 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064A\u0646" });
      }
      if (targetRole === "owner") {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062D\u0638\u0631 \u0645\u0627\u0644\u0643 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      const success = await storage.banGroupMember(groupId, targetUserId, actorId, reason);
      if (!success) {
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u062D\u0638\u0631 \u0627\u0644\u0639\u0636\u0648" });
      }
      const io2 = req.app.get("io");
      if (io2) {
        io2.to(`group-${groupId}`).emit("memberBanned", {
          groupId,
          userId: targetUserId,
          bannedBy: actorId,
          reason
        });
      }
      res.json({
        success: true,
        message: "\u062A\u0645 \u062D\u0638\u0631 \u0627\u0644\u0639\u0636\u0648 \u0628\u0646\u062C\u0627\u062D",
        reason
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0638\u0631 \u0627\u0644\u0639\u0636\u0648:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/chat/groups/:groupId/members/:userId/unban", authMiddleware, async (req, res) => {
    try {
      const actorId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const targetUserId = parseInt(req.params.userId);
      if (!groupId || !targetUserId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0623\u0648 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const actorRole2 = await storage.getUserRoleInGroup(groupId, actorId);
      if (!actorRole2 || !["admin", "owner"].includes(actorRole2)) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0644\u063A\u0627\u0621 \u062D\u0638\u0631 \u0627\u0644\u0623\u0639\u0636\u0627\u0621" });
      }
      const success = await storage.unbanGroupMember(groupId, targetUserId);
      if (!success) {
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u062D\u0638\u0631 \u0627\u0644\u0639\u0636\u0648" });
      }
      const io2 = req.app.get("io");
      if (io2) {
        io2.to(`group-${groupId}`).emit("memberUnbanned", {
          groupId,
          userId: targetUserId,
          unbannedBy: actorId
        });
      }
      res.json({
        success: true,
        message: "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u062D\u0638\u0631 \u0627\u0644\u0639\u0636\u0648 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u062D\u0638\u0631 \u0627\u0644\u0639\u0636\u0648:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.delete("/api/chat/groups/:groupId/members/:userId", authMiddleware, async (req, res) => {
    try {
      const actorId = req.user.id;
      const groupId = parseInt(req.params.groupId);
      const targetUserId = parseInt(req.params.userId);
      if (!groupId || !targetUserId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629 \u0623\u0648 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const isSelfRemoval = actorId === targetUserId;
      if (!isSelfRemoval) {
        const actorRole2 = await storage.getUserRoleInGroup(groupId, actorId);
        if (!actorRole2 || !["admin", "owner"].includes(actorRole2)) {
          return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0630\u0641 \u0627\u0644\u0623\u0639\u0636\u0627\u0621" });
        }
      }
      const targetRole = await storage.getUserRoleInGroup(groupId, targetUserId);
      if (!targetRole) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0641\u064A \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      if (targetRole === "admin" && actorRole !== "owner") {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062D\u0630\u0641 \u0627\u0644\u0645\u0633\u0624\u0648\u0644\u064A\u0646" });
      }
      if (targetRole === "owner") {
        return res.status(403).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062D\u0630\u0641 \u0645\u0627\u0644\u0643 \u0627\u0644\u0645\u062C\u0645\u0648\u0639\u0629" });
      }
      const success = await storage.removeGroupMember(groupId, targetUserId);
      if (!success) {
        return res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0639\u0636\u0648" });
      }
      const io2 = req.app.get("io");
      if (io2) {
        const sockets = await io2.in(`group-${groupId}`).fetchSockets();
        for (const socket of sockets) {
          if (socket.data?.userId === targetUserId) {
            await socket.leave(`group-${groupId}`);
            socket.emit("removedFromGroup", { groupId, removedBy: actorId });
          }
        }
        io2.to(`group-${groupId}`).emit("memberRemoved", {
          groupId,
          userId: targetUserId,
          removedBy: actorId
        });
      }
      res.json({
        success: true,
        message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0639\u0636\u0648 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0639\u0636\u0648:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/api/agent/commissions", authMiddleware, async (req, res) => {
    try {
      const user = await storage.getUser(req.user.id);
      if (!user || user.type !== "agent") {
        return res.status(403).json({ message: "\u0645\u0633\u0645\u0648\u062D \u0644\u0644\u0648\u0643\u0644\u0627\u0621 \u0641\u0642\u0637" });
      }
      const commissions = await storage.getAgentCommissions(user.id);
      res.json(commissions);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0648\u0643\u064A\u0644:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/agent/commissions", authMiddleware, async (req, res) => {
    try {
      const user = await storage.getUser(req.user.id);
      if (!user || user.type !== "agent") {
        return res.status(403).json({ message: "\u0645\u0633\u0645\u0648\u062D \u0644\u0644\u0648\u0643\u0644\u0627\u0621 \u0641\u0642\u0637" });
      }
      const { currencyCode, type, value } = req.body;
      if (!currencyCode || !type || !value) {
        return res.status(400).json({ message: "\u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      if (!["percentage", "fixed"].includes(type)) {
        return res.status(400).json({ message: "\u0646\u0648\u0639 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const numValue = parseFloat(value);
      if (isNaN(numValue) || numValue <= 0) {
        return res.status(400).json({ message: "\u0642\u064A\u0645\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B" });
      }
      if (type === "percentage" && numValue > 100) {
        return res.status(400).json({ message: "\u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064A\u0629 \u0644\u0627 \u064A\u0645\u0643\u0646 \u0623\u0646 \u062A\u062A\u062C\u0627\u0648\u0632 100%" });
      }
      const commissionData = {
        agentId: user.id,
        currencyCode,
        type,
        value: value.toString()
      };
      const commission = await storage.createOrUpdateAgentCommission(commissionData);
      res.json(commission);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0641\u0638 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0648\u0643\u064A\u0644:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.delete("/api/agent/commissions/:id", authMiddleware, async (req, res) => {
    try {
      const user = await storage.getUser(req.user.id);
      if (!user || user.type !== "agent") {
        return res.status(403).json({ message: "\u0645\u0633\u0645\u0648\u062D \u0644\u0644\u0648\u0643\u0644\u0627\u0621 \u0641\u0642\u0637" });
      }
      const commissionId = parseInt(req.params.id);
      if (isNaN(commissionId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      await storage.deleteAgentCommission(commissionId);
      res.json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0648\u0643\u064A\u0644:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/api/agent/commission-stats", authMiddleware, async (req, res) => {
    try {
      const user = await storage.getUser(req.user.id);
      if (!user || user.type !== "agent" && user.type !== "admin") {
        return res.status(403).json({ message: "\u0645\u0633\u0645\u0648\u062D \u0644\u0644\u0648\u0643\u0644\u0627\u0621 \u0648\u0627\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      const allCommissions = await storage.getAllAgentCommissions();
      if (allCommissions.length === 0) {
        return res.json({
          highest: null,
          lowest: null,
          total: 0
        });
      }
      const commissionValues = allCommissions.map((commission) => {
        const value = parseFloat(commission.value);
        return {
          ...commission,
          numericValue: value
        };
      });
      const highest = commissionValues.reduce(
        (max, current) => current.numericValue > max.numericValue ? current : max
      );
      const lowest = commissionValues.reduce(
        (min, current) => current.numericValue < min.numericValue ? current : min
      );
      res.json({
        highest: {
          currencyCode: highest.currencyCode,
          type: highest.type,
          value: highest.value,
          numericValue: highest.numericValue,
          agentName: highest.agentName || `\u0627\u0644\u0648\u0643\u064A\u0644 #${highest.agentId}`
        },
        lowest: {
          currencyCode: lowest.currencyCode,
          type: lowest.type,
          value: lowest.value,
          numericValue: lowest.numericValue,
          agentName: lowest.agentName || `\u0627\u0644\u0648\u0643\u064A\u0644 #${lowest.agentId}`
        },
        total: allCommissions.length
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0639\u0645\u0648\u0644\u0627\u062A \u062C\u0645\u064A\u0639 \u0627\u0644\u0645\u0643\u0627\u062A\u0628:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/api/commission-rates", authMiddleware, async (req, res) => {
    try {
      const rates = await storage.getSystemCommissionRates();
      const activeRates = rates.filter((rate) => rate.isActive).map((rate) => ({
        id: rate.id,
        transferType: rate.transferType,
        currency: rate.currency,
        commissionRate: rate.commissionRate,
        perMilleRate: rate.perMilleRate,
        fixedAmount: rate.fixedAmount,
        isActive: rate.isActive
      }));
      res.json(activeRates);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/admin/system-commission-rates", authMiddleware, async (req, res) => {
    try {
      console.log("\u{1F50D} \u0637\u0644\u0628 \u062C\u0644\u0628 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", req.user.id, "\u0646\u0648\u0639 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", req.user.type);
      if (req.user.type !== "admin") {
        console.log("\u274C \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0644\u064A\u0633 \u0645\u062F\u064A\u0631:", req.user.type);
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      console.log("\u23F3 \u062C\u0644\u0628 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A...");
      const rates = await storage.getSystemCommissionRates();
      console.log("\u{1F4CA} \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u062C\u0644\u0628\u0629:", rates);
      console.log("\u{1F4DD} \u0639\u062F\u062F \u0627\u0644\u0646\u0633\u0628:", rates.length);
      res.json(rates);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.post("/api/admin/system-commission-rates", authMiddleware, async (req, res) => {
    try {
      console.log("\u{1F525} \u0628\u062F\u0621 \u0637\u0644\u0628 \u0625\u0636\u0627\u0641\u0629 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u062C\u062F\u064A\u062F\u0629");
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0636\u0627\u0641\u0629 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
      }
      const { transferType, currency, commissionRate, perMilleRate, fixedAmount } = req.body.data || req.body;
      console.log("\u{1F4E5} \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u0644\u0645\u0629:", { transferType, currency, commissionRate, perMilleRate, fixedAmount });
      if (!transferType || !currency || !commissionRate && !perMilleRate && !fixedAmount) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u062A\u062D\u062F\u064A\u062F \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0623\u0648 \u0646\u0633\u0628\u0629 \u0641\u064A \u0627\u0644\u0623\u0644\u0641 \u0623\u0648 \u0645\u0628\u0644\u063A \u062B\u0627\u0628\u062A" });
      }
      if (commissionRate && commissionRate !== "") {
        const rate = parseFloat(commissionRate);
        if (isNaN(rate) || rate < 0 || rate > 100) {
          return res.status(400).json({ message: "\u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0628\u064A\u0646 0 \u0648 100" });
        }
      }
      if (perMilleRate && perMilleRate !== "") {
        const rate = parseFloat(perMilleRate);
        if (isNaN(rate) || rate < 0 || rate > 1e3) {
          return res.status(400).json({ message: "\u0646\u0633\u0628\u0629 \u0641\u064A \u0627\u0644\u0623\u0644\u0641 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0628\u064A\u0646 0 \u0648 1000" });
        }
      }
      if (fixedAmount && fixedAmount !== "") {
        const amount = parseFloat(fixedAmount);
        if (isNaN(amount) || amount < 0) {
          return res.status(400).json({ message: "\u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u062B\u0627\u0628\u062A \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B" });
        }
      }
      const existingRate = await storage.getSystemCommissionRate(transferType, currency);
      if (existingRate) {
        console.log("\u0646\u0633\u0628\u0629 \u0645\u0648\u062C\u0648\u062F\u0629 \u0628\u0627\u0644\u0641\u0639\u0644:", existingRate);
        const typeLabel = transferType === "internal" ? "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0627\u062E\u0644\u064A" : transferType === "city" ? "\u0627\u0644\u062D\u0648\u0627\u0644\u0627\u062A \u0628\u064A\u0646 \u0627\u0644\u0645\u062F\u0646" : "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628";
        return res.status(400).json({
          message: `\u064A\u0648\u062C\u062F \u0628\u0627\u0644\u0641\u0639\u0644 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 ${(parseFloat(existingRate.commissionRate) * 100).toFixed(2)}% \u0644\u0640 ${typeLabel} \u0628\u0639\u0645\u0644\u0629 ${currency}`
        });
      }
      const processedData = {
        transferType,
        currency,
        commissionRate: commissionRate ? (parseFloat(commissionRate) / 100).toString() : "0",
        perMilleRate: perMilleRate ? perMilleRate : null,
        // لا نقسم على 1000 هنا لأن الواجهة الأمامية تقسم بالفعل
        fixedAmount: fixedAmount ? parseFloat(fixedAmount).toString() : null,
        isActive: true
      };
      console.log("\u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u064F\u0639\u0627\u0644\u062C\u0629 \u0644\u0644\u062D\u0641\u0638:", processedData);
      const newRate = await storage.createSystemCommissionRate(processedData);
      const formattedRate = {
        ...newRate,
        commissionRate: newRate.commissionRate,
        perMilleRate: newRate.perMilleRate
      };
      console.log("\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0646\u0633\u0628\u0629:", formattedRate);
      res.status(201).json(formattedRate);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.put("/api/admin/system-commission-rates/:id", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062A\u062D\u062F\u064A\u062B \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
      }
      const { id } = req.params;
      const { transferType, currency, commissionRate, perMilleRate, fixedAmount } = req.body.data || req.body;
      if (!transferType || !currency || !commissionRate && !perMilleRate && !fixedAmount) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u062A\u062D\u062F\u064A\u062F \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0623\u0648 \u0646\u0633\u0628\u0629 \u0641\u064A \u0627\u0644\u0623\u0644\u0641 \u0623\u0648 \u0645\u0628\u0644\u063A \u062B\u0627\u0628\u062A" });
      }
      if (commissionRate && commissionRate !== "") {
        const rate = parseFloat(commissionRate);
        if (isNaN(rate) || rate < 0 || rate > 100) {
          return res.status(400).json({ message: "\u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0628\u064A\u0646 0 \u0648 100" });
        }
      }
      if (perMilleRate && perMilleRate !== "") {
        const rate = parseFloat(perMilleRate);
        if (isNaN(rate) || rate < 0 || rate > 1e3) {
          return res.status(400).json({ message: "\u0646\u0633\u0628\u0629 \u0641\u064A \u0627\u0644\u0623\u0644\u0641 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0628\u064A\u0646 0 \u0648 1000" });
        }
      }
      if (fixedAmount && fixedAmount !== "") {
        const amount = parseFloat(fixedAmount);
        if (isNaN(amount) || amount < 0) {
          return res.status(400).json({ message: "\u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u062B\u0627\u0628\u062A \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B" });
        }
      }
      const updatedRate = await storage.updateSystemCommissionRate(parseInt(id), {
        transferType,
        currency,
        commissionRate: commissionRate ? (parseFloat(commissionRate) / 100).toString() : "0",
        perMilleRate: perMilleRate ? perMilleRate : null,
        // لا نقسم على 1000 هنا لأن الواجهة الأمامية تقسم بالفعل
        fixedAmount: fixedAmount ? parseFloat(fixedAmount).toString() : null
      });
      if (!updatedRate) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const formattedRate = {
        ...updatedRate,
        commissionRate: updatedRate.commissionRate || "0",
        perMilleRate: updatedRate.perMilleRate || null
      };
      res.json(formattedRate);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.delete("/api/admin/system-commission-rates/:id", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0630\u0641 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
      }
      const { id } = req.params;
      await storage.deleteSystemCommissionRate(parseInt(id));
      res.json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/commission-pool/balance", authMiddleware, async (req, res) => {
    try {
      const user = await storage.getUser(req.user.id);
      if (!user || user.type !== "admin") {
        return res.status(403).json({ message: "\u0645\u0633\u0645\u0648\u062D \u0644\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      const balances3 = await storage.getCommissionPoolBalance();
      res.json(balances3);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0631\u0635\u064A\u062F \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/api/commission-pool/user-transactions", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const userCommissions = await db.select({
        id: commissionPoolTransactions.id,
        amount: commissionPoolTransactions.amount,
        currencyCode: commissionPoolTransactions.currencyCode,
        description: commissionPoolTransactions.description,
        transactionType: commissionPoolTransactions.transactionType,
        createdAt: commissionPoolTransactions.createdAt
      }).from(commissionPoolTransactions).where(eq10(commissionPoolTransactions.sourceId, userId)).orderBy(desc8(commissionPoolTransactions.createdAt)).limit(50);
      res.json(userCommissions);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/api/commission-pool/transactions", authMiddleware, async (req, res) => {
    try {
      const user = await storage.getUser(req.user.id);
      if (!user || user.type !== "admin") {
        return res.status(403).json({ message: "\u0645\u0633\u0645\u0648\u062D \u0644\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      const { currencyCode, sourceType, limit, offset } = req.query;
      const filters = {};
      if (currencyCode && currencyCode !== "all") filters.currencyCode = currencyCode;
      if (sourceType && sourceType !== "all") filters.sourceType = sourceType;
      if (limit) filters.limit = parseInt(limit);
      if (offset) filters.offset = parseInt(offset);
      const transactions2 = await storage.getCommissionPoolTransactions(filters);
      const formattedTransactions = transactions2.map((transaction) => ({
        id: transaction.id,
        sourceType: transaction.sourceType,
        sourceId: transaction.sourceId,
        sourceName: transaction.sourceName,
        currencyCode: transaction.currencyCode,
        amount: transaction.amount,
        transactionType: transaction.transactionType,
        relatedTransactionId: transaction.relatedTransactionId,
        description: transaction.description,
        createdAt: transaction.createdAt
      }));
      res.json(formattedTransactions);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0639\u0627\u0645\u0644\u0627\u062A \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/calculate-receiver-commission", authMiddleware, async (req, res) => {
    try {
      const { receiverOfficeId, amount, currency, senderCity, receiverCity } = req.body;
      console.log(`\u{1F50D} \u0637\u0644\u0628 \u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0645\u0643\u062A\u0628:`, {
        receiverOfficeId,
        amount,
        currency,
        senderCity,
        receiverCity,
        userRequesting: req.user.id
      });
      if (!receiverOfficeId || !amount || !currency) {
        return res.status(400).json({ message: "\u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629 \u0645\u0641\u0642\u0648\u062F\u0629" });
      }
      const applicableTier = await storage.findApplicableCityCommission(
        receiverOfficeId,
        Number(amount),
        currency,
        senderCity,
        receiverCity
      );
      let commission = 0;
      let source = "default";
      if (applicableTier) {
        if (applicableTier.perMilleRate) {
          commission = Number(amount) * (Number(applicableTier.perMilleRate) / 1e3);
          source = "tier_permille";
        } else {
          commission = Number(applicableTier.commission);
          source = "tier_fixed";
        }
      } else {
        console.log(`\u{1F50D} \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0645\u0639\u0631\u0641 \u0627\u0644\u0648\u0643\u064A\u0644 \u0644\u0644\u0645\u0643\u062A\u0628 ${receiverOfficeId}`);
        const office = await db.select().from(agentOffices).where(eq10(agentOffices.id, receiverOfficeId)).limit(1);
        if (!office || office.length === 0) {
          console.log(`\u274C \u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0645\u0643\u062A\u0628 ${receiverOfficeId}`);
          commission = Number(amount) * 0.015;
          source = "default_percentage";
        } else {
          const agentId = office[0].agentId;
          console.log(`\u2705 \u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0627\u0644\u0645\u0643\u062A\u0628 ${receiverOfficeId}\u060C \u0645\u0639\u0631\u0641 \u0627\u0644\u0648\u0643\u064A\u0644: ${agentId}`);
          const receiverCommissionSettings = await storage.getAgentCommissionByCurrency(agentId, currency);
          console.log(`\u{1F50D} \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u0648\u0643\u064A\u0644 ${agentId} \u0628\u0627\u0644\u0639\u0645\u0644\u0629 ${currency}:`, receiverCommissionSettings);
          if (receiverCommissionSettings) {
            if (receiverCommissionSettings.type === "percentage") {
              commission = Number(amount) * (Number(receiverCommissionSettings.value) / 100);
              source = "agent_percentage";
              console.log(`\u2705 \u062A\u0637\u0628\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u0646\u0633\u0628\u064A\u0629: ${receiverCommissionSettings.value}% \u0645\u0646 ${amount} = ${commission} ${currency}`);
            } else if (receiverCommissionSettings.type === "fixed") {
              commission = Number(receiverCommissionSettings.value);
              source = "agent_fixed";
              console.log(`\u2705 \u062A\u0637\u0628\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u062B\u0627\u0628\u062A\u0629: ${commission} ${currency}`);
            } else {
              commission = Number(amount) * 0.015;
              source = "default_percentage";
              console.log(`\u26A0\uFE0F \u0646\u0648\u0639 \u0639\u0645\u0648\u0644\u0629 \u063A\u064A\u0631 \u0645\u062F\u0639\u0648\u0645\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A \u0627\u0644\u0646\u0633\u0628\u064A: ${commission} ${currency} (1.5% \u0645\u0646 ${amount})`);
            }
          } else {
            commission = Number(amount) * 0.015;
            source = "default_percentage";
            console.log(`\u26A0\uFE0F \u0644\u0645 \u062A\u0648\u062C\u062F \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u0648\u0643\u064A\u0644 ${agentId}\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A \u0627\u0644\u0646\u0633\u0628\u064A: ${commission} ${currency} (1.5% \u0645\u0646 ${amount})`);
          }
        }
      }
      res.json({
        commission: commission.toFixed(2),
        source,
        tierInfo: applicableTier ? {
          minAmount: applicableTier.minAmount,
          maxAmount: applicableTier.maxAmount,
          commission: applicableTier.commission
        } : null
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.post("/api/commission-pool/withdraw", authMiddleware, async (req, res) => {
    try {
      const user = await storage.getUser(req.user.id);
      if (!user || user.type !== "admin") {
        return res.status(403).json({ message: "\u0645\u0633\u0645\u0648\u062D \u0644\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      const { currencyCode, amount, description } = req.body;
      if (!currencyCode || !amount || !description) {
        return res.status(400).json({ message: "\u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const withdrawalAmount = parseFloat(amount);
      if (isNaN(withdrawalAmount) || withdrawalAmount <= 0) {
        return res.status(400).json({ message: "\u0645\u0628\u0644\u063A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const withdrawal = await storage.withdrawFromCommissionPool(currencyCode, amount, description);
      const formattedWithdrawal = {
        id: withdrawal.id,
        sourceType: withdrawal.sourceType,
        sourceId: withdrawal.sourceId,
        sourceName: withdrawal.sourceName,
        currencyCode: withdrawal.currencyCode,
        amount: withdrawal.amount,
        transactionType: withdrawal.transactionType,
        relatedTransactionId: withdrawal.relatedTransactionId,
        description: withdrawal.description,
        createdAt: withdrawal.createdAt
      };
      res.json(formattedWithdrawal);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0633\u062D\u0628 \u0645\u0646 \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A:", error);
      res.status(500).json({ message: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/receive-international-transfer", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "agent" && req.user.type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0644\u0644\u0645\u0643\u0627\u062A\u0628 \u0641\u0642\u0637" });
      }
      const { transferCode } = req.body;
      if (!transferCode) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0631\u0645\u0632 \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645" });
      }
      if (transferCode.length < 6) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644 6 \u0623\u0631\u0642\u0627\u0645" });
      }
      let transfer;
      if (req.user.type === "admin") {
        const result = await pool.query(
          "SELECT * FROM international_transfers WHERE transfer_code = $1 AND status = 'pending' LIMIT 1",
          [transferCode]
        );
        transfer = result.rows[0];
      } else if (req.user.type === "agent") {
        if (transferCode.length !== 6 || !/^\d{6}$/.test(transferCode)) {
          return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 6 \u0623\u0631\u0642\u0627\u0645 \u0628\u0627\u0644\u0636\u0628\u0637" });
        }
        const userOffice = await storage.getAgentOfficeByUserId(req.user.id);
        if (!userOffice) {
          return res.status(403).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0645\u0643\u062A\u0628 \u0645\u0631\u062A\u0628\u0637 \u0628\u062D\u0633\u0627\u0628\u0643" });
        }
        const result = await pool.query(
          "SELECT * FROM international_transfers WHERE receiver_code = $1 AND receiving_office_id = $2 AND status = 'pending' LIMIT 1",
          [transferCode, userOffice.id]
        );
        transfer = result.rows[0];
      }
      if (!transfer) {
        if (req.user.type === "admin") {
          return res.status(404).json({ message: "\u062D\u0648\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0628\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0645\u062D\u062F\u062F" });
        } else {
          return res.status(404).json({ message: "\u062D\u0648\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0628\u0631\u0645\u0632 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u0627\u0644\u0645\u062D\u062F\u062F \u0623\u0648 \u063A\u064A\u0631 \u0645\u062E\u0635\u0635\u0629 \u0644\u0645\u0643\u062A\u0628\u0643" });
        }
      }
      const transferAmount = parseFloat(transfer.amount);
      const commissionAmount = 0;
      const netAmount = transferAmount;
      const currentBalance = await storage.getUserBalance(req.user.id, transfer.currency_code);
      const currentBalanceNum = parseFloat(currentBalance || "0");
      const newBalance = currentBalanceNum + netAmount;
      await storage.setUserBalance(req.user.id, transfer.currency_code, newBalance.toString());
      console.log(`\u0625\u0636\u0627\u0641\u0629 \u0644\u0644\u0645\u0633\u062A\u0644\u0645: ${currentBalanceNum} + ${netAmount} = ${newBalance}`);
      const systemCommission = parseFloat(transfer.commission || "0");
      if (systemCommission > 0) {
        await storage.addCommissionPoolTransaction({
          sourceType: "international_transfer",
          sourceId: transfer.id,
          sourceName: `\u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 - ${transfer.sender_name}`,
          currencyCode: transfer.currency_code,
          amount: systemCommission.toString(),
          transactionType: "credit",
          relatedTransactionId: transfer.id,
          description: `\u0639\u0645\u0648\u0644\u0629 \u0646\u0638\u0627\u0645 \u0645\u0646 \u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 \u0645\u0643\u062A\u0645\u0644\u0629 - \u0631\u0645\u0632: ${transferCode}`
        });
        console.log(`\u2705 \u062A\u0645 \u0625\u0636\u0627\u0641\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 ${systemCommission} ${transfer.currency_code} \u0625\u0644\u0649 \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A \u0639\u0646\u062F \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645`);
      }
      await storage.createTransaction({
        userId: req.user.id,
        type: "international_transfer_receive",
        amount: netAmount.toString(),
        currency: transfer.currency_code,
        description: `\u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 \u0645\u0646 ${transfer.sender_name} \u0628\u0631\u0645\u0632: ${transferCode}`
      });
      await pool.query(
        "UPDATE international_transfers SET status = 'completed', completed_at = NOW() WHERE id = $1",
        [transfer.id]
      );
      res.json({
        message: "\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629 \u0628\u0646\u062C\u0627\u062D",
        transfer: {
          id: transfer.id,
          amount: transfer.amount,
          currencyCode: transfer.currency_code,
          senderName: transfer.sender_name,
          receiverName: transfer.receiver_name,
          commissionAmount: "0",
          // لا توجد عمولة في النظام المبسط
          netAmount: netAmount.toString(),
          originCountry: transfer.origin_country
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0645\u062D\u0627\u0648\u0644\u0629 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/admin/countries", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643" });
      }
      const countriesList = await storage.getAllCountries();
      res.json(countriesList);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u062F\u0648\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.post("/api/admin/countries", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643" });
      }
      const { name, code: code2, currency } = req.body;
      if (!name || !code2 || !currency) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0645\u0644\u0621 \u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644" });
      }
      const newCountry = await storage.createCountry({
        name,
        code: code2.toUpperCase(),
        currency: currency.toUpperCase(),
        isActive: true
      });
      res.status(201).json(newCountry);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u062F\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u062F\u0648\u0644\u0629" });
    }
  });
  app2.delete("/api/admin/countries/:id", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643" });
      }
      const { id } = req.params;
      await storage.deleteCountry(parseInt(id));
      res.json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u062F\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u062F\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0627\u0644\u062F\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/countries", async (req, res) => {
    try {
      const countries3 = await storage.getAllCountries();
      console.log("Countries API called, returning:", countries3);
      res.json(countries3);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u062F\u0648\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.get("/api/countries/:countryId/cities", async (req, res) => {
    try {
      const { countryId } = req.params;
      const countries3 = await storage.getCities(parseInt(countryId));
      console.log(`Cities API called for country ${countryId}, returning:`, countries3);
      res.json(countries3);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u062F\u0646:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0645\u062F\u0646" });
    }
  });
  app2.get("/api/countries/international", authMiddleware, async (req, res) => {
    try {
      const currentUserId = req.user.id;
      let isCurrentUserLibyan = false;
      try {
        const libyanCheckResult = await db.execute(sql12`
          SELECT (u.country_id = 1 OR u.country_name = 'ليبيا') AS is_libyan
          FROM users u
          WHERE u.id = ${currentUserId}
        `);
        isCurrentUserLibyan = libyanCheckResult.rows[0]?.is_libyan || false;
        console.log(`\u{1F30D} User ${currentUserId} has LY office: ${isCurrentUserLibyan}`);
        if (isCurrentUserLibyan) {
          console.log(`\u{1F6AB} Libyan user ${currentUserId}: Libya excluded from international transfer countries`);
        }
      } catch (error) {
        console.error("\u{1F6A8} Could not determine user country, applying strict policy - excluding Libya for safety:", error);
        isCurrentUserLibyan = true;
      }
      const whereClause = isCurrentUserLibyan ? sql12`AND u.country_name != 'ليبيا'` : sql12``;
      const result = await db.execute(sql12`
        SELECT DISTINCT 
          u.country_name as name,
          COUNT(ao.id) as office_count
        FROM users u
        INNER JOIN agent_offices ao ON u.id = ao.agent_id
        WHERE ao.is_active = true 
          AND u.ext_transfer_enabled = true
          AND u.country_name IS NOT NULL
          ${whereClause}
        GROUP BY u.country_name
        ORDER BY u.country_name
      `);
      const countries3 = result.rows.map((row) => ({
        name: row.name,
        officeCount: Number(row.office_count)
      }));
      if (isCurrentUserLibyan) {
        console.log(`\u{1F6AB} Libyan user ${currentUserId}: Libya excluded from international transfer countries`);
      }
      res.json(countries3);
    } catch (error) {
      console.error("Error fetching international countries:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.get("/api/inter-office-transfers/quote", authMiddleware, async (req, res) => {
    try {
      const { amount, currency, receiverOfficeId } = req.query;
      const currentUserId = req.user.id;
      if (!amount || !currency || !receiverOfficeId) {
        return res.status(400).json({
          message: "\u064A\u062C\u0628 \u062A\u0642\u062F\u064A\u0645 \u0627\u0644\u0645\u0628\u0644\u063A \u0648\u0627\u0644\u0639\u0645\u0644\u0629 \u0648\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645"
        });
      }
      const transferAmount = parseFloat(amount);
      if (transferAmount <= 0) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0628\u0644\u063A \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0635\u0641\u0631" });
      }
      const receiverOffice = await storage.getAgentOffice(parseInt(receiverOfficeId));
      if (!receiverOffice || !receiverOffice.isActive) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0645\u0633\u062A\u0644\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0623\u0648 \u063A\u064A\u0631 \u0646\u0634\u0637" });
      }
      console.log(`\u{1F4B0} \u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A: ${amount} ${currency} \u0625\u0644\u0649 \u0627\u0644\u0645\u0643\u062A\u0628 ${receiverOffice.officeName}`);
      let systemCommission = 0;
      let commissionType = "default";
      try {
        const systemCommissionRate = await storage.getSystemCommissionRate("international", currency);
        if (systemCommissionRate && systemCommissionRate.isActive) {
          if (systemCommissionRate.fixedAmount && parseFloat(systemCommissionRate.fixedAmount) > 0) {
            systemCommission = parseFloat(systemCommissionRate.fixedAmount);
            commissionType = "fixed";
            console.log(`\u{1F4B0} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062B\u0627\u0628\u062A\u0629: ${systemCommission} ${currency}`);
          } else if (systemCommissionRate.perMilleRate && parseFloat(systemCommissionRate.perMilleRate) > 0) {
            systemCommission = transferAmount * parseFloat(systemCommissionRate.perMilleRate);
            commissionType = "per_mille";
            console.log(`\u{1F4B0} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0641\u064A \u0627\u0644\u0623\u0644\u0641: ${(parseFloat(systemCommissionRate.perMilleRate) * 1e3).toFixed(1)}\u2030`);
          } else if (systemCommissionRate.commissionRate && parseFloat(systemCommissionRate.commissionRate) > 0) {
            systemCommission = transferAmount * parseFloat(systemCommissionRate.commissionRate);
            commissionType = "percentage";
            console.log(`\u{1F4B0} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0626\u0648\u064A\u0629: ${(parseFloat(systemCommissionRate.commissionRate) * 100).toFixed(2)}%`);
          } else {
            systemCommission = transferAmount * 0.015;
            commissionType = "default";
            console.log(`\u{1F4B0} \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629: 1.5%`);
          }
        } else {
          systemCommission = transferAmount * 0.015;
          commissionType = "default";
          console.log(`\u{1F4B0} \u0644\u0627 \u062A\u0648\u062C\u062F \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629: 1.5%`);
        }
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629\u060C \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629:", error);
        systemCommission = transferAmount * 0.015;
        commissionType = "default";
      }
      let receiverCommissionAmount = 0;
      const receiverOfficeIdNum = parseInt(receiverOfficeId);
      const receiverAgentId = receiverOffice.agentId;
      const applicableTier = await storage.findApplicableCityCommission(
        receiverOfficeIdNum,
        transferAmount,
        currency,
        req.user.city,
        receiverOffice.city
      );
      if (applicableTier) {
        receiverCommissionAmount = Number(applicableTier.commission);
        console.log(`\u{1F4B0} \u0639\u0631\u0636 \u0627\u0644\u0623\u0633\u0639\u0627\u0631: \u062A\u0637\u0628\u064A\u0642 \u0639\u0645\u0648\u0644\u0629 \u0634\u0631\u064A\u062D\u0629 ${applicableTier.commission} ${currency} \u0644\u0644\u0645\u0643\u062A\u0628 ${receiverOffice.officeName}`);
      } else {
        const receiverCommissionSettings = await storage.getAgentCommissionByCurrency(receiverAgentId, currency);
        if (receiverCommissionSettings) {
          let rate = 0;
          if (receiverCommissionSettings.type === "percentage") {
            rate = Number(receiverCommissionSettings.value) / 100;
            receiverCommissionAmount = transferAmount * rate;
          } else if (receiverCommissionSettings.type === "fixed") {
            receiverCommissionAmount = Number(receiverCommissionSettings.value);
          }
          console.log(`\u{1F4B0} \u0639\u0631\u0636 \u0627\u0644\u0623\u0633\u0639\u0627\u0631: \u062A\u0637\u0628\u064A\u0642 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0625\u062F\u0627\u0631\u064A\u0629 ${receiverCommissionSettings.type === "percentage" ? rate * 100 + "%" : "\u062B\u0627\u0628\u062A"} = ${receiverCommissionAmount} ${currency} \u0644\u0644\u0645\u0643\u062A\u0628 ${receiverOffice.officeName}`);
        } else {
          const defaultCommissionRate = 0.015;
          receiverCommissionAmount = transferAmount * defaultCommissionRate;
          console.log(`\u{1F4B0} \u0639\u0631\u0636 \u0627\u0644\u0623\u0633\u0639\u0627\u0631: \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629 1.5% = ${receiverCommissionAmount} ${currency} (\u0644\u0627 \u062A\u0648\u062C\u062F \u0634\u0631\u0627\u0626\u062D \u0648\u0644\u0627 \u0625\u0639\u062F\u0627\u062F\u0627\u062A)`);
        }
      }
      const totalAmount = transferAmount + systemCommission + receiverCommissionAmount;
      console.log(`\u{1F4B0} \u0646\u062A\u064A\u062C\u0629 \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629: \u0627\u0644\u0645\u0628\u0644\u063A=${transferAmount}, \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645=${systemCommission.toFixed(6)}, \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628=${receiverCommissionAmount.toFixed(6)}, \u0627\u0644\u0645\u062C\u0645\u0648\u0639=${totalAmount.toFixed(6)} ${currency}`);
      res.json({
        amount: transferAmount,
        systemCommission: parseFloat(systemCommission.toFixed(6)),
        receiverCommission: parseFloat(receiverCommissionAmount.toFixed(6)),
        commission: parseFloat(systemCommission.toFixed(6)),
        // للتوافق مع النظام القديم
        total: parseFloat(totalAmount.toFixed(6)),
        currency,
        commissionType,
        receiverOffice: {
          id: receiverOffice.id,
          name: receiverOffice.officeName,
          agentName: receiverOffice.agentName || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
          city: receiverOffice.city
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0633\u0627\u0628 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/agent-offices", authMiddleware, async (req, res) => {
    try {
      const { country, all } = req.query;
      const currentUserId = req.user.id;
      console.log(`\u2705 User ${currentUserId} (${req.user?.type}) accessing agent offices list`);
      let isCurrentUserLibyan = false;
      try {
        const libyanCheckResult = await db.execute(sql12`
          SELECT (u.country_id = 1 OR u.country_name = 'ليبيا') AS is_libyan
          FROM users u
          WHERE u.id = ${currentUserId}
        `);
        isCurrentUserLibyan = libyanCheckResult.rows[0]?.is_libyan || false;
        console.log(`\u{1F30D} User ${currentUserId} has LY office: ${isCurrentUserLibyan}`);
        if (isCurrentUserLibyan) {
          console.log(`\u{1F6AB} Libyan user ${currentUserId}: LY offices excluded from agent offices list`);
        }
      } catch (error) {
        console.error("\u{1F6A8} Could not determine user country for offices, applying strict policy - excluding Libya for safety:", error);
        isCurrentUserLibyan = true;
      }
      const currentUser = await storage.getUser(currentUserId);
      if (all === "true") {
        const libyanOfficeFilter = isCurrentUserLibyan ? sql12`AND ao.country_code != 'LY'` : sql12``;
        const result = await db.execute(sql12`
          SELECT 
            ao.*,
            u.full_name as agent_name,
            u.ext_transfer_enabled,
            u.ext_daily_limit,
            u.ext_monthly_limit,
            u.country_name as owner_nationality
          FROM agent_offices ao
          INNER JOIN users u ON ao.agent_id = u.id
          WHERE ao.is_active = true 
            AND u.ext_transfer_enabled = true
            AND (u.ext_daily_limit > 0 OR u.ext_monthly_limit > 0)
            AND ao.agent_id != ${currentUserId}
            ${libyanOfficeFilter}
          ORDER BY ao.office_name
        `);
        if (isCurrentUserLibyan) {
          console.log(`\u{1F6AB} Libyan user ${currentUserId}: Libyan offices excluded from all offices list`);
        }
        const formattedAllOffices = result.rows.map((office) => ({
          id: office.id,
          agentId: office.agent_id,
          countryCode: office.country_code,
          city: office.city,
          officeCode: office.office_code,
          officeName: office.office_name,
          contactInfo: office.contact_info,
          address: office.address,
          isActive: office.is_active,
          createdAt: office.created_at,
          commissionRate: office.commission_rate,
          userId: office.user_id,
          agentName: office.agent_name,
          extTransferEnabled: office.ext_transfer_enabled,
          ownerNationality: office.owner_nationality
        }));
        return res.json(formattedAllOffices);
      }
      console.log(`\u{1F30D} Request from user ${currentUserId} for offices in country: ${country}`);
      if (country) {
        if (isCurrentUserLibyan && country === "LY") {
          console.log(`\u{1F6AB} Libyan user ${currentUserId} tried to access Libyan offices - blocked`);
          return res.json([]);
        }
        console.log(`\u{1F50D} Fetching offices with international transfer permission for country: ${country}`);
        const result = await db.execute(sql12`
          SELECT 
            ao.*,
            u.full_name as agent_name,
            u.ext_transfer_enabled,
            u.ext_daily_limit,
            u.ext_monthly_limit,
            u.country_name as owner_nationality
          FROM agent_offices ao
          INNER JOIN users u ON ao.agent_id = u.id
          WHERE u.country_name = ${country}
            AND ao.is_active = true 
            AND u.ext_transfer_enabled = true
            AND (u.ext_daily_limit > 0 OR u.ext_monthly_limit > 0)
            AND ao.agent_id != ${currentUserId}
          ORDER BY ao.office_name
        `);
        const officesWithPermission = result.rows;
        console.log(`\u{1F3AF} Found ${officesWithPermission.length} offices with international transfer permission in ${country}`);
        console.log("\u{1F4CB} Offices details:", officesWithPermission.map((office) => ({
          id: office.id,
          officeName: office.office_name,
          agentName: office.agent_name,
          extTransferEnabled: office.ext_transfer_enabled,
          agentId: office.agent_id,
          currentUserId
        })));
        if (officesWithPermission.length === 0) {
          console.log(`\u26A0\uFE0F No offices found for country ${country}. This might indicate:
          1. No offices exist in this country
          2. All offices are owned by the current user (${currentUserId})
          3. Offices exist but don't have extTransferEnabled=true
          4. Database issues`);
        }
        const formattedOffices = officesWithPermission.map((office) => ({
          id: office.id,
          agentId: office.agent_id,
          countryCode: office.country_code,
          city: office.city,
          officeCode: office.office_code,
          officeName: office.office_name,
          contactInfo: office.contact_info,
          address: office.address,
          isActive: office.is_active,
          createdAt: office.created_at,
          commissionRate: office.commission_rate,
          userId: office.user_id,
          agentName: office.agent_name,
          extTransferEnabled: office.ext_transfer_enabled,
          ownerNationality: office.owner_nationality
        }));
        res.json(formattedOffices);
      } else {
        console.log(`\u{1F310} Fetching all offices with international transfer permission`);
        const libyanOfficeFilter = isCurrentUserLibyan ? sql12`AND ao.country_code != 'LY'` : sql12``;
        const result = await db.execute(sql12`
          SELECT 
            ao.*,
            u.full_name as agent_name,
            u.ext_transfer_enabled,
            u.country_name as owner_nationality
          FROM agent_offices ao
          INNER JOIN users u ON ao.agent_id = u.id
          INNER JOIN upgrade_requests ur ON u.id = ur.user_id
          WHERE ao.is_active = true 
            AND u.ext_transfer_enabled = true
            AND ur.request_type = 'external_transfer'
            AND ur.status = 'approved'
            ${libyanOfficeFilter}
          ORDER BY ao.country_code, ao.office_name
        `);
        const allOfficesWithPermission = result.rows;
        if (isCurrentUserLibyan) {
          console.log(`\u{1F6AB} Libyan user ${currentUserId}: Libyan offices excluded from general offices list`);
        }
        console.log(`\u{1F3AF} Found ${allOfficesWithPermission.length} total offices with international transfer permission`);
        const formattedOffices = allOfficesWithPermission.map((office) => ({
          id: office.id,
          agentId: office.agent_id,
          countryCode: office.country_code,
          city: office.city,
          officeCode: office.office_code,
          officeName: office.office_name,
          contactInfo: office.contact_info,
          address: office.address,
          isActive: office.is_active,
          createdAt: office.created_at,
          commissionRate: office.commission_rate,
          userId: office.user_id,
          agentName: office.agent_name,
          extTransferEnabled: office.ext_transfer_enabled,
          ownerNationality: office.owner_nationality
        }));
        res.json(formattedOffices);
      }
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0648\u0643\u0644\u0627\u0621:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.get("/api/admin/agent-offices", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643" });
      }
      const offices = await storage.getAllAgentOffices();
      res.json(offices);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0648\u0643\u0644\u0627\u0621:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.get("/api/users/exchange-office-users", authMiddleware, async (req, res) => {
    if (req.user.type !== "admin") {
      return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644" });
    }
    try {
      const users3 = await storage.getExchangeOfficeUsers();
      console.log("Exchange office users found:", users3);
      res.json(users3);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0633\u062A\u062E\u062F\u0645\u064A \u0645\u0643\u0627\u062A\u0628 \u0627\u0644\u0635\u0631\u0627\u0641\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646" });
    }
  });
  app2.post("/api/admin/agent-offices", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643" });
      }
      const { agentId, countryCode, city, officeCode, officeName, contactInfo, address } = req.body;
      console.log("Creating office with data:", { agentId, countryCode, city, officeCode, officeName, contactInfo, address });
      if (!agentId || !countryCode || !city || !officeCode || !officeName || !contactInfo || !address) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0645\u0644\u0621 \u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644" });
      }
      const newOffice = await storage.createAgentOffice({
        agentId: parseInt(agentId),
        countryCode: countryCode.toUpperCase(),
        city,
        officeCode: officeCode.toUpperCase(),
        officeName,
        contactInfo,
        address,
        isActive: true
      });
      console.log("Office created successfully:", newOffice);
      res.status(201).json(newOffice);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0645\u0643\u062A\u0628 \u0627\u0644\u0648\u0643\u064A\u0644:", error);
      if (error.code === "23505" && error.constraint === "agent_offices_office_code_key") {
        return res.status(409).json({
          message: "\u0631\u0645\u0632 \u0627\u0644\u0645\u0643\u062A\u0628 \u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0633\u0628\u0642\u0627\u064B. \u064A\u0631\u062C\u0649 \u0627\u0633\u062A\u062E\u062F\u0627\u0645 \u0631\u0645\u0632 \u0645\u062E\u062A\u0644\u0641."
        });
      }
      if (error.code === "23503" && error.constraint === "agent_offices_country_code_fkey") {
        return res.status(400).json({
          message: "\u0627\u0644\u062F\u0648\u0644\u0629 \u0627\u0644\u0645\u062E\u062A\u0627\u0631\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629. \u064A\u0631\u062C\u0649 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u062F\u0648\u0644\u0629 \u0623\u0648\u0644\u0627\u064B \u0645\u0646 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062F\u0648\u0644."
        });
      }
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0645\u0643\u062A\u0628 \u0627\u0644\u0648\u0643\u064A\u0644" });
    }
  });
  app2.delete("/api/admin/agent-offices/:id", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643" });
      }
      const { id } = req.params;
      await storage.deleteAgentOffice(parseInt(id));
      res.json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0645\u0643\u062A\u0628 \u0627\u0644\u0648\u0643\u064A\u0644 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0645\u0643\u062A\u0628 \u0627\u0644\u0648\u0643\u064A\u0644:", error);
      if (error.code === "23503") {
        return res.status(409).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062D\u0630\u0641 \u0647\u0630\u0627 \u0627\u0644\u0645\u0643\u062A\u0628 \u0644\u0623\u0646\u0647 \u0645\u0631\u062A\u0628\u0637 \u0628\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0645\u0648\u062C\u0648\u062F\u0629. \u064A\u0631\u062C\u0649 \u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0623\u0648\u0644\u0627\u064B \u0623\u0648 \u0625\u0644\u063A\u0627\u0621 \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u0645\u0643\u062A\u0628."
        });
      }
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0645\u0643\u062A\u0628 \u0627\u0644\u0648\u0643\u064A\u0644" });
    }
  });
  app2.get("/api/user-receive-settings", authMiddleware, async (req, res) => {
    try {
      const settings = await storage.getUserReceiveSettings(req.user.id);
      const settingsWithCountryInfo = await Promise.all(
        settings.map(async (setting) => {
          const country = await storage.getCountryById(setting.countryId);
          return {
            ...setting,
            countryName: country?.name || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F",
            countryCurrency: country?.currency || ""
          };
        })
      );
      res.json(settingsWithCountryInfo);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0627\u0633\u062A\u0642\u0628\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.post("/api/user-receive-settings", authMiddleware, async (req, res) => {
    try {
      const { countryId, commissionRate } = req.body;
      if (!countryId || commissionRate === void 0) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u062C\u0645\u064A\u0639 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const existingSettings = await storage.getUserReceiveSettingsByCountry(req.user.id, countryId);
      if (existingSettings) {
        return res.status(400).json({ message: "\u0644\u062F\u064A\u0643 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0645\u0633\u0628\u0642\u0629 \u0644\u0647\u0630\u0647 \u0627\u0644\u062F\u0648\u0644\u0629" });
      }
      const newSettings = await storage.createUserReceiveSettings({
        userId: req.user.id,
        countryId,
        commissionRate: commissionRate.toString()
      });
      res.status(201).json(newSettings);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0627\u0633\u062A\u0642\u0628\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.put("/api/user-receive-settings/:id", authMiddleware, async (req, res) => {
    try {
      const settingsId = parseInt(req.params.id);
      const { countryId, commissionRate } = req.body;
      if (!settingsId || !countryId || commissionRate === void 0) {
        return res.status(400).json({ message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u062C\u0645\u064A\u0639 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const updatedSettings = await storage.updateUserReceiveSettings(settingsId, {
        countryId,
        commissionRate: commissionRate.toString()
      });
      res.json(updatedSettings);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0627\u0633\u062A\u0642\u0628\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.delete("/api/user-receive-settings/:id", authMiddleware, async (req, res) => {
    try {
      const settingsId = parseInt(req.params.id);
      if (!settingsId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      await storage.deleteUserReceiveSettings(settingsId);
      res.json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0627\u0633\u062A\u0642\u0628\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.get("/api/users-with-receive-settings", authMiddleware, async (req, res) => {
    try {
      const usersWithSettings = await db.select({
        id: users.id,
        fullName: users.fullName,
        accountNumber: users.accountNumber,
        commissionRate: userReceiveSettings.commissionRate,
        countryId: userReceiveSettings.countryId,
        countryName: countries.name,
        countryCurrency: countries.currency
      }).from(userReceiveSettings).innerJoin(users, eq10(userReceiveSettings.userId, users.id)).innerJoin(countries, eq10(userReceiveSettings.countryId, countries.id)).where(eq10(userReceiveSettings.isActive, true));
      res.json(usersWithSettings);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646 \u0645\u0639 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0627\u0633\u062A\u0642\u0628\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.post("/api/international-transfer/calculate-costs", authMiddleware, async (req, res) => {
    try {
      const { amountOriginal, currencyCode } = req.body;
      if (!amountOriginal || !currencyCode) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0628\u0644\u063A \u0648\u0627\u0644\u0639\u0645\u0644\u0629 \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const amount = parseFloat(amountOriginal);
      if (isNaN(amount) || amount <= 0) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0628\u0644\u063A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const costs = await storage.calculateInternationalTransferCosts(amount, currencyCode);
      res.json({
        amountOriginal: amount,
        ...costs
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0633\u0627\u0628 \u062A\u0643\u0644\u0641\u0629 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0633\u0627\u0628 \u0627\u0644\u062A\u0643\u0644\u0641\u0629" });
    }
  });
  app2.post("/api/international-transfer/create", authMiddleware, async (req, res) => {
    console.log("\u{1F31F} \u0646\u0642\u0637\u0629 \u0627\u0644\u0646\u0647\u0627\u064A\u0629 \u0627\u0644\u0635\u062D\u064A\u062D\u0629! /api/international-transfer/create");
    console.log("\u{1F4DD} \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0637\u0644\u0628:", req.body);
    try {
      const user = req.user;
      const { receiverOfficeId, currencyCode, amountOriginal, note } = req.body;
      if (!receiverOfficeId || !currencyCode || !amountOriginal) {
        return res.status(400).json({ message: "\u062C\u0645\u064A\u0639 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const amount = parseFloat(amountOriginal);
      if (isNaN(amount) || amount <= 0) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0628\u0644\u063A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      console.log("International transfer detected, checking external transfer permissions...");
      const limits = await storage.getUserExternalTransferLimits(user.id);
      if (!limits || !limits.extTransferEnabled) {
        return res.status(403).json({
          message: "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u063A\u064A\u0631 \u0645\u0641\u0639\u0644 \u0644\u062D\u0633\u0627\u0628\u0643. \u064A\u0631\u062C\u0649 \u062A\u0642\u062F\u064A\u0645 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629 \u0645\u0646 \u0644\u0648\u062D\u0629 \u0627\u0644\u0637\u0644\u0628\u0627\u062A.",
          code: "EXTERNAL_TRANSFER_DISABLED"
        });
      }
      if (limits.extAllowedCurrencies && !limits.extAllowedCurrencies.includes(currencyCode)) {
        return res.status(403).json({
          message: `\u0627\u0644\u0639\u0645\u0644\u0629 ${currencyCode} \u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D\u0629 \u0644\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A`,
          allowedCurrencies: limits.extAllowedCurrencies
        });
      }
      const dailyUsed = await storage.getUserDailyTransferAmount(user.id, currencyCode);
      const dailyLimit = parseFloat(limits.extDailyLimit || "0");
      console.log(`\u{1F4B0} \u062A\u062D\u0642\u0642 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${dailyUsed.toFixed(2)} + \u0627\u0644\u062D\u0627\u0644\u064A ${amount} = ${(dailyUsed + amount).toFixed(2)} \u0645\u0646 \u0623\u0635\u0644 ${dailyLimit} ${currencyCode}`);
      if (dailyUsed + amount > dailyLimit) {
        return res.status(403).json({
          message: `\u062A\u062C\u0627\u0648\u0632 \u0627\u0644\u062D\u062F \u0627\u0644\u064A\u0648\u0645\u064A \u0627\u0644\u0645\u0633\u0645\u0648\u062D. 
            
\u{1F4CA} \u0627\u0644\u062A\u0641\u0627\u0635\u064A\u0644:
\u2022 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A \u0627\u0644\u0645\u0633\u0645\u0648\u062D: ${dailyLimit} ${currencyCode}
\u2022 \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u064F\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u064A\u0648\u0645: ${dailyUsed.toFixed(2)} ${currencyCode}
\u2022 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062D\u0627\u0644\u064A: ${amount} ${currencyCode}
\u2022 \u0627\u0644\u0645\u062C\u0645\u0648\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064A: ${(dailyUsed + amount).toFixed(2)} ${currencyCode}

\u{1F4A1} \u0645\u0644\u0627\u062D\u0638\u0629: \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u064A\u0648\u0645\u064A \u0647\u0648 \u0645\u062C\u0645\u0648\u0639 \u0643\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u064A\u0648\u0645\u064A\u0629 \u0648\u0644\u064A\u0633 \u0644\u0643\u0644 \u062A\u062D\u0648\u064A\u0644 \u0645\u0646\u0641\u0631\u062F.`,
          dailyLimit,
          dailyUsed,
          currentTransfer: amount,
          totalWouldBe: dailyUsed + amount
        });
      }
      const monthlyUsed = await storage.getUserMonthlyTransferAmount(user.id, currencyCode);
      const monthlyLimit = parseFloat(limits.extMonthlyLimit || "0");
      console.log(`\u{1F4C5} \u062A\u062D\u0642\u0642 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u0634\u0647\u0631\u064A: \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${monthlyUsed.toFixed(2)} + \u0627\u0644\u062D\u0627\u0644\u064A ${amount} = ${(monthlyUsed + amount).toFixed(2)} \u0645\u0646 \u0623\u0635\u0644 ${monthlyLimit} ${currencyCode}`);
      if (monthlyUsed + amount > monthlyLimit) {
        return res.status(403).json({
          message: `\u062A\u062C\u0627\u0648\u0632 \u0627\u0644\u062D\u062F \u0627\u0644\u0634\u0647\u0631\u064A \u0627\u0644\u0645\u0633\u0645\u0648\u062D. 
            
\u{1F4CA} \u0627\u0644\u062A\u0641\u0627\u0635\u064A\u0644:
\u2022 \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u0634\u0647\u0631\u064A \u0627\u0644\u0645\u0633\u0645\u0648\u062D: ${monthlyLimit} ${currencyCode}
\u2022 \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u064F\u0633\u062A\u062E\u062F\u0645 \u0647\u0630\u0627 \u0627\u0644\u0634\u0647\u0631: ${monthlyUsed.toFixed(2)} ${currencyCode}
\u2022 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062D\u0627\u0644\u064A: ${amount} ${currencyCode}
\u2022 \u0627\u0644\u0645\u062C\u0645\u0648\u0639 \u0627\u0644\u0646\u0647\u0627\u0626\u064A: ${(monthlyUsed + amount).toFixed(2)} ${currencyCode}

\u{1F4A1} \u0645\u0644\u0627\u062D\u0638\u0629: \u0627\u0644\u0633\u0642\u0641 \u0627\u0644\u0634\u0647\u0631\u064A \u0647\u0648 \u0645\u062C\u0645\u0648\u0639 \u0643\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u0634\u0647\u0631\u064A\u0629 \u0648\u0644\u064A\u0633 \u0644\u0643\u0644 \u062A\u062D\u0648\u064A\u0644 \u0645\u0646\u0641\u0631\u062F.`,
          monthlyLimit,
          monthlyUsed,
          currentTransfer: amount,
          totalWouldBe: monthlyUsed + amount
        });
      }
      console.log("External transfer permissions verified successfully for international transfer");
      const userBalance = await storage.getUserBalance(user.id, currencyCode);
      const currentBalance = parseFloat(userBalance?.amount || "0");
      if (currentBalance < amount) {
        return res.status(400).json({ message: "\u0627\u0644\u0631\u0635\u064A\u062F \u063A\u064A\u0631 \u0643\u0627\u0641\u064D" });
      }
      const costs = await storage.calculateInternationalTransferCosts(amount, currencyCode);
      const transferCode = await storage.generateInternationalTransferCode();
      const newTransfer = await storage.createInternationalTransferNew({
        senderAgentId: user.id,
        receiverOfficeId: parseInt(receiverOfficeId),
        currencyCode,
        amountOriginal: amount.toString(),
        commissionSystem: costs.commissionSystem.toString(),
        commissionRecipient: costs.commissionRecipient.toString(),
        amountPending: costs.amountPending.toString(),
        transferCode,
        note: note || null
      });
      const totalAmountToDeduct = amount;
      const newBalance = currentBalance - totalAmountToDeduct;
      await storage.setUserBalance(user.id, currencyCode, newBalance.toString());
      console.log(`\u{1F4B0} \u062A\u0645 \u062A\u0639\u0644\u064A\u0642 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0643\u0627\u0645\u0644\u0629 ${amount} ${currencyCode} (${costs.amountPending} + ${costs.commissionRecipient} + ${costs.commissionSystem}) - \u0645\u0639\u0644\u0642\u0629 \u062D\u062A\u0649 \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645 \u0623\u0648 \u0627\u0644\u0625\u0644\u063A\u0627\u0621`);
      await storage.createTransaction({
        userId: user.id,
        type: "international_transfer_new_out",
        amount: totalAmountToDeduct.toString(),
        currency: currencyCode,
        description: `\u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 \u0645\u0639\u0644\u0642\u0629 - \u0631\u0645\u0632: ${transferCode} (\u0627\u0644\u062D\u0648\u0627\u0644\u0629: ${costs.amountPending}, \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u0644\u0645: ${costs.commissionRecipient}, \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645: ${costs.commissionSystem})`
      });
      try {
        const settings = await rewardsService.getSettings();
        await rewardsService.awardPoints({
          userId: user.id,
          points: settings.internationalTransferPoints,
          action: "international_transfer",
          description: `International transfer: ${amount} ${currencyCode}`,
          descriptionAr: `\u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629: ${amount} ${currencyCode}`,
          referenceId: transferCode,
          referenceType: "international_transfer"
        });
        console.log(`\u2705 \u062A\u0645 \u0645\u0646\u062D ${settings.internationalTransferPoints} \u0646\u0642\u0637\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${user.id} \u0644\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629`);
      } catch (error) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0646\u062D \u0627\u0644\u0646\u0642\u0627\u0637 \u0644\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629:", error);
      }
      res.status(201).json({
        transferCode,
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0627\u0644\u062F\u0648\u0644\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.post("/api/international-transfer/search", authMiddleware, async (req, res) => {
    try {
      const { transferCode } = req.body;
      if (!transferCode) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0645\u0637\u0644\u0648\u0628" });
      }
      const transfer = await storage.getInternationalTransferNewByCode(transferCode);
      if (!transfer) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u062D\u0648\u0627\u0644\u0629 \u0628\u0647\u0630\u0627 \u0627\u0644\u0631\u0645\u0632" });
      }
      if (transfer.status !== "pending") {
        return res.status(400).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645\u0647\u0627 \u0645\u0633\u0628\u0642\u0627\u064B" });
      }
      res.json(transfer);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.post("/api/international-transfer/receive", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const { transferCode } = req.body;
      if (!transferCode) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0645\u0637\u0644\u0648\u0628" });
      }
      const transfer = await storage.getInternationalTransferNewByCode(transferCode);
      if (!transfer) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u062D\u0648\u0627\u0644\u0629 \u0628\u0647\u0630\u0627 \u0627\u0644\u0631\u0645\u0632" });
      }
      if (transfer.status !== "pending") {
        return res.status(400).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645\u0647\u0627 \u0645\u0633\u0628\u0642\u0627\u064B" });
      }
      if (transfer.receiverOfficeId !== user.id) {
        return res.status(403).json({ message: "\u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u0627\u0633\u062A\u0644\u0627\u0645 \u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
      }
      await storage.confirmInternationalTransferNew(transferCode, user.id);
      const receiverBalance = await storage.getUserBalance(user.id, transfer.currencyCode);
      const currentBalance = parseFloat(receiverBalance?.amount || "0");
      const amountForReceiver = parseFloat(transfer.amountPending) + parseFloat(transfer.commissionRecipient);
      const newBalance = currentBalance + amountForReceiver;
      await storage.setUserBalance(user.id, transfer.currencyCode, newBalance.toString());
      const systemCommission = parseFloat(transfer.commissionSystem);
      if (systemCommission > 0) {
        const { allocateFixedReferralReward: allocateFixedReferralReward2 } = await Promise.resolve().then(() => (init_referral_system(), referral_system_exports));
        const operationType = transfer.currencyCode === "LYD" ? "transfer_lyd" : "transfer_usd";
        console.log(`\u{1F381} \u0641\u062D\u0635 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0644\u0644\u0645\u0631\u0633\u0644 ${transfer.senderAgentId} \u0641\u064A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A`);
        const referralResult = await allocateFixedReferralReward2(
          transfer.id,
          operationType,
          systemCommission,
          transfer.currencyCode,
          transfer.senderAgentId
          // المستخدم المُحال هو المرسل
        );
        const netSystemCommission = referralResult.netSystemCommission;
        if (netSystemCommission > 0) {
          await storage.addCommissionPoolTransaction({
            sourceType: "international_transfer",
            sourceId: transfer.id,
            sourceName: `\u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 - \u0631\u0645\u0632: ${transferCode}`,
            currencyCode: transfer.currencyCode,
            amount: netSystemCommission.toString(),
            transactionType: "credit",
            relatedTransactionId: null,
            description: referralResult.hasReferral ? `\u0639\u0645\u0648\u0644\u0629 \u0646\u0638\u0627\u0645 (\u0628\u0639\u062F \u062E\u0635\u0645 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 ${referralResult.rewardAmount}) - \u0631\u0645\u0632: ${transferCode}` : `\u0639\u0645\u0648\u0644\u0629 \u0646\u0638\u0627\u0645 \u0645\u0646 \u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 \u0645\u0624\u0643\u062F\u0629 - \u0631\u0645\u0632: ${transferCode}`
          });
          console.log(`\u2705 \u062A\u0645 \u0625\u0636\u0627\u0641\u0629 \u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 ${netSystemCommission} ${transfer.currencyCode} (\u0623\u0635\u0644\u064A\u0629: ${systemCommission}, \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629: ${referralResult.rewardAmount})`);
        }
      }
      const recipientCommission = parseFloat(transfer.commissionRecipient);
      if (recipientCommission > 0) {
        console.log(`\u{1F4BC} \u0625\u0636\u0627\u0641\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 ${recipientCommission} ${transfer.currencyCode} \u0644\u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0643\u062A\u0628 ${user.id}`);
        await storage.addAgentCommission(
          user.id,
          recipientCommission,
          transfer.currencyCode,
          `\u0639\u0645\u0648\u0644\u0629 \u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 - ${transferCode}`
        );
      }
      await storage.createTransaction({
        userId: user.id,
        type: "international_transfer_new_in",
        amount: amountForReceiver.toString(),
        currency: transfer.currencyCode,
        description: `\u0627\u0633\u062A\u0644\u0627\u0645 \u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 - \u0631\u0645\u0632: ${transferCode} (\u0627\u0644\u062D\u0648\u0627\u0644\u0629: ${transfer.amountPending}, \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0633\u062A\u0644\u0645: ${transfer.commissionRecipient})`
      });
      res.json({
        amountReceived: amountForReceiver,
        currencyCode: transfer.currencyCode,
        message: "\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0633\u062A\u0644\u0627\u0645 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.delete("/api/international-transfer/:transferCode", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const { transferCode } = req.params;
      if (!transferCode) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0645\u0637\u0644\u0648\u0628" });
      }
      const transfer = await storage.getInternationalTransferNewByCode(transferCode);
      if (!transfer) {
        return res.status(404).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u062D\u0648\u0627\u0644\u0629 \u0628\u0647\u0630\u0627 \u0627\u0644\u0631\u0645\u0632" });
      }
      if (transfer.senderAgentId !== user.id && user.type !== "admin") {
        return res.status(403).json({ message: "\u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u0625\u0644\u063A\u0627\u0621 \u0647\u0630\u0647 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
      }
      const result = await storage.cancelInternationalTransferNew(transferCode);
      if (result.success) {
        res.json({
          message: "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D \u0648\u0625\u0631\u062C\u0627\u0639 \u0627\u0644\u0645\u0628\u0644\u063A \u0644\u0644\u0645\u0631\u0633\u0644",
          transferCode,
          refundedAmount: transfer.amountOriginal,
          currency: transfer.currencyCode
        });
      } else {
        res.status(400).json({ message: result.message });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062D\u0648\u0627\u0644\u0629" });
    }
  });
  app2.put("/api/user/profile", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const { fullName, email, phone } = req.body;
      if (!fullName || !email) {
        return res.status(400).json({ message: "\u0627\u0644\u0627\u0633\u0645 \u0648\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({ message: "\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      const existingUser = await storage.getUserByEmail(email);
      if (existingUser && existingUser.id !== user.id) {
        return res.status(400).json({ message: "\u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0646 \u0642\u0628\u0644 \u0645\u0633\u062A\u062E\u062F\u0645 \u0622\u062E\u0631" });
      }
      await storage.updateUserProfile(user.id, {
        fullName,
        email,
        phone: phone || null
      });
      const updatedUser = await storage.getUser(user.id);
      if (updatedUser) {
        const { password, ...userWithoutPassword } = updatedUser;
        res.json(userWithoutPassword);
      } else {
        res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0634\u062E\u0635\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0634\u062E\u0635\u064A" });
    }
  });
  app2.put("/api/user/change-password", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const { currentPassword, newPassword } = req.body;
      if (!currentPassword || !newPassword) {
        return res.status(400).json({ message: "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062D\u0627\u0644\u064A\u0629 \u0648\u0627\u0644\u062C\u062F\u064A\u062F\u0629 \u0645\u0637\u0644\u0648\u0628\u062A\u0627\u0646" });
      }
      if (newPassword.length < 6) {
        return res.status(400).json({ message: "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062C\u062F\u064A\u062F\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 6 \u0623\u062D\u0631\u0641 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644" });
      }
      const userWithPassword = await storage.getUser(user.id);
      if (!userWithPassword) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      let isCurrentPasswordValid = false;
      if (userWithPassword.password.startsWith("$2b$") || userWithPassword.password.startsWith("$2a$")) {
        isCurrentPasswordValid = await bcrypt2.compare(currentPassword, userWithPassword.password);
      } else {
        const { scrypt: scrypt2, timingSafeEqual: timingSafeEqual2 } = await import("crypto");
        const { promisify: promisify2 } = await import("util");
        const scryptAsync2 = promisify2(scrypt2);
        const [hashed, salt] = userWithPassword.password.split(".");
        if (salt && hashed) {
          const hashedBuf = Buffer.from(hashed, "hex");
          const suppliedBuf = await scryptAsync2(currentPassword, salt, 64);
          isCurrentPasswordValid = timingSafeEqual2(hashedBuf, suppliedBuf);
        }
      }
      if (!isCurrentPasswordValid) {
        return res.status(400).json({ message: "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062D\u0627\u0644\u064A\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
      }
      const hashedNewPassword = await bcrypt2.hash(newPassword, 12);
      await db.execute(sql12`
        UPDATE users 
        SET password = ${hashedNewPassword}
        WHERE id = ${user.id}
      `);
      res.json({ message: "\u062A\u0645 \u062A\u063A\u064A\u064A\u0631 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u063A\u064A\u064A\u0631 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u063A\u064A\u064A\u0631 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631" });
    }
  });
  app2.get("/api/2fa/status", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const [user2fa] = await db.select().from(user2FA).where(eq10(user2FA.userId, user.id));
      res.json({
        isEnabled: user2fa?.isEnabled || false,
        hasSecret: !!user2fa?.secret
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u062D\u0627\u0644\u0629 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  app2.post("/api/2fa/setup", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const speakeasy = await import("speakeasy");
      const QRCode3 = await import("qrcode");
      const [existing2fa] = await db.select().from(user2FA).where(eq10(user2FA.userId, user.id));
      if (existing2fa?.isEnabled) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u0645\u0641\u0639\u0644\u0629 \u0628\u0627\u0644\u0641\u0639\u0644" });
      }
      const secret = speakeasy.generateSecret({
        name: user.fullName || user.email,
        issuer: "\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629",
        length: 20
      });
      const backupCodes = [];
      for (let i = 0; i < 10; i++) {
        backupCodes.push(Math.random().toString(36).substring(2, 10).toUpperCase());
      }
      if (existing2fa) {
        await db.update(user2FA).set({
          secret: secret.base32,
          backupCodes,
          updatedAt: /* @__PURE__ */ new Date()
        }).where(eq10(user2FA.userId, user.id));
      } else {
        await db.insert(user2FA).values({
          userId: user.id,
          secret: secret.base32,
          backupCodes,
          isEnabled: false
        });
      }
      const qrCodeUrl = await QRCode3.toDataURL(secret.otpauth_url);
      res.json({
        secret: secret.base32,
        qrCode: qrCodeUrl,
        backupCodes,
        manualEntryKey: secret.base32
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  app2.post("/api/2fa/enable", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const { token } = req.body;
      const speakeasy = await import("speakeasy");
      if (!token || token.length !== 6) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 6 \u0623\u0631\u0642\u0627\u0645" });
      }
      const [user2fa] = await db.select().from(user2FA).where(eq10(user2FA.userId, user.id));
      if (!user2fa?.secret) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u0623\u0648\u0644\u0627\u064B" });
      }
      if (user2fa.isEnabled) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u0645\u0641\u0639\u0644\u0629 \u0628\u0627\u0644\u0641\u0639\u0644" });
      }
      const verified = speakeasy.totp.verify({
        secret: user2fa.secret,
        encoding: "base32",
        token,
        window: 2
      });
      if (!verified) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      await db.update(user2FA).set({
        isEnabled: true,
        lastUsedAt: /* @__PURE__ */ new Date(),
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq10(user2FA.userId, user.id));
      res.json({ message: "\u062A\u0645 \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  app2.post("/api/2fa/disable", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const { currentPassword, token } = req.body;
      const speakeasy = await import("speakeasy");
      if (!currentPassword || !token) {
        return res.status(400).json({ message: "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062D\u0627\u0644\u064A\u0629 \u0648\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const userWithPassword = await storage.getUser(user.id);
      if (!userWithPassword) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      let isCurrentPasswordValid = false;
      if (userWithPassword.password.startsWith("$2b$") || userWithPassword.password.startsWith("$2a$")) {
        isCurrentPasswordValid = await bcrypt2.compare(currentPassword, userWithPassword.password);
      } else {
        const { scrypt: scrypt2, timingSafeEqual: timingSafeEqual2 } = await import("crypto");
        const { promisify: promisify2 } = await import("util");
        const scryptAsync2 = promisify2(scrypt2);
        const [hashed, salt] = userWithPassword.password.split(".");
        if (salt && hashed) {
          const hashedBuf = Buffer.from(hashed, "hex");
          const suppliedBuf = await scryptAsync2(currentPassword, salt, 64);
          isCurrentPasswordValid = timingSafeEqual2(hashedBuf, suppliedBuf);
        }
      }
      if (!isCurrentPasswordValid) {
        return res.status(400).json({ message: "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062D\u0627\u0644\u064A\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
      }
      const [user2fa] = await db.select().from(user2FA).where(eq10(user2FA.userId, user.id));
      if (!user2fa?.isEnabled) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u063A\u064A\u0631 \u0645\u0641\u0639\u0644\u0629" });
      }
      let verified = false;
      if (token.length === 6 && /^\d{6}$/.test(token)) {
        verified = speakeasy.totp.verify({
          secret: user2fa.secret,
          encoding: "base32",
          token,
          window: 2
        });
      }
      if (!verified && user2fa.backupCodes.includes(token.toUpperCase())) {
        verified = true;
        const updatedBackupCodes = user2fa.backupCodes.filter((backupCode) => backupCode !== token.toUpperCase());
        await db.update(user2FA).set({ backupCodes: updatedBackupCodes }).where(eq10(user2FA.userId, user.id));
      }
      if (!verified) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      await db.update(user2FA).set({
        isEnabled: false,
        secret: null,
        backupCodes: [],
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq10(user2FA.userId, user.id));
      res.json({ message: "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  app2.post("/api/auth/2fa-verify-login", async (req, res) => {
    console.log("\u{1F6A8}\u{1F6A8}\u{1F6A8} HANDLER HIT: /api/auth/2fa-verify-login");
    console.log("\u{1F6A8}\u{1F6A8}\u{1F6A8} REQUEST - tempToken \u0645\u0648\u062C\u0648\u062F:", !!req.body.tempToken, "code \u0645\u0648\u062C\u0648\u062F:", !!req.body.code);
    try {
      console.log("\u{1F510} [2FA SERVER DEBUG] \u0628\u062F\u0621 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629");
      console.log("\u{1F510} [2FA SERVER DEBUG] tempToken \u0645\u0648\u062C\u0648\u062F:", !!req.body.tempToken, "code \u0645\u0648\u062C\u0648\u062F:", !!req.body.code);
      const { tempToken, code: code2 } = req.body;
      if (!tempToken || !code2) {
        console.log("\u{1F510} [2FA SERVER DEBUG] \u0628\u064A\u0627\u0646\u0627\u062A \u0646\u0627\u0642\u0635\u0629 - tempToken:", !!tempToken, "code:", !!code2);
        return res.status(400).json({ message: "tempToken \u0648\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const JWT_SECRET3 = getJwtSecret();
      const cleanedToken = String(tempToken || "").replace(/^Bearer\s+/i, "").trim();
      let decodedToken;
      try {
        decodedToken = jwt5.verify(cleanedToken, JWT_SECRET3, { clockTolerance: 30 });
      } catch (error) {
        if (error.name === "TokenExpiredError") {
          return res.status(401).json({ message: "\u0627\u0646\u062A\u0647\u062A \u0635\u0644\u0627\u062D\u064A\u0629 \u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642\u060C \u064A\u0631\u062C\u0649 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649" });
        } else if (error.name === "JsonWebTokenError") {
          return res.status(401).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D\u060C \u064A\u0631\u062C\u0649 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u062F\u062E\u0648\u0644 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649" });
        }
        return res.status(401).json({ message: "tempToken \u063A\u064A\u0631 \u0635\u0627\u0644\u062D \u0623\u0648 \u0645\u0646\u062A\u0647\u064A \u0627\u0644\u0635\u0644\u0627\u062D\u064A\u0629" });
      }
      const userId = decodedToken.userId;
      const speakeasy = await import("speakeasy");
      const [user] = await db.select().from(users).where(eq10(users.id, userId));
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const [user2fa] = await db.select().from(user2FA).where(eq10(user2FA.userId, userId));
      if (!user2fa?.isEnabled) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u063A\u064A\u0631 \u0645\u0641\u0639\u0644\u0629" });
      }
      let verified = false;
      if (code2.length === 6 && /^\d{6}$/.test(code2)) {
        verified = speakeasy.totp.verify({
          secret: user2fa.secret,
          encoding: "base32",
          token: code2,
          window: 2
        });
      }
      if (!verified && user2fa.backupCodes.includes(code2.toUpperCase())) {
        verified = true;
        const updatedBackupCodes = user2fa.backupCodes.filter((backupCode) => backupCode !== code2.toUpperCase());
        await db.update(user2FA).set({
          backupCodes: updatedBackupCodes,
          lastUsedAt: /* @__PURE__ */ new Date()
        }).where(eq10(user2FA.userId, userId));
      } else if (verified) {
        await db.update(user2FA).set({ lastUsedAt: /* @__PURE__ */ new Date() }).where(eq10(user2FA.userId, userId));
      }
      if (!verified) {
        console.log("\u{1F510} [2FA SERVER DEBUG] \u0641\u0634\u0644 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0631\u0645\u0632");
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      console.log("\u{1F510} [2FA SERVER DEBUG] \u0646\u062C\u062D \u0627\u0644\u062A\u062D\u0642\u0642\u060C \u0625\u0646\u0634\u0627\u0621 JWT token");
      const payload = {
        userId: user.id,
        email: user.email,
        type: user.type,
        isActive: user.isActive
      };
      const finalToken = jwt5.sign(payload, JWT_SECRET3, { expiresIn: "7d" });
      const responseData = {
        token: finalToken,
        user: {
          id: user.id,
          accountNumber: user.accountNumber,
          fullName: user.fullName,
          email: user.email,
          type: user.type,
          isActive: user.isActive,
          isVerified: user.isVerified,
          countryName: user.countryName,
          cityName: user.cityName,
          balance: user.balance
        }
      };
      console.log("\u{1F510} [2FA SERVER DEBUG] \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0627\u0633\u062A\u062C\u0627\u0628\u0629 \u0627\u0644\u0646\u0647\u0627\u0626\u064A\u0629:", {
        token: finalToken ? "\u0645\u0648\u062C\u0648\u062F" : "\u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F",
        userId: user.id,
        email: user.email,
        responseSize: JSON.stringify(responseData).length
      });
      console.log("\u{1F6A8} [CRITICAL DEBUG] \u0639\u0646 \u0642\u0628\u0644 \u0625\u0631\u0633\u0627\u0644 res.json - responseData \u0645\u0648\u062C\u0648\u062F:", !!responseData);
      console.log("\u{1F6A8} [CRITICAL DEBUG] token \u0641\u064A responseData:", !!responseData.token);
      res.json(responseData);
      console.log("\u{1F6A8} [CRITICAL DEBUG] \u062A\u0645 \u0625\u0631\u0633\u0627\u0644 res.json \u0628\u0646\u062C\u0627\u062D!");
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  app2.post("/api/2fa/verify", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const { token } = req.body;
      const speakeasy = await import("speakeasy");
      if (!token) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0637\u0644\u0648\u0628" });
      }
      const [user2fa] = await db.select().from(user2FA).where(eq10(user2FA.userId, user.id));
      if (!user2fa?.isEnabled) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629 \u063A\u064A\u0631 \u0645\u0641\u0639\u0644\u0629" });
      }
      let verified = false;
      if (code.length === 6 && /^\d{6}$/.test(code)) {
        verified = speakeasy.totp.verify({
          secret: user2fa.secret,
          encoding: "base32",
          token: code,
          window: 2
        });
      }
      if (!verified && user2fa.backupCodes.includes(code.toUpperCase())) {
        verified = true;
        const updatedBackupCodes = user2fa.backupCodes.filter((backupCode) => backupCode !== code.toUpperCase());
        await db.update(user2FA).set({
          backupCodes: updatedBackupCodes,
          lastUsedAt: /* @__PURE__ */ new Date()
        }).where(eq10(user2FA.userId, user.id));
      } else if (verified) {
        await db.update(user2FA).set({ lastUsedAt: /* @__PURE__ */ new Date() }).where(eq10(user2FA.userId, user.id));
      }
      if (!verified) {
        return res.status(400).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0642\u0642 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      res.json({ message: "\u062A\u0645 \u0627\u0644\u062A\u062D\u0642\u0642 \u0628\u0646\u062C\u0627\u062D", verified: true });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0645\u0635\u0627\u062F\u0642\u0629 \u0627\u0644\u062B\u0646\u0627\u0626\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645" });
    }
  });
  app2.get("/api/inter-office-commissions", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      if (user.type !== "agent" && user.type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0644\u0644\u0648\u0643\u0644\u0627\u0621 \u0648\u0627\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      const myCommissionResult = await db.$client.query(`
        SELECT ac.*, u.full_name as agent_name
        FROM agent_commissions ac
        JOIN users u ON ac.agent_id = u.id
        WHERE ac.agent_id = $1
        LIMIT 1
      `, [user.id]);
      const myCommission = myCommissionResult.rows[0] ? {
        id: myCommissionResult.rows[0].id,
        agentId: myCommissionResult.rows[0].agent_id,
        agentName: myCommissionResult.rows[0].agent_name,
        commission: myCommissionResult.rows[0].value,
        isPercentage: myCommissionResult.rows[0].type === "percentage",
        currency: myCommissionResult.rows[0].currency_code,
        createdAt: myCommissionResult.rows[0].created_at,
        updatedAt: myCommissionResult.rows[0].updated_at
      } : null;
      const otherCommissionsResult = await db.$client.query(`
        SELECT ac.*, u.full_name as agent_name
        FROM agent_commissions ac
        JOIN users u ON ac.agent_id = u.id
        WHERE ac.agent_id != $1 AND u.type = 'agent'
        ORDER BY CAST(ac.value AS DECIMAL) ASC
      `, [user.id]);
      const otherCommissions = otherCommissionsResult.rows.map((row) => ({
        id: row.id,
        agentId: row.agent_id,
        agentName: row.agent_name,
        commission: row.value,
        isPercentage: row.type === "percentage",
        currency: row.currency_code,
        createdAt: row.created_at,
        updatedAt: row.updated_at
      }));
      res.json({
        myCommission,
        otherCommissions
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.post("/api/inter-office-commissions", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      const { rate } = req.body;
      console.log("\u0637\u0644\u0628 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", user.id, "\u0627\u0644\u0646\u0633\u0628\u0629:", rate);
      if (user.type !== "agent" && user.type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u062E\u062F\u0645\u0629 \u0645\u062A\u0627\u062D\u0629 \u0644\u0644\u0648\u0643\u0644\u0627\u0621 \u0648\u0627\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      if (typeof rate !== "number" || rate < 0 || rate > 100) {
        return res.status(400).json({ message: "\u0646\u0633\u0628\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0628\u064A\u0646 0% \u0648 100%" });
      }
      const existingResult = await db.$client.query(`
        SELECT id FROM agent_commissions WHERE agent_id = $1
      `, [user.id]);
      console.log("\u0627\u0644\u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0645\u0648\u062C\u0648\u062F\u0629 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", existingResult.rows.length);
      if (existingResult.rows.length > 0) {
        console.log("\u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0633\u062C\u0644 \u0627\u0644\u0645\u0648\u062C\u0648\u062F...");
        const updateResult = await db.$client.query(`
          UPDATE agent_commissions 
          SET value = $1, type = 'percentage', updated_at = NOW()
          WHERE agent_id = $2
        `, [rate.toString(), user.id]);
        console.log("\u0646\u062A\u064A\u062C\u0629 \u0627\u0644\u062A\u062D\u062F\u064A\u062B:", updateResult.rowCount);
      } else {
        console.log("\u0625\u0646\u0634\u0627\u0621 \u0633\u062C\u0644 \u062C\u062F\u064A\u062F...");
        const insertResult = await db.$client.query(`
          INSERT INTO agent_commissions (agent_id, value, type, currency_code, created_at, updated_at)
          VALUES ($1, $2, 'percentage', 'LYD', NOW(), NOW())
        `, [user.id, rate.toString()]);
        console.log("\u0646\u062A\u064A\u062C\u0629 \u0627\u0644\u0625\u062F\u0631\u0627\u062C:", insertResult.rowCount);
      }
      console.log("\u062A\u0645 \u062D\u0641\u0638 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", user.id);
      res.json({ message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/commission-rates", authMiddleware, async (req, res) => {
    try {
      const { transferType = "inter-office", currency = "LYD" } = req.query;
      const systemRateResult = await db.$client.query(`
        SELECT commission_rate as "commissionRate", per_mille_rate as "perMilleRate", fixed_amount as "fixedAmount"
        FROM system_commission_rates 
        WHERE transfer_type = $1 AND currency = $2 AND is_active = true
        ORDER BY created_at DESC
        LIMIT 1
      `, [transferType, currency]);
      let systemCommissionRate = "0.01";
      let rateType = "default";
      if (systemRateResult.rows[0]) {
        const dbRow = systemRateResult.rows[0];
        if (dbRow.fixedAmount && parseFloat(dbRow.fixedAmount) > 0) {
          systemCommissionRate = dbRow.fixedAmount;
          rateType = "fixed";
        } else if (dbRow.perMilleRate && parseFloat(dbRow.perMilleRate) > 0) {
          systemCommissionRate = dbRow.perMilleRate;
          rateType = "per_mille";
        } else {
          systemCommissionRate = dbRow.commissionRate;
          rateType = "percentage";
        }
      }
      console.log(`\u{1F4CA} \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645: ${systemCommissionRate} (${rateType}) \u0644\u0646\u0648\u0639 ${transferType} \u0648\u0639\u0645\u0644\u0629 ${currency}`);
      res.json({
        systemCommissionRate: parseFloat(systemCommissionRate),
        transferType,
        currency,
        source: systemRateResult.rows[0] ? "database" : "default",
        rateType
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0646\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.get("/api/agent-commission-rate/:agentId", authMiddleware, async (req, res) => {
    try {
      const agentId = parseInt(req.params.agentId);
      const { currency = "LYD" } = req.query;
      if (isNaN(agentId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0648\u0643\u064A\u0644 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      const agentCommissionResult = await db.$client.query(`
        SELECT commission_rate as "commissionRate", commission_type as "commissionType"
        FROM agent_commissions 
        WHERE agent_id = $1 AND currency = $2 AND is_active = true
        ORDER BY created_at DESC
        LIMIT 1
      `, [agentId, currency]);
      const recipientCommissionRate = agentCommissionResult.rows[0]?.commissionRate || "1.5";
      console.log(`\u{1F3E6} \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628 ${agentId}: ${recipientCommissionRate}% \u0644\u0644\u0639\u0645\u0644\u0629 ${currency}`);
      res.json({
        recipientCommissionRate: parseFloat(recipientCommissionRate),
        agentId,
        currency,
        source: agentCommissionResult.rows[0] ? "database" : "default",
        commissionType: agentCommissionResult.rows[0]?.commissionType || "percentage"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0646\u0633\u0628\u0629 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0643\u062A\u0628" });
    }
  });
  app2.get("/api/market/commission", authMiddleware, async (req, res) => {
    try {
      console.log("\u{1F50D} \u0637\u0644\u0628 \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u062D\u0633\u0646\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", req.user?.id, "\u0627\u0644\u0646\u0648\u0639:", req.user?.type);
      if (!req.user || req.user.type !== "admin") {
        console.log("\u274C \u0631\u0641\u0636 \u0627\u0644\u0648\u0635\u0648\u0644 - \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0644\u064A\u0633 \u0645\u062F\u064A\u0631\u0627\u064B:", req.user?.type);
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const settings = await db.select().from(systemCommissionSettings).orderBy(asc4(systemCommissionSettings.currency));
      console.log("\u{1F4CA} \u062A\u0645 \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0645\u0646 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A:", settings.length, "\u0625\u0639\u062F\u0627\u062F");
      const currencies = settings.map((setting) => ({
        currency: setting.currency,
        type: setting.type === "percentage" ? "PERCENT" : "FIXED",
        value: parseFloat(setting.value)
      }));
      console.log("\u{1F4E4} \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0628\u062A\u0646\u0633\u064A\u0642 JSON \u0644\u0644\u0639\u0645\u064A\u0644:", currencies);
      res.json({ currencies });
    } catch (error) {
      console.error("\u{1F525} \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.put("/api/market/commission", authMiddleware, async (req, res) => {
    try {
      console.log("\u{1F50D} \u0637\u0644\u0628 \u062D\u0641\u0638 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u062D\u0633\u0646\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", req.user?.id);
      if (!req.user || req.user.type !== "admin") {
        console.log("\u274C \u0631\u0641\u0636 \u0627\u0644\u0648\u0635\u0648\u0644 - \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0644\u064A\u0633 \u0645\u062F\u064A\u0631\u0627\u064B:", req.user?.type);
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0641\u0638 \u0647\u0630\u0647 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
      }
      const { currencies } = req.body;
      if (!Array.isArray(currencies)) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0639\u0628\u0627\u0631\u0629 \u0639\u0646 \u0645\u0635\u0641\u0648\u0641\u0629 \u0645\u0646 \u0627\u0644\u0639\u0645\u0644\u0627\u062A" });
      }
      console.log("\u{1F4E5} \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0648\u0627\u0631\u062F\u0629:", currencies);
      for (const curr of currencies) {
        if (!curr.currency || !curr.type || typeof curr.value !== "number") {
          return res.status(400).json({
            message: "\u0628\u064A\u0627\u0646\u0627\u062A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629: \u064A\u062C\u0628 \u062A\u0648\u0641\u0631 currency \u0648 type \u0648 value \u0644\u0643\u0644 \u0639\u0645\u0644\u0629"
          });
        }
        if (curr.type === "PERCENT" && (curr.value < 0 || curr.value > 100)) {
          return res.status(400).json({
            message: `\u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064A\u0629 \u0644\u0644\u0639\u0645\u0644\u0629 ${curr.currency} \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0628\u064A\u0646 0 \u0648 100`
          });
        }
        if (curr.type === "FIXED" && curr.value < 0) {
          return res.status(400).json({
            message: `\u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u062B\u0627\u0628\u062A \u0644\u0644\u0639\u0645\u0644\u0629 ${curr.currency} \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0623\u0648 \u064A\u0633\u0627\u0648\u064A \u0635\u0641\u0631`
          });
        }
      }
      const currencyCodes = currencies.map((c) => c.currency);
      const uniqueCurrencies = new Set(currencyCodes);
      if (currencyCodes.length !== uniqueCurrencies.size) {
        return res.status(400).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062A\u0643\u0631\u0627\u0631 \u0646\u0641\u0633 \u0627\u0644\u0639\u0645\u0644\u0629" });
      }
      await db.delete(systemCommissionSettings);
      console.log("\u{1F5D1}\uFE0F \u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0642\u062F\u064A\u0645\u0629");
      if (currencies.length > 0) {
        const insertData = currencies.map((curr) => ({
          currency: curr.currency,
          type: curr.type === "PERCENT" ? "percentage" : "fixed",
          value: curr.value.toString(),
          updatedBy: req.user.id,
          updatedAt: /* @__PURE__ */ new Date()
        }));
        await db.insert(systemCommissionSettings).values(insertData);
        console.log("\u2705 \u062A\u0645 \u0625\u062F\u0631\u0627\u062C \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u062C\u062F\u064A\u062F\u0629:", insertData.length, "\u0639\u0645\u0644\u0629");
      }
      console.log(`\u2705 \u062A\u0645 \u062D\u0641\u0638 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D \u0628\u0648\u0627\u0633\u0637\u0629 \u0627\u0644\u0645\u062F\u064A\u0631 ${req.user.id}`);
      res.json({
        message: "\u062A\u0645 \u062D\u0641\u0638 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        currencies
      });
    } catch (error) {
      console.error("\u{1F525} \u062E\u0637\u0623 \u0641\u064A \u062D\u0641\u0638 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0641\u0638 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.get("/api/admin/commission-logs", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629 \u0645\u062A\u0627\u062D\u0629 \u0644\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      const page = parseInt(req.query.page || "1");
      const limit = parseInt(req.query.limit || "20");
      const offset = (page - 1) * limit;
      const logs = await db.select().from(commissionLogs).orderBy(desc8(commissionLogs.createdAt)).limit(limit).offset(offset);
      const totalCount = await db.select({ count: sql12`count(*)` }).from(commissionLogs);
      res.json({
        logs: logs.map((log2) => ({
          ...log2,
          commissionAmount: log2.commissionAmount.toString(),
          createdAt: log2.createdAt?.toISOString()
        })),
        total: parseInt(totalCount[0].count.toString()),
        page,
        totalPages: Math.ceil(parseInt(totalCount[0].count.toString()) / limit)
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629" });
    }
  });
  app2.post("/api/security/check-block", checkBlockedFingerprint);
  app2.post("/api/security/report-attack", reportSuspiciousActivity);
  app2.post("/api/security/silent-capture", async (req, res) => {
    try {
      const { imageData, fingerprint, ipAddress, userAgent, location, failedAttempts, reportType = "failed_login_attempts" } = req.body;
      if (!imageData || !fingerprint) {
        return res.status(400).json({ message: "\u0628\u064A\u0627\u0646\u0627\u062A \u0645\u0637\u0644\u0648\u0628\u0629 \u0645\u0641\u0642\u0648\u062F\u0629" });
      }
      if (reportType === "failed_login_attempts" && failedAttempts !== 3) {
        console.log(`\u{1F6AB} \u0645\u062D\u0627\u0648\u0644\u0629 \u062A\u0635\u0648\u064A\u0631 \u0645\u0628\u0643\u0631\u0629 - \u0627\u0644\u0645\u062D\u0627\u0648\u0644\u0627\u062A: ${failedAttempts} (\u0645\u0637\u0644\u0648\u0628: 3 \u0628\u0627\u0644\u0636\u0628\u0637)`);
        return res.status(400).json({ message: "\u0627\u0644\u062A\u0635\u0648\u064A\u0631 \u064A\u0646\u0634\u0637 \u0628\u0639\u062F 3 \u0645\u062D\u0627\u0648\u0644\u0627\u062A \u0641\u0627\u0634\u0644\u0629 \u0628\u0627\u0644\u0636\u0628\u0637" });
      }
      console.log("\u{1F4F8} \u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u062A\u0635\u0648\u064A\u0631 \u0627\u0644\u0635\u0627\u0645\u062A \u0628\u0639\u062F 3 \u0645\u062D\u0627\u0648\u0644\u0627\u062A \u0641\u0627\u0634\u0644\u0629");
      console.log(`\u{1F50D} \u0627\u0644\u0628\u0635\u0645\u0629: ${fingerprint.substring(0, 10)}...`);
      console.log(`\u{1F310} \u0639\u0646\u0648\u0627\u0646 IP: ${ipAddress}`);
      console.log(`\u{1F4F1} \u0645\u062A\u0635\u0641\u062D: ${userAgent?.substring(0, 50)}...`);
      const timestamp2 = (/* @__PURE__ */ new Date()).toISOString().replace(/[:.]/g, "-");
      const imageFilename = `silent_capture_${fingerprint.substring(0, 8)}_${timestamp2}.jpg`;
      const result = await handleSilentCapture({
        imageData,
        fingerprint,
        ipAddress,
        userAgent,
        location,
        failedAttempts: failedAttempts || 3,
        reportType,
        filename: imageFilename
      });
      if (result.success) {
        console.log("\u2705 \u062A\u0645 \u062D\u0641\u0638 \u0627\u0644\u062A\u0635\u0648\u064A\u0631 \u0627\u0644\u0635\u0627\u0645\u062A \u0628\u0646\u062C\u0627\u062D");
        res.json({
          success: true,
          message: "\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0646\u0634\u0627\u0637 \u0627\u0644\u0623\u0645\u0646\u064A",
          logId: result.logId
        });
      } else {
        console.error("\u274C \u0641\u0634\u0644 \u0641\u064A \u062D\u0641\u0638 \u0627\u0644\u062A\u0635\u0648\u064A\u0631 \u0627\u0644\u0635\u0627\u0645\u062A:", result.error);
        res.status(500).json({
          success: false,
          message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0623\u0645\u0646\u064A"
        });
      }
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A API \u0627\u0644\u062A\u0635\u0648\u064A\u0631 \u0627\u0644\u0635\u0627\u0645\u062A:", error);
      res.status(500).json({
        success: false,
        message: "\u062E\u0637\u0623 \u062E\u0627\u062F\u0645 \u062F\u0627\u062E\u0644\u064A"
      });
    }
  });
  app2.get("/api/security/logs", authMiddleware, securityMiddleware, getSecurityLogs);
  app2.post("/api/security/block", authMiddleware, securityMiddleware, blockFingerprint);
  app2.post("/api/security/unblock", authMiddleware, securityMiddleware, unblockFingerprint);
  app2.delete("/api/security/logs/:logId", authMiddleware, securityMiddleware, deleteSecurityLog);
  app2.delete("/api/security/logs", authMiddleware, securityMiddleware, clearAllSecurityLogs);
  app2.get("/api/security/image/:filename", securityImageMiddleware, getSecurityImage);
  app2.get("/api/statements", authMiddleware, checkPageRestrictions("statement"), async (req, res) => {
    try {
      const {
        start,
        end,
        currency,
        type,
        status,
        q,
        reference,
        page = 1,
        pageSize = 50
      } = req.query;
      const userId = req.user.id;
      const offset = (Number(page) - 1) * Number(pageSize);
      console.log("\u{1F4CA} \u0641\u0644\u0627\u062A\u0631 \u0643\u0634\u0641 \u0627\u0644\u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629:", {
        userId,
        start,
        end,
        currency,
        type,
        status,
        q,
        reference,
        page,
        pageSize
      });
      const user = await storage.getUser(userId);
      console.log(`\u{1F464} \u0637\u0644\u0628 \u0643\u0634\u0641 \u0627\u0644\u062D\u0633\u0627\u0628 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userId} - ${user?.fullName || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"}`);
      const conditions = [eq10(transactions.userId, userId)];
      if (currency && currency !== "all") {
        conditions.push(eq10(transactions.currency, currency));
      }
      if (type && type !== "all") {
        conditions.push(eq10(transactions.type, type));
      }
      if (status && status !== "all") {
        conditions.push(eq10(transactions.status, status));
      }
      if (start && end) {
        conditions.push(
          sql12`${transactions.date} >= ${start}::timestamp AND ${transactions.date} <= (${end}::timestamp + INTERVAL '1 day' - INTERVAL '1 millisecond')`
        );
        console.log(`\u{1F4C5} \u0641\u0644\u062A\u0631 \u0627\u0644\u062A\u0627\u0631\u064A\u062E: \u0645\u0646 ${start} \u0625\u0644\u0649 \u0646\u0647\u0627\u064A\u0629 ${end}`);
      } else if (start) {
        conditions.push(sql12`${transactions.date} >= ${start}::timestamp`);
        console.log(`\u{1F4C5} \u0641\u0644\u062A\u0631 \u0627\u0644\u062A\u0627\u0631\u064A\u062E: \u0645\u0646 ${start}`);
      } else if (end) {
        conditions.push(sql12`${transactions.date} <= (${end}::timestamp + INTERVAL '1 day' - INTERVAL '1 millisecond')`);
        console.log(`\u{1F4C5} \u0641\u0644\u062A\u0631 \u0627\u0644\u062A\u0627\u0631\u064A\u062E: \u062D\u062A\u0649 \u0646\u0647\u0627\u064A\u0629 ${end}`);
      }
      if (q && q.trim()) {
        conditions.push(
          like4(transactions.description, `%${q}%`)
        );
      }
      if (reference && reference.trim()) {
        conditions.push(
          like4(transactions.referenceNumber, `%${reference}%`)
        );
      }
      console.log("\u{1F4CA} \u0639\u062F\u062F \u0634\u0631\u0648\u0637 \u0627\u0644\u0641\u0644\u062A\u0631\u0629 \u0627\u0644\u0645\u0637\u0628\u0642\u0629:", conditions.length);
      if (userId === 28) {
        const exchangeTest = await db.select().from(transactions).where(and9(eq10(transactions.userId, 28), eq10(transactions.type, "exchange"))).orderBy(desc8(transactions.date));
        console.log(`\u{1F50D} \u0645\u0639\u0627\u0645\u0644\u0627\u062A exchange \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 28: ${exchangeTest.length} \u0645\u0639\u0627\u0645\u0644\u0629`);
        exchangeTest.forEach((tx, i) => {
          console.log(`  ${i + 1}. ${tx.referenceNumber} - ${tx.date} - ${tx.description}`);
        });
      }
      let transactionsQuery = db.select().from(transactions).where(and9(...conditions));
      if (reference && reference.trim()) {
        console.log(`\u{1F50D} \u062A\u0631\u062A\u064A\u0628 \u062D\u0633\u0628 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A: "${reference}"`);
        transactionsQuery = transactionsQuery.orderBy(
          // البحث المطابق تماماً أولاً
          sql12`CASE WHEN ${transactions.referenceNumber} = ${reference} THEN 0 ELSE 1 END`,
          // ثم البحث الجزئي
          sql12`CASE WHEN ${transactions.referenceNumber} LIKE ${`%${reference}%`} THEN 0 ELSE 1 END`,
          // أخيراً بالتاريخ (الأحدث أولاً)
          desc8(transactions.date),
          desc8(transactions.id)
        );
      } else if (q && q.trim()) {
        console.log(`\u{1F50D} \u062A\u0631\u062A\u064A\u0628 \u062D\u0633\u0628 \u0627\u0644\u0628\u062D\u062B \u0627\u0644\u0646\u0635\u064A: "${q}"`);
        transactionsQuery = transactionsQuery.orderBy(
          // النتائج المطابقة للبحث النصي أولاً
          sql12`CASE WHEN ${transactions.description} LIKE ${`%${q}%`} THEN 0 ELSE 1 END`,
          desc8(transactions.date),
          desc8(transactions.id)
        );
      } else {
        console.log("\u{1F50D} \u062A\u0631\u062A\u064A\u0628 \u0639\u0627\u062F\u064A \u0628\u0627\u0644\u062A\u0627\u0631\u064A\u062E");
        transactionsQuery = transactionsQuery.orderBy(desc8(transactions.date), desc8(transactions.id));
      }
      transactionsQuery = transactionsQuery.limit(Number(pageSize)).offset(offset);
      const transactionsResult = await transactionsQuery.execute();
      console.log(`\u{1F4CA} \u0646\u062A\u0627\u0626\u062C \u0627\u0644\u0627\u0633\u062A\u0639\u0644\u0627\u0645: ${transactionsResult.length} \u0645\u0639\u0627\u0645\u0644\u0629`);
      const enrichedTransactions = await Promise.all(
        transactionsResult.map(async (transaction) => {
          if (transaction.userId) {
            const user2 = await storage.getUser(transaction.userId);
            return {
              ...transaction,
              userAccountNumber: user2?.accountNumber,
              userName: user2?.fullName,
              fullName: user2?.fullName,
              userPhone: user2?.phone
            };
          }
          return transaction;
        })
      );
      const allTransactionsQuery = db.select().from(transactions).where(eq10(transactions.userId, userId)).orderBy(asc4(transactions.date), asc4(transactions.id));
      const allTransactions = await allTransactionsQuery.execute();
      let openingBalance = 0;
      let totalDebits = 0;
      let totalCredits = 0;
      for (const transaction of allTransactions) {
        const amount = Math.abs(Number(transaction.amount || 0));
        if (start && new Date(transaction.date) < new Date(start)) {
          if (Number(transaction.amount) >= 0) {
            openingBalance += amount;
          } else {
            openingBalance -= amount;
          }
        } else if ((!start || new Date(transaction.date) >= new Date(start)) && (!end || new Date(transaction.date) <= new Date(new Date(end).getTime() + 24 * 60 * 60 * 1e3 - 1))) {
          if (Number(transaction.amount) >= 0) {
            totalCredits += amount;
          } else {
            totalDebits += amount;
          }
        }
      }
      let runningBalance = openingBalance;
      let shouldCalculateRunningBalance = !reference && !q;
      const statementRows = enrichedTransactions.map((transaction, index2) => {
        const amount = Number(transaction.amount || 0);
        const absAmount = Math.abs(amount);
        if (shouldCalculateRunningBalance) {
          runningBalance += amount;
        }
        console.log(`\u{1F4CA} \u0645\u0639\u0627\u0645\u0644\u0629 ${index2 + 1}: ${transaction.referenceNumber} - ${transaction.description}`);
        return {
          id: transaction.id,
          date: transaction.date,
          type: transaction.type,
          description: transaction.description || "",
          referenceNumber: transaction.referenceNumber || "",
          amount: absAmount.toFixed(4),
          direction: amount >= 0 ? "credit" : "debit",
          currency: transaction.currency,
          runningBalance: runningBalance.toFixed(4),
          userId: transaction.userId,
          userAccountNumber: transaction.userAccountNumber,
          userName: transaction.userName,
          fullName: transaction.fullName,
          userPhone: transaction.userPhone
        };
      });
      res.json({
        openingBalance: openingBalance.toFixed(4),
        rows: statementRows,
        totals: {
          debits: totalDebits.toFixed(4),
          credits: totalCredits.toFixed(4),
          fees: "0.0000",
          // حاليًا لا نحسب الرسوم منفصلة
          net: (totalCredits - totalDebits).toFixed(4)
        },
        pagination: {
          page: Number(page),
          pageSize: Number(pageSize),
          hasMore: transactionsResult.length === Number(pageSize)
        }
      });
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0643\u0634\u0641 \u0627\u0644\u062D\u0633\u0627\u0628:", error);
      res.status(500).json({
        success: false,
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0643\u0634\u0641 \u0627\u0644\u062D\u0633\u0627\u0628"
      });
    }
  });
  app2.post("/api/statements/export", authMiddleware, async (req, res) => {
    try {
      const { format, ...filters } = req.body;
      const formatDateSafely = (dateInput) => {
        if (!dateInput) return "";
        try {
          const date = new Date(dateInput);
          if (isNaN(date.getTime())) return "";
          return date.toLocaleDateString("ar-LY");
        } catch (error) {
          return "";
        }
      };
      const typeMapping = {
        "deposit": "\u0625\u064A\u062F\u0627\u0639",
        "withdraw": "\u0633\u062D\u0628",
        "internal_transfer_sent": "\u062D\u0648\u0627\u0644\u0629 \u062F\u0627\u062E\u0644\u064A\u0629 \u0645\u0631\u0633\u0644\u0629",
        "internal_transfer_received": "\u062D\u0648\u0627\u0644\u0629 \u062F\u0627\u062E\u0644\u064A\u0629 \u0645\u0633\u062A\u0644\u0645\u0629",
        "inter_office_sent": "\u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 \u0645\u0631\u0633\u0644\u0629",
        "inter_office_received": "\u062D\u0648\u0627\u0644\u0629 \u0628\u064A\u0646 \u0627\u0644\u0645\u0643\u0627\u062A\u0628 \u0645\u0633\u062A\u0644\u0645\u0629",
        "international_sent": "\u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 \u0645\u0631\u0633\u0644\u0629",
        "international_received": "\u062D\u0648\u0627\u0644\u0629 \u062F\u0648\u0644\u064A\u0629 \u0645\u0633\u062A\u0644\u0645\u0629"
      };
      if (!["pdf", "excel"].includes(format)) {
        return res.status(400).json({
          success: false,
          message: "\u062A\u0646\u0633\u064A\u0642 \u0627\u0644\u062A\u0635\u062F\u064A\u0631 \u063A\u064A\u0631 \u0645\u062F\u0639\u0648\u0645"
        });
      }
      const userId = req.user.id;
      let whereConditions = [eq10(transactions.userId, userId)];
      if (filters.start) {
        whereConditions.push(gte5(transactions.date, new Date(filters.start)));
      }
      if (filters.end) {
        const endDate = new Date(filters.end);
        endDate.setHours(23, 59, 59, 999);
        whereConditions.push(lte4(transactions.date, endDate));
      }
      if (filters.currency && filters.currency !== "all") {
        whereConditions.push(eq10(transactions.currency, filters.currency));
      }
      if (filters.type && filters.type !== "all") {
        whereConditions.push(eq10(transactions.type, filters.type));
      }
      if (filters.reference) {
        whereConditions.push(like4(transactions.referenceNumber, `%${filters.reference}%`));
      }
      if (filters.q) {
        whereConditions.push(like4(transactions.description, `%${filters.q}%`));
      }
      const transactionsResult = await db.select().from(transactions).where(and9(...whereConditions)).orderBy(asc4(transactions.date));
      if (format === "pdf") {
        try {
          const { ThermalReceiptGenerator: ThermalReceiptGenerator2 } = await Promise.resolve().then(() => (init_thermal_receipt_generator(), thermal_receipt_generator_exports));
          let runningBalance = 0;
          const processedRows = transactionsResult.map((t) => {
            const amount = parseFloat(t.amount);
            const isCredit = ["deposit", "internal_transfer_in", "inter_office_received", "international_received"].includes(t.type);
            if (isCredit) {
              runningBalance += amount;
            } else {
              runningBalance -= amount;
            }
            return {
              id: t.id,
              date: t.date ? formatDateSafely(t.date) : "",
              type: typeMapping[t.type] || t.type,
              referenceNumber: t.referenceNumber || t.id.toString(),
              amount: t.amount,
              currency: t.currency,
              description: t.description || "",
              balance: runningBalance.toFixed(4)
              // الرصيد التراكمي الصحيح
            };
          });
          const statementData = {
            openingBalance: "0.0000",
            rows: processedRows.reverse(),
            // عكس الترتيب لعرض الأحدث أولاً في الإيصال
            totals: {
              debits: "0.0000",
              credits: transactionsResult.reduce((sum2, t) => sum2 + parseFloat(t.amount), 0).toString(),
              fees: "0.0000",
              net: runningBalance.toFixed(4)
            }
          };
          const receiptHtml = await ThermalReceiptGenerator2.generateStatementReceipt(statementData);
          const { HtmlImageGenerator: HtmlImageGenerator2 } = await Promise.resolve().then(() => (init_html_image_generator(), html_image_generator_exports));
          const pdfBuffer = await HtmlImageGenerator2.generatePDF(receiptHtml, {
            format: "A4",
            printBackground: true
          });
          const fileName = `statement_${Date.now()}.pdf`;
          res.setHeader("Content-Type", "application/pdf");
          res.setHeader("Content-Disposition", `attachment; filename="${fileName}"`);
          res.setHeader("Content-Length", pdfBuffer.length);
          res.send(pdfBuffer);
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0635\u062F\u064A\u0631 PDF:", error);
          throw new Error("\u0641\u0634\u0644 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0645\u0644\u0641 PDF");
        }
      } else {
        const csvHeader = "\u0627\u0644\u062A\u0627\u0631\u064A\u062E,\u0627\u0644\u0646\u0648\u0639,\u0627\u0644\u0645\u0628\u0644\u063A,\u0627\u0644\u0639\u0645\u0644\u0629,\u0627\u0644\u0648\u0635\u0641\n";
        const csvRows = transactionsResult.map((t) => {
          const arabicType = typeMapping[t.type] || t.type;
          const formattedDate = t.date ? formatDateSafely(t.date) : "";
          const description = t.description || "";
          return `${formattedDate},"${arabicType}","${t.amount}","${t.currency}","${description}"`;
        }).join("\n");
        const csvContent = csvHeader + csvRows;
        const fileName = `statement_${Date.now()}.csv`;
        res.setHeader("Content-Type", "text/csv; charset=utf-8");
        res.setHeader("Content-Disposition", `attachment; filename="${fileName}"`);
        res.setHeader("Content-Length", Buffer.byteLength(csvContent, "utf8"));
        res.write("\uFEFF");
        res.write(csvContent, "utf8");
        res.end();
      }
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062A\u0635\u062F\u064A\u0631 \u0643\u0634\u0641 \u0627\u0644\u062D\u0633\u0627\u0628:", error);
      res.status(500).json({
        success: false,
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062A\u0635\u062F\u064A\u0631 \u0643\u0634\u0641 \u0627\u0644\u062D\u0633\u0627\u0628"
      });
    }
  });
  app2.post("/api/receipts/international-transfer", authMiddleware, async (req, res) => {
    try {
      const { id: userId } = req.user;
      const { transferCode, locale = "ar" } = req.body;
      if (!transferCode) {
        return res.status(400).json({ message: "\u0643\u0648\u062F \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0645\u0637\u0644\u0648\u0628" });
      }
      const transfer = await storage.getAgentTransferByReceiverCode(transferCode);
      if (!transfer) {
        return res.status(404).json({ message: "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (transfer.senderId !== userId && transfer.destinationAgentId !== userId && transfer.agentId !== userId) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0644\u0647\u0630\u0627 \u0627\u0644\u062A\u062D\u0648\u064A\u0644" });
      }
      const transactionData = {
        id: transfer.id.toString(),
        type: "international_transfer",
        userId: transfer.senderId,
        amount: transfer.amount,
        currency: transfer.currency,
        commission: transfer.commission,
        counterparty: transfer.recipientName,
        ref: transfer.transferCode,
        referenceNumber: transfer.receiverCode,
        note: transfer.note || "",
        executedAt: transfer.createdAt,
        status: transfer.status,
        // خاص بالتحويل الدولي
        receiverCode: transfer.receiverCode,
        destinationCountry: transfer.country,
        recipientPhone: transfer.recipientPhone
      };
      const { InternationalReceiptService: InternationalReceiptService2 } = await Promise.resolve().then(() => (init_international_receipt_service(), international_receipt_service_exports));
      const receiptId = await InternationalReceiptService2.generateInternationalTransferReceipt(transactionData, locale);
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A \u0628\u0646\u062C\u0627\u062D",
        receiptId,
        transferCode: transfer.receiverCode
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644" });
    }
  });
  app2.get("/api/receipts/:receiptId/file", authMiddleware, async (req, res) => {
    try {
      const { receiptId } = req.params;
      const { receipts: receipts3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
      const [receipt] = await db.select().from(receipts3).where(eq10(receipts3.id, receiptId)).limit(1);
      if (!receipt) {
        return res.status(404).json({ message: "\u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      let filePath = receipt.storagePath;
      if (!filePath) {
        console.error(`\u0645\u0633\u0627\u0631 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0645\u0641\u0642\u0648\u062F \u0644\u0644\u0625\u064A\u0635\u0627\u0644: ${receiptId}`);
        return res.status(404).json({ message: "\u0645\u0633\u0627\u0631 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0645\u0641\u0642\u0648\u062F" });
      }
      if (!filePath.startsWith("./") && !filePath.startsWith("/")) {
        filePath = `./${filePath}`;
      }
      const fs8 = await import("fs");
      const path9 = await import("path");
      if (!fs8.existsSync(filePath)) {
        console.error(`\u0645\u0644\u0641 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0631: ${filePath}`);
        return res.status(404).json({ message: "\u0645\u0644\u0641 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const ext = path9.extname(filePath).toLowerCase();
      let contentType = "application/octet-stream";
      if (ext === ".png") contentType = "image/png";
      else if (ext === ".jpg" || ext === ".jpeg") contentType = "image/jpeg";
      else if (ext === ".pdf") contentType = "application/pdf";
      res.setHeader("Content-Type", contentType);
      res.setHeader("Content-Disposition", `attachment; filename="receipt-${receiptId}${ext}"`);
      const stream = fs8.createReadStream(filePath);
      stream.pipe(res);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u0645\u064A\u0644 \u0645\u0644\u0641 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644" });
    }
  });
  app2.get("/api/receipts/:receiptId/print", async (req, res) => {
    try {
      const { receiptId } = req.params;
      const { receipts: receipts3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
      const [receipt] = await db.select().from(receipts3).where(eq10(receipts3.id, receiptId)).limit(1);
      if (!receipt) {
        return res.status(404).send(`
          <!DOCTYPE html>
          <html dir="rtl" lang="ar">
          <head><title>\u062E\u0637\u0623</title></head>
          <body><h1>\u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F</h1></body>
          </html>
        `);
      }
      const transferId = receipt.txnId;
      const { agentTransfers: agentTransfers3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
      const [transfer] = await db.select().from(agentTransfers3).where(eq10(agentTransfers3.id, parseInt(transferId))).limit(1);
      if (!transfer) {
        return res.status(404).send(`
          <!DOCTYPE html>
          <html dir="rtl" lang="ar">
          <head><title>\u062E\u0637\u0623</title></head>
          <body><h1>\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629</h1></body>
          </html>
        `);
      }
      const printHtml = await generatePrintableReceipt(receipt, transfer);
      res.setHeader("Content-Type", "text/html; charset=utf-8");
      res.send(printHtml);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0639\u0631\u0636 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0644\u0644\u0637\u0628\u0627\u0639\u0629:", error);
      res.status(500).send(`
        <!DOCTYPE html>
        <html dir="rtl" lang="ar">
        <head><title>\u062E\u0637\u0623</title></head>
        <body><h1>\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0639\u0631\u0636 \u0627\u0644\u0625\u064A\u0635\u0627\u0644</h1></body>
        </html>
      `);
    }
  });
  app2.post("/api/receipts/generate", authMiddleware, async (req, res) => {
    try {
      const { id: userId } = req.user;
      const { transactionId, locale = "ar" } = req.body;
      if (!transactionId) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u0645\u0637\u0644\u0648\u0628" });
      }
      const [transaction] = await db.select().from(transactions).where(eq10(transactions.id, parseInt(transactionId))).limit(1);
      if (!transaction) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      if (transaction.userId !== userId && req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629" });
      }
      const transactionData = {
        id: transactionId,
        type: transaction.type,
        userId: transaction.userId,
        amount: transaction.amount,
        currency: transaction.currency,
        commission: transaction.commission || "0",
        counterparty: transaction.counterparty || "",
        ref: transaction.ref || "",
        referenceNumber: transaction.referenceNumber || `REF-${transactionId}`,
        note: transaction.description || "",
        executedAt: new Date(transaction.date),
        status: "completed"
      };
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const receiptId = await ReceiptService2.generateReceipt(transactionData, locale);
      res.status(201).json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0628\u0646\u062C\u0627\u062D",
        receiptId
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644" });
    }
  });
  app2.get("/api/receipts/:receiptId/verify", async (req, res) => {
    try {
      const { receiptId } = req.params;
      const { token } = req.query;
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const result = await ReceiptService2.verifyReceipt(receiptId, token);
      res.json(result);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
      res.status(500).json({
        valid: false,
        reasons: ["\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645"]
      });
    }
  });
  app2.get("/api/receipts/:receiptId/file", async (req, res) => {
    try {
      const { receiptId } = req.params;
      const [receipt] = await db.select().from(receipts).where(eq10(receipts.id, receiptId)).limit(1);
      if (!receipt) {
        return res.status(404).json({ message: "\u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      if (receipt.revoked) {
        return res.status(410).json({ message: "\u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0645\u0644\u063A\u064A" });
      }
      const fs8 = await import("fs/promises");
      const path9 = await import("path");
      try {
        const fileBuffer = await fs8.readFile(receipt.storagePath);
        res.setHeader("Content-Type", "application/pdf");
        res.setHeader("Content-Disposition", `attachment; filename="receipt_${receiptId}.pdf"`);
        res.setHeader("Cache-Control", "public, max-age=3600");
        res.send(fileBuffer);
        const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
        await ReceiptService2.logAuditAction(receiptId, "download", "anonymous");
      } catch (fileError) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0642\u0631\u0627\u0621\u0629 \u0645\u0644\u0641 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", fileError);
        res.status(404).json({ message: "\u0645\u0644\u0641 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644" });
    }
  });
  app2.get("/r/:receiptId", async (req, res) => {
    try {
      const { receiptId } = req.params;
      const { t: token } = req.query;
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const verification = await ReceiptService2.verifyReceipt(receiptId, token);
      const html = `
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 - ${receiptId}</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
        .status { padding: 15px; border-radius: 5px; margin: 20px 0; }
        .valid { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .invalid { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .info { background-color: #e2e3e5; color: #383d41; border: 1px solid #d6d8db; }
        .btn { display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>\u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0635\u062D\u0629 \u0627\u0644\u0625\u064A\u0635\u0627\u0644</h1>
        <p><strong>\u0645\u0639\u0631\u0641 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:</strong> ${receiptId}</p>
        
        <div class="status ${verification.valid ? "valid" : "invalid"}">
            <h3>${verification.valid ? "\u2705 \u0625\u064A\u0635\u0627\u0644 \u0635\u062D\u064A\u062D" : "\u274C \u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D"}</h3>
            ${verification.reasons.length > 0 ? `<ul>${verification.reasons.map((r) => `<li>${r}</li>`).join("")}</ul>` : ""}
        </div>
        
        ${verification.summary ? `
        <div class="info">
            <h4>\u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:</h4>
            <p><strong>\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:</strong> ${verification.summary.txnId}</p>
            <p><strong>\u0627\u0644\u0625\u0635\u062F\u0627\u0631:</strong> ${verification.summary.version}</p>
            <p><strong>\u0627\u0644\u0644\u063A\u0629:</strong> ${verification.summary.locale}</p>
            <p><strong>\u062A\u0627\u0631\u064A\u062E \u0627\u0644\u0625\u0646\u0634\u0627\u0621:</strong> ${new Date(verification.summary.createdAt).toLocaleString("ar-EG")}</p>
            ${verification.summary.verifiedAt ? `<p><strong>\u0622\u062E\u0631 \u062A\u062D\u0642\u0642:</strong> ${new Date(verification.summary.verifiedAt).toLocaleString("ar-EG")}</p>` : ""}
        </div>
        ` : ""}
        
        ${verification.valid ? `
        <a href="/api/receipts/${receiptId}/file" class="btn">\u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644</a>
        ` : ""}
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 0.9em;">
            <p>\u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629 \u0644\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0635\u062D\u0629 \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A \u0627\u0644\u0645\u062E\u062A\u0648\u0645\u0629 \u0631\u0642\u0645\u064A\u0627\u064B</p>
            <p>\u0646\u0638\u0627\u0645 \u0627\u0644\u062A\u062D\u0642\u0642 \u0627\u0644\u0622\u0645\u0646 - \u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A\u0629</p>
        </div>
    </div>
</body>
</html>`;
      res.setHeader("Content-Type", "text/html; charset=utf-8");
      res.send(html);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0635\u0641\u062D\u0629 \u0627\u0644\u062A\u062D\u0642\u0642:", error);
      res.status(500).send("<h1>\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0646\u0638\u0627\u0645</h1><p>\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0625\u064A\u0635\u0627\u0644</p>");
    }
  });
  app2.get("/.well-known/jwks.json", async (req, res) => {
    try {
      const { CryptoService: CryptoService2 } = await Promise.resolve().then(() => (init_crypto_service(), crypto_service_exports));
      const jwks = await CryptoService2.getJWKS();
      res.setHeader("Content-Type", "application/json");
      res.setHeader("Cache-Control", "public, max-age=3600");
      res.json(jwks);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A JWKS:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  });
  app2.post("/api/receipts/:receiptId/revoke", authMiddleware, async (req, res) => {
    try {
      const { type, id: userId } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629 \u0645\u062A\u0627\u062D\u0629 \u0644\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      const { receiptId } = req.params;
      const { reason } = req.body;
      if (!reason) {
        return res.status(400).json({ message: "\u0633\u0628\u0628 \u0627\u0644\u0625\u0628\u0637\u0627\u0644 \u0645\u0637\u0644\u0648\u0628" });
      }
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const success = await ReceiptService2.revokeReceipt(receiptId, reason, userId.toString());
      if (success) {
        res.json({ message: "\u062A\u0645 \u0625\u0628\u0637\u0627\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0628\u0646\u062C\u0627\u062D" });
      } else {
        res.status(404).json({ message: "\u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0628\u0637\u0627\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0628\u0637\u0627\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644" });
    }
  });
  app2.post("/api/receipts/regenerate", authMiddleware, async (req, res) => {
    try {
      const { type, id: userId } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629 \u0645\u062A\u0627\u062D\u0629 \u0644\u0644\u0645\u062F\u0631\u0627\u0621 \u0641\u0642\u0637" });
      }
      const { transactionId, locale = "ar", reason } = req.body;
      if (!transactionId || !reason) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u0648\u0633\u0628\u0628 \u0625\u0639\u0627\u062F\u0629 \u0627\u0644\u0625\u0635\u062F\u0627\u0631 \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const receiptId = await ReceiptService2.regenerateReceipt(
        transactionId,
        locale,
        reason,
        userId.toString()
      );
      if (receiptId) {
        res.json({
          message: "\u062A\u0645 \u0625\u0639\u0627\u062F\u0629 \u0625\u0635\u062F\u0627\u0631 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u0628\u0646\u062C\u0627\u062D",
          receiptId
        });
      } else {
        res.status(404).json({ message: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0639\u0627\u062F\u0629 \u0625\u0635\u062F\u0627\u0631 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0639\u0627\u062F\u0629 \u0625\u0635\u062F\u0627\u0631 \u0627\u0644\u0625\u064A\u0635\u0627\u0644" });
    }
  });
  app2.get("/api/receipts/transaction/:transactionId", authMiddleware, async (req, res) => {
    try {
      const { id: userId, type } = req.user;
      const { transactionId } = req.params;
      const numericId = transactionId.replace(/^(tx-|mkt-|tr-)/, "");
      const parsedId = parseInt(numericId);
      if (isNaN(parsedId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      const [transaction] = await db.select().from(transactions).where(eq10(transactions.id, parsedId)).limit(1);
      if (!transaction) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      if (type !== "admin" && transaction.userId !== userId) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A" });
      }
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      let receipts3 = await ReceiptService2.getReceiptsByTransaction(parsedId.toString());
      if (!receipts3 || receipts3.length === 0) {
        try {
          const transactionData = {
            id: parsedId.toString(),
            type: transaction.type,
            userId: transaction.userId,
            amount: transaction.amount,
            currency: transaction.currency,
            commission: transaction.commission || "0",
            counterparty: transaction.counterparty || "",
            ref: transaction.ref || "",
            referenceNumber: transaction.referenceNumber || `REF-${parsedId}`,
            note: transaction.description || "",
            executedAt: new Date(transaction.date),
            status: "completed"
          };
          const receiptId = await ReceiptService2.generateReceipt(transactionData, "ar");
          if (receiptId) {
            receipts3 = await ReceiptService2.getReceiptsByTransaction(parsedId.toString());
          }
        } catch (generateError) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:", generateError);
          return res.status(404).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u0625\u0646\u0634\u0627\u0621 \u0625\u064A\u0635\u0627\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629" });
        }
      }
      if (!receipts3 || receipts3.length === 0) {
        return res.status(404).json({ message: "\u0644\u0627 \u064A\u0648\u062C\u062F \u0625\u064A\u0635\u0627\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629" });
      }
      const latestReceipt = receipts3[0];
      const pdfPath = latestReceipt.filePath;
      if (!pdfPath) {
        return res.status(404).json({ message: "\u0645\u0633\u0627\u0631 \u0645\u0644\u0641 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const fs8 = await import("fs");
      const path9 = await import("path");
      const fullPath = path9.resolve(pdfPath);
      if (!fs8.existsSync(fullPath)) {
        return res.status(404).json({ message: "\u0645\u0644\u0641 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const fileExtension = path9.extname(fullPath).toLowerCase();
      if (fileExtension === ".png") {
        res.setHeader("Content-Type", "image/png");
        res.setHeader("Content-Disposition", `inline; filename="receipt-${latestReceipt.id}.png"`);
      } else {
        res.setHeader("Content-Type", "application/pdf");
        res.setHeader("Content-Disposition", `inline; filename="receipt-${latestReceipt.id}.pdf"`);
      }
      res.sendFile(path9.resolve(pdfPath));
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u0645\u064A\u0644 \u0625\u064A\u0635\u0627\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u0645\u064A\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644" });
    }
  });
  app2.get("/api/receipts/transaction/:transactionId/list", authMiddleware, async (req, res) => {
    try {
      const { id: userId, type } = req.user;
      const { transactionId } = req.params;
      const numericId = transactionId.replace(/^(tx-|mkt-|tr-)/, "");
      const parsedId = parseInt(numericId);
      if (isNaN(parsedId)) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      if (type !== "admin") {
        const [transaction] = await db.select({ userId: transactions.userId }).from(transactions).where(eq10(transactions.id, parsedId)).limit(1);
        if (!transaction || transaction.userId !== userId) {
          return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A" });
        }
      }
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const receipts3 = await ReceiptService2.getReceiptsByTransaction(parsedId.toString());
      res.json(receipts3);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u064A\u0635\u0627\u0644\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/receipts/admin/all", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const limit = parseInt(req.query.limit) || 50;
      const offset = parseInt(req.query.offset) || 0;
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const receipts3 = await ReceiptService2.getAllReceipts(limit, offset);
      res.json(receipts3);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/receipts/admin/stats", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const stats = await ReceiptService2.getReceiptStats();
      res.json(stats);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A" });
    }
  });
  app2.post("/api/receipts/admin/settings", authMiddleware, async (req, res) => {
    try {
      const { type, email } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const { key, value } = req.body;
      if (!key || value === void 0) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0641\u062A\u0627\u062D \u0648\u0627\u0644\u0642\u064A\u0645\u0629 \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const success = await ReceiptService2.updateReceiptSetting(key, value, email);
      if (success) {
        res.json({ message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F \u0628\u0646\u062C\u0627\u062D" });
      } else {
        res.status(500).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.get("/api/receipts/admin/settings/:key", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const { key } = req.params;
      const { ReceiptService: ReceiptService2 } = await Promise.resolve().then(() => (init_receipt_service(), receipt_service_exports));
      const value = await ReceiptService2.getReceiptSetting(key);
      res.json({ key, value });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F \u0627\u0644\u0625\u064A\u0635\u0627\u0644\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u0639\u062F\u0627\u062F" });
    }
  });
  app2.get("/api/receipts/admin/audit/:receiptId", authMiddleware, async (req, res) => {
    try {
      const { type } = req.user;
      if (type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
      }
      const { receiptId } = req.params;
      const auditLogs2 = await db.select().from(receiptAuditLog).where(eq10(receiptAuditLog.receiptId, receiptId)).orderBy(desc8(receiptAuditLog.timestamp));
      res.json(auditLogs2);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062A\u062F\u0642\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062A\u062F\u0642\u064A\u0642" });
    }
  });
  app2.post("/api/voice/init", authMiddleware, async (req, res) => {
    try {
      const { roomId, privateRoomId, mimeType, durationEstimate } = req.body;
      const userId = req.user.id;
      const rateLimit = await VoiceService.checkRateLimit(userId);
      if (!rateLimit.allowed) {
        return res.status(429).json({
          message: "\u062A\u062C\u0627\u0648\u0632\u062A \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0635\u0648\u062A\u064A\u0629",
          remaining: rateLimit.remaining,
          resetIn: 10
          // دقائق
        });
      }
      if (!mimeType || !durationEstimate) {
        return res.status(400).json({
          message: "\u0646\u0648\u0639 \u0627\u0644\u0645\u0644\u0641 \u0648\u0645\u062F\u0629 \u0627\u0644\u062A\u0633\u062C\u064A\u0644 \u0645\u0637\u0644\u0648\u0628\u0627\u0646"
        });
      }
      if (durationEstimate > 120) {
        return res.status(400).json({
          message: "\u0645\u062F\u0629 \u0627\u0644\u062A\u0633\u062C\u064A\u0644 \u0637\u0648\u064A\u0644\u0629 \u062C\u062F\u0627\u064B (\u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 120 \u062B\u0627\u0646\u064A\u0629)"
        });
      }
      res.json({
        message: "\u062C\u0627\u0647\u0632 \u0644\u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0635\u0648\u062A\u064A",
        maxSizeMB: 10,
        allowedTypes: ["audio/ogg", "audio/webm", "audio/mpeg", "audio/mp4", "audio/wav"]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0628\u062F\u0621 \u0631\u0641\u0639 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/voice/upload", authMiddleware, voiceUpload.single("voice"), async (req, res) => {
    try {
      const userId = req.user.id;
      const { roomId, privateRoomId, messageId, privateMessageId, durationSeconds } = req.body;
      const file = req.file;
      if (!file) {
        return res.status(400).json({ message: "\u0644\u0645 \u064A\u062A\u0645 \u0631\u0641\u0639 \u0645\u0644\u0641 \u0635\u0648\u062A\u064A" });
      }
      if (!durationSeconds) {
        return res.status(400).json({ message: "\u0645\u062F\u0629 \u0627\u0644\u062A\u0633\u062C\u064A\u0644 \u0645\u0637\u0644\u0648\u0628\u0629" });
      }
      const rateLimit = await VoiceService.checkRateLimit(userId);
      if (!rateLimit.allowed) {
        return res.status(429).json({
          message: "\u062A\u062C\u0627\u0648\u0632\u062A \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0635\u0648\u062A\u064A\u0629",
          remaining: rateLimit.remaining
        });
      }
      const validation = VoiceService.validateVoiceFile(file, parseInt(durationSeconds));
      if (!validation.valid) {
        return res.status(400).json({ message: validation.error });
      }
      let newMessage;
      if (roomId) {
        [newMessage] = await db.insert(chatMessages).values({
          roomId: parseInt(roomId),
          senderId: userId,
          content: `[\u0631\u0633\u0627\u0644\u0629 \u0635\u0648\u062A\u064A\u0629 - ${Math.floor(parseInt(durationSeconds) / 60)}:${(parseInt(durationSeconds) % 60).toString().padStart(2, "0")}]`,
          createdAt: /* @__PURE__ */ new Date()
        }).returning();
      } else if (privateRoomId) {
        [newMessage] = await db.insert(privateMessages).values({
          chatId: parseInt(privateRoomId),
          senderId: userId,
          content: `[\u0631\u0633\u0627\u0644\u0629 \u0635\u0648\u062A\u064A\u0629 - ${Math.floor(parseInt(durationSeconds) / 60)}:${(parseInt(durationSeconds) % 60).toString().padStart(2, "0")}]`,
          createdAt: /* @__PURE__ */ new Date()
        }).returning();
      }
      const voiceId = await VoiceService.saveVoiceMessage({
        messageId: newMessage?.id,
        privateMessageId: privateRoomId ? newMessage?.id : void 0,
        senderId: userId,
        roomId: roomId ? parseInt(roomId) : void 0,
        privateRoomId: privateRoomId ? parseInt(privateRoomId) : void 0,
        file,
        durationSeconds: parseInt(durationSeconds)
      });
      if (roomId && newMessage) {
        await db.update(chatMessages).set({
          voiceId,
          voiceDuration: parseInt(durationSeconds)
        }).where(eq10(chatMessages.id, newMessage.id));
      } else if (privateRoomId && newMessage) {
        await db.update(privateMessages).set({
          voiceId,
          voiceDuration: parseInt(durationSeconds)
        }).where(eq10(privateMessages.id, newMessage.id));
      }
      await VoiceService.incrementRateLimit(userId);
      const [sender] = await db.select({
        fullName: users.fullName
      }).from(users).where(eq10(users.id, userId));
      if (roomId && newMessage) {
        const messageWithSender = {
          ...newMessage,
          voiceId,
          voiceDuration: parseInt(durationSeconds),
          senderName: sender?.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645",
          isEdited: false,
          isDeleted: false
        };
        io.to(`room-${roomId}`).emit("newMessage", messageWithSender);
      } else if (privateRoomId && newMessage) {
        const messageWithSender = {
          ...newMessage,
          voiceId,
          voiceDuration: parseInt(durationSeconds),
          senderName: sender?.fullName || "\u0645\u0633\u062A\u062E\u062F\u0645",
          isEdited: false,
          isDeleted: false
        };
        io.to(`private-${privateRoomId}`).emit("newPrivateMessage", messageWithSender);
      }
      res.json({
        message: "\u062A\u0645 \u0631\u0641\u0639 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629 \u0628\u0646\u062C\u0627\u062D",
        voiceId,
        durationSeconds: parseInt(durationSeconds)
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0631\u0641\u0639 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0631\u0641\u0639 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0635\u0648\u062A\u064A" });
    }
  });
  app2.get("/api/voice/stream/:voiceId", async (req, res) => {
    try {
      let token = req.headers.authorization?.replace("Bearer ", "") || req.query.token;
      if (!token) {
        return res.status(401).json({ message: "\u0627\u0644\u0631\u0645\u0632 \u0627\u0644\u0645\u0645\u064A\u0632 \u0645\u0637\u0644\u0648\u0628" });
      }
      const JWT_SECRET3 = getJwtSecret();
      const decoded = jwt5.verify(token, JWT_SECRET3);
      const userId = decoded.userId;
      const { voiceId } = req.params;
      const result = await VoiceService.getVoiceFileUrl(voiceId, userId);
      if (!result) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0635\u0648\u062A\u064A \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0623\u0648 \u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u064A\u0647" });
      }
      const { voice } = result;
      console.log("\u0645\u062D\u0627\u0648\u0644\u0629 \u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0644\u0645\u0644\u0641 \u0627\u0644\u0635\u0648\u062A\u064A:", {
        voiceId,
        storageKey: voice.storageKey,
        mimeType: voice.mimeType
      });
      const filePath = voice.storageKey.startsWith("uploads/") ? voice.storageKey : `uploads/${voice.storageKey}`;
      console.log("\u0645\u0633\u0627\u0631 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0646\u0647\u0627\u0626\u064A:", filePath);
      try {
        const fs8 = await import("fs");
        try {
          await fs8.promises.access(filePath);
        } catch (accessError) {
          console.error("\u0627\u0644\u0645\u0644\u0641 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F:", filePath, accessError);
          return res.status(404).json({ message: "\u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0635\u0648\u062A\u064A \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0639\u0644\u0649 \u0627\u0644\u0642\u0631\u0635" });
        }
        const stat = await fs8.promises.stat(filePath);
        const range = req.headers.range;
        if (range) {
          const fileSize = stat.size;
          const parts = range.replace(/bytes=/, "").split("-");
          const start = parseInt(parts[0], 10);
          const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;
          const chunksize = end - start + 1;
          const head = {
            "Content-Range": `bytes ${start}-${end}/${fileSize}`,
            "Accept-Ranges": "bytes",
            "Content-Length": chunksize,
            "Content-Type": voice.mimeType || "audio/ogg"
          };
          res.writeHead(206, head);
          const file = fs8.default.createReadStream(filePath, { start, end });
          file.pipe(res);
        } else {
          res.set({
            "Content-Type": voice.mimeType || "audio/ogg",
            "Content-Length": stat.size.toString(),
            "Cache-Control": "private, max-age=3600",
            "Accept-Ranges": "bytes"
          });
          const stream = fs8.default.createReadStream(filePath);
          stream.pipe(res);
        }
      } catch (fsError) {
        console.error("\u062E\u0637\u0623 \u0639\u0627\u0645 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0645\u0644\u0641:", fsError);
        return res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u0642\u0631\u0627\u0621\u0629 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0635\u0648\u062A\u064A" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0634\u063A\u064A\u0644 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0635\u0648\u062A\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062A\u0634\u063A\u064A\u0644 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0635\u0648\u062A\u064A" });
    }
  });
  app2.get("/api/voice/:voiceId/info", ensureAuth, async (req, res) => {
    try {
      const { voiceId } = req.params;
      const userId = req.user.id;
      const [voice] = await db.select({
        id: messageVoices.id,
        durationSeconds: messageVoices.durationSeconds,
        fileSizeBytes: messageVoices.fileSizeBytes,
        waveformPeaks: messageVoices.waveformPeaks,
        transcript: messageVoices.transcript,
        transcriptLang: messageVoices.transcriptLang,
        status: messageVoices.status,
        createdAt: messageVoices.createdAt,
        senderName: users.fullName
      }).from(messageVoices).leftJoin(users, eq10(messageVoices.senderId, users.id)).where(eq10(messageVoices.id, voiceId)).limit(1);
      if (!voice) {
        return res.status(404).json({ message: "\u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      }
      const hasAccess = await VoiceService.checkVoiceAccess(voice, userId);
      if (!hasAccess) {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629" });
      }
      res.json(voice);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/api/voice/search", ensureAuth, async (req, res) => {
    try {
      const { q, limit = 20 } = req.query;
      const userId = req.user.id;
      if (!q || typeof q !== "string") {
        return res.status(400).json({ message: "\u0646\u0635 \u0627\u0644\u0628\u062D\u062B \u0645\u0637\u0644\u0648\u0628" });
      }
      const results = await VoiceService.searchVoiceMessages(q, userId, parseInt(limit));
      res.json(results);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0628\u062D\u062B \u0641\u064A \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0635\u0648\u062A\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0628\u062D\u062B" });
    }
  });
  app2.delete("/api/voice/:voiceId", authMiddleware, async (req, res) => {
    try {
      const { voiceId } = req.params;
      const userId = req.user.id;
      const success = await VoiceService.deleteVoiceMessage(voiceId, userId);
      if (success) {
        res.json({ message: "\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629 \u0628\u0646\u062C\u0627\u062D" });
      } else {
        res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0630\u0641 \u0647\u0630\u0647 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629" });
      }
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0627\u0644\u0635\u0648\u062A\u064A\u0629" });
    }
  });
  app2.get("/api/voice/stats", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const stats = await VoiceService.getUsageStats(userId);
      res.json(stats);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u0635\u0648\u062A\u064A\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/api/admin/voice/settings", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const [user] = await db.select().from(users).where(eq10(users.id, userId)).limit(1);
      if (!user || user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629" });
      }
      const [settings] = await db.select().from(voiceSettings).limit(1);
      res.json(settings || {
        maxDurationSeconds: 120,
        maxFileSizeMb: 10,
        enabled: true,
        transcriptionEnabled: true,
        allowedMimeTypes: ["audio/ogg", "audio/webm", "audio/mpeg"]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0635\u0648\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/me/avatar/init", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { mime, size } = req.body;
      const allowedTypes = ["image/jpeg", "image/png", "image/webp"];
      if (!allowedTypes.includes(mime)) {
        return res.status(400).json({
          message: "\u0646\u0648\u0639 \u0627\u0644\u0645\u0644\u0641 \u063A\u064A\u0631 \u0645\u062F\u0639\u0648\u0645. \u0627\u0633\u062A\u062E\u062F\u0645 \u0635\u0648\u0631 \u0628\u0635\u064A\u063A\u0629 JPEG \u0623\u0648 PNG \u0623\u0648 WebP"
        });
      }
      const maxSize = 2 * 1024 * 1024;
      if (size > maxSize) {
        return res.status(400).json({
          message: "\u062D\u062C\u0645 \u0627\u0644\u0645\u0644\u0641 \u0643\u0628\u064A\u0631 \u062C\u062F\u0627\u064B. \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 2MB"
        });
      }
      const objectStorageService = new ObjectStorageService();
      const storageKey = `avatars/${userId}/${Date.now()}-${crypto2.randomUUID()}`;
      const uploadUrl = await objectStorageService.getObjectEntityUploadURL();
      res.json({
        uploadUrl,
        storageKey
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0647\u064A\u0626\u0629 \u0631\u0641\u0639 \u0627\u0644\u0635\u0648\u0631\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.post("/api/me/avatar/finalize", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { storageKey } = req.body;
      if (!storageKey) {
        return res.status(400).json({ message: "\u0645\u0641\u062A\u0627\u062D \u0627\u0644\u062A\u062E\u0632\u064A\u0646 \u0645\u0637\u0644\u0648\u0628" });
      }
      const avatarUrl = `/objects/${storageKey}`;
      await db.update(users).set({ avatarUrl }).where(eq10(users.id, userId));
      res.json({
        avatarUrl,
        message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0635\u0648\u0631\u0629 \u0627\u0644\u0634\u062E\u0635\u064A\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0647\u0627\u0621 \u0631\u0641\u0639 \u0627\u0644\u0635\u0648\u0631\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/objects/:storageKey(*)", async (req, res) => {
    try {
      const storageKey = req.params.storageKey;
      const objectStorageService = new ObjectStorageService();
      const objectFile = await objectStorageService.getObjectEntityFile(`/objects/${storageKey}`);
      objectStorageService.downloadObject(objectFile, res);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0635\u0648\u0631\u0629:", error);
      if (error instanceof Error && error.message === "Object not found") {
        res.status(404).json({ message: "\u0627\u0644\u0635\u0648\u0631\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629" });
      } else {
        res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
      }
    }
  });
  app2.get("/api/me", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      console.log("\u{1F50D} \u062C\u0644\u0628 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", userId);
      const user = await storage.getUser(userId);
      console.log("\u{1F464} \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", user ? "\u0645\u0648\u062C\u0648\u062F\u0629" : "\u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629");
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const [userSettingsData] = await db.select().from(userSettings).where(eq10(userSettings.userId, userId)).limit(1);
      console.log("\u2699\uFE0F \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", userSettingsData ? "\u0645\u0648\u062C\u0648\u062F\u0629" : "\u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629");
      console.log("\u{1F4CA} \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A:", userSettingsData);
      const responseData = {
        id: user.id,
        fullName: user.fullName,
        email: user.email,
        phone: user.phone,
        city: user.city,
        avatarUrl: user.avatarUrl,
        settings: userSettingsData || null
      };
      console.log("\u{1F4E4} \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0631\u0633\u0644\u0629:", responseData);
      res.json(responseData);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.patch("/api/me/profile", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const profileData = updateUserProfileSchema.parse(req.body);
      await db.update(users).set({
        fullName: profileData.fullName,
        phone: profileData.phone,
        city: profileData.city
      }).where(eq10(users.id, userId));
      res.json({ message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0634\u062E\u0635\u064A \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0634\u062E\u0635\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.patch("/api/me/password", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const passwordData = changePasswordSchema.parse(req.body);
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const isValidPassword = await bcrypt2.compare(passwordData.currentPassword, user.password);
      if (!isValidPassword) {
        return res.status(400).json({ message: "\u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0627\u0644\u062D\u0627\u0644\u064A\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
      }
      const hashedNewPassword = await bcrypt2.hash(passwordData.newPassword, 10);
      await db.update(users).set({ password: hashedNewPassword }).where(eq10(users.id, userId));
      res.json({ message: "\u062A\u0645 \u062A\u063A\u064A\u064A\u0631 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u063A\u064A\u064A\u0631 \u0643\u0644\u0645\u0629 \u0627\u0644\u0645\u0631\u0648\u0631:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.patch("/api/me/settings", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const settingsData = insertUserSettingsSchema.parse(req.body);
      const [existingSettings] = await db.select().from(userSettings).where(eq10(userSettings.userId, userId)).limit(1);
      if (existingSettings) {
        await db.update(userSettings).set({
          language: settingsData.language,
          theme: settingsData.theme,
          timezone: settingsData.timezone,
          baseCurrency: settingsData.baseCurrency,
          notifications: settingsData.notifications
        }).where(eq10(userSettings.userId, userId));
      } else {
        await db.insert(userSettings).values({
          userId,
          language: settingsData.language,
          theme: settingsData.theme,
          timezone: settingsData.timezone,
          baseCurrency: settingsData.baseCurrency,
          notifications: settingsData.notifications
        });
      }
      res.json({ message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062E\u0627\u062F\u0645" });
    }
  });
  app2.get("/api/admin/message-monitoring/private-chats", authMiddleware, async (req, res) => {
    try {
      const { email } = req.user;
      if (email !== "ss73ss73ss73@gmail.com") {
        return res.status(403).json({
          error: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D - \u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629 \u0645\u062E\u0635\u0635\u0629 \u0644\u0644\u0645\u0634\u0631\u0641 \u0627\u0644\u0639\u0627\u0645 \u0641\u0642\u0637"
        });
      }
      console.log("\u{1F50D} \u062C\u0644\u0628 \u0645\u0644\u062E\u0635 \u0627\u0644\u062F\u0631\u062F\u0634\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629...");
      const privateChatsSummary = await db.select({
        id: privateChats.id,
        user1Id: privateChats.user1Id,
        user2Id: privateChats.user2Id,
        user1Name: sql12`u1.full_name`,
        user2Name: sql12`u2.full_name`,
        user1AccountNumber: sql12`u1.account_number`,
        user2AccountNumber: sql12`u2.account_number`,
        lastMessageAt: privateChats.lastMessageAt,
        messageCount: sql12`COUNT(pm.id)::int`
      }).from(privateChats).leftJoin(sql12`users u1`, eq10(privateChats.user1Id, sql12`u1.id`)).leftJoin(sql12`users u2`, eq10(privateChats.user2Id, sql12`u2.id`)).leftJoin(privateMessages, eq10(privateChats.id, privateMessages.chatId)).groupBy(
        privateChats.id,
        privateChats.user1Id,
        privateChats.user2Id,
        sql12`u1.full_name`,
        sql12`u2.full_name`,
        sql12`u1.account_number`,
        sql12`u2.account_number`,
        privateChats.lastMessageAt
      ).orderBy(desc8(privateChats.lastMessageAt));
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${privateChatsSummary.length} \u062F\u0631\u062F\u0634\u0629 \u062E\u0627\u0635\u0629`);
      res.json(privateChatsSummary);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u062F\u0631\u062F\u0634\u0627\u062A \u0627\u0644\u062E\u0627\u0635\u0629:", error);
      res.status(500).json({ error: "\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.get("/api/admin/message-monitoring/public-chats", authMiddleware, async (req, res) => {
    try {
      const { email } = req.user;
      if (email !== "ss73ss73ss73@gmail.com") {
        return res.status(403).json({
          error: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D - \u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629 \u0645\u062E\u0635\u0635\u0629 \u0644\u0644\u0645\u0634\u0631\u0641 \u0627\u0644\u0639\u0627\u0645 \u0641\u0642\u0637"
        });
      }
      console.log("\u{1F50D} \u062C\u0644\u0628 \u0645\u0644\u062E\u0635 \u0627\u0644\u063A\u0631\u0641 \u0627\u0644\u0639\u0627\u0645\u0629...");
      const publicRooms = await db.select({
        id: chatRooms.id,
        roomName: chatRooms.name,
        description: chatRooms.description,
        isActive: chatRooms.isPublic,
        messageCount: sql12`COUNT(cm.id)::int`,
        participantCount: sql12`0`,
        lastMessageAt: sql12`COALESCE(MAX(cm.created_at), ${chatRooms.createdAt})`
      }).from(chatRooms).leftJoin(sql12`chat_messages cm`, eq10(chatRooms.id, sql12`cm.room_id`)).groupBy(chatRooms.id, chatRooms.name, chatRooms.description, chatRooms.isPublic, chatRooms.createdAt).orderBy(desc8(sql12`COALESCE(MAX(cm.created_at), ${chatRooms.createdAt})`));
      const groupChatsData = await db.select({
        id: groupChats.id,
        roomName: groupChats.name,
        description: groupChats.description,
        isActive: sql12`true`,
        messageCount: sql12`COUNT(gm.id)::int`,
        participantCount: sql12`0`,
        lastMessageAt: sql12`COALESCE(MAX(gm.created_at), ${groupChats.createdAt})`
      }).from(groupChats).leftJoin(sql12`group_messages gm`, eq10(groupChats.id, sql12`gm.group_id`)).groupBy(groupChats.id, groupChats.name, groupChats.description, groupChats.createdAt).orderBy(desc8(sql12`COALESCE(MAX(gm.created_at), ${groupChats.createdAt})`));
      const allPublicChats = [
        ...publicRooms.map((room) => ({
          ...room,
          type: "public_room"
        })),
        ...groupChatsData.map((group) => ({
          ...group,
          type: "group_chat"
        }))
      ];
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${allPublicChats.length} \u063A\u0631\u0641\u0629 \u0639\u0627\u0645\u0629/\u0645\u062C\u0645\u0648\u0639\u0629`);
      res.json(allPublicChats);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u063A\u0631\u0641 \u0627\u0644\u0639\u0627\u0645\u0629:", error);
      res.status(500).json({ error: "\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.get("/api/admin/message-monitoring/messages/:chatId", authMiddleware, async (req, res) => {
    try {
      const { email } = req.user;
      const { chatId } = req.params;
      const { chatType, startDate, endDate, keyword, sender } = req.query;
      if (email !== "ss73ss73ss73@gmail.com") {
        return res.status(403).json({
          error: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D - \u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629 \u0645\u062E\u0635\u0635\u0629 \u0644\u0644\u0645\u0634\u0631\u0641 \u0627\u0644\u0639\u0627\u0645 \u0641\u0642\u0637"
        });
      }
      console.log(`\u{1F50D} \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 ${chatType} \u0644\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId}...`);
      let messages = [];
      if (chatType === "private") {
        const whereConditions = [eq10(privateMessages.chatId, parseInt(chatId))];
        if (startDate) {
          whereConditions.push(gte5(privateMessages.createdAt, new Date(startDate)));
        }
        if (endDate) {
          whereConditions.push(lte4(privateMessages.createdAt, new Date(endDate)));
        }
        if (keyword) {
          whereConditions.push(like4(privateMessages.content, `%${keyword}%`));
        }
        messages = await db.select({
          id: privateMessages.id,
          senderId: privateMessages.senderId,
          senderName: users.fullName,
          senderAccountNumber: users.accountNumber,
          content: privateMessages.content,
          createdAt: privateMessages.createdAt,
          isEdited: privateMessages.isEdited,
          editedAt: privateMessages.editedAt,
          isDeleted: privateMessages.isDeleted,
          deletedAt: privateMessages.deletedAt,
          deletedBy: privateMessages.deletedBy,
          fileUrl: privateMessages.fileUrl,
          fileType: privateMessages.fileType,
          voiceId: privateMessages.voiceId,
          voiceDuration: privateMessages.voiceDuration
        }).from(privateMessages).leftJoin(users, eq10(privateMessages.senderId, users.id)).where(and9(...whereConditions)).orderBy(desc8(privateMessages.createdAt));
      } else if (chatType === "public") {
        const chatRoomExists = await db.select({ id: chatRooms.id }).from(chatRooms).where(eq10(chatRooms.id, parseInt(chatId))).limit(1);
        if (chatRoomExists.length > 0) {
          const whereConditions = [eq10(chatMessages.roomId, parseInt(chatId))];
          if (startDate) {
            whereConditions.push(gte5(chatMessages.createdAt, new Date(startDate)));
          }
          if (endDate) {
            whereConditions.push(lte4(chatMessages.createdAt, new Date(endDate)));
          }
          if (keyword) {
            whereConditions.push(like4(chatMessages.content, `%${keyword}%`));
          }
          messages = await db.select({
            id: chatMessages.id,
            senderId: chatMessages.senderId,
            senderName: users.fullName,
            senderAccountNumber: users.accountNumber,
            content: chatMessages.content,
            createdAt: chatMessages.createdAt,
            isEdited: chatMessages.isEdited,
            editedAt: chatMessages.editedAt,
            isDeleted: chatMessages.isDeleted,
            deletedAt: chatMessages.deletedAt,
            deletedBy: chatMessages.deletedBy,
            fileUrl: chatMessages.fileUrl,
            fileType: chatMessages.fileType,
            voiceId: chatMessages.voiceId,
            voiceDuration: chatMessages.voiceDuration
          }).from(chatMessages).leftJoin(users, eq10(chatMessages.senderId, users.id)).where(and9(...whereConditions)).orderBy(desc8(chatMessages.createdAt));
        } else {
          const whereConditions = [eq10(groupMessages.groupId, parseInt(chatId))];
          if (startDate) {
            whereConditions.push(gte5(groupMessages.createdAt, new Date(startDate)));
          }
          if (endDate) {
            whereConditions.push(lte4(groupMessages.createdAt, new Date(endDate)));
          }
          if (keyword) {
            whereConditions.push(like4(groupMessages.content, `%${keyword}%`));
          }
          messages = await db.select({
            id: groupMessages.id,
            senderId: groupMessages.senderId,
            senderName: users.fullName,
            senderAccountNumber: users.accountNumber,
            content: groupMessages.content,
            createdAt: groupMessages.createdAt,
            isEdited: groupMessages.isEdited,
            editedAt: groupMessages.editedAt,
            isDeleted: sql12`false`,
            deletedAt: sql12`null`,
            deletedBy: sql12`null`,
            fileUrl: groupMessages.fileUrl,
            fileType: groupMessages.fileType,
            voiceId: sql12`null`,
            voiceDuration: sql12`null`,
            groupId: groupMessages.groupId,
            groupName: groupChats.name
          }).from(groupMessages).leftJoin(users, eq10(groupMessages.senderId, users.id)).leftJoin(groupChats, eq10(groupMessages.groupId, groupChats.id)).where(and9(...whereConditions)).orderBy(desc8(groupMessages.createdAt));
        }
      }
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${messages.length} \u0631\u0633\u0627\u0644\u0629`);
      res.json(messages);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0631\u0633\u0627\u0626\u0644:", error);
      res.status(500).json({ error: "\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0631\u0633\u0627\u0626\u0644" });
    }
  });
  app2.post("/api/admin/message-monitoring/export", authMiddleware, async (req, res) => {
    try {
      const { email } = req.user;
      const { chatId, chatType, format, filter } = req.body;
      if (email !== "ss73ss73ss73@gmail.com") {
        return res.status(403).json({
          error: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D - \u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629 \u0645\u062E\u0635\u0635\u0629 \u0644\u0644\u0645\u0634\u0631\u0641 \u0627\u0644\u0639\u0627\u0645 \u0641\u0642\u0637"
        });
      }
      console.log(`\u{1F4E4} \u062A\u0635\u062F\u064A\u0631 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u062D\u0627\u062F\u062B\u0629 ${chatId} \u0628\u0635\u064A\u063A\u0629 ${format}...`);
      if (format === "csv") {
        const csvHeader = "\u0627\u0644\u0631\u0642\u0645,\u0627\u0644\u0645\u0631\u0633\u0644,\u0631\u0642\u0645 \u0627\u0644\u062D\u0633\u0627\u0628,\u0627\u0644\u0645\u062D\u062A\u0648\u0649,\u0627\u0644\u062A\u0627\u0631\u064A\u062E,\u0645\u0639\u062F\u0644\u0629,\u0645\u062D\u0630\u0648\u0641\u0629\n";
        const csvRows = `1,"\u0645\u062B\u0627\u0644","123","\u0645\u062B\u0627\u0644 \u0645\u062D\u062A\u0648\u0649","${(/* @__PURE__ */ new Date()).toLocaleString("ar-SA")}","\u0644\u0627","\u0644\u0627"`;
        const csvContent = csvHeader + csvRows;
        res.setHeader("Content-Type", "text/csv; charset=utf-8");
        res.setHeader("Content-Disposition", `attachment; filename=chat-${chatId}-${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.csv`);
        res.send("\uFEFF" + csvContent);
      } else {
        res.status(400).json({ error: "\u0635\u064A\u063A\u0629 \u062A\u0635\u062F\u064A\u0631 \u063A\u064A\u0631 \u0645\u062F\u0639\u0648\u0645\u0629" });
      }
      console.log(`\u2705 \u062A\u0645 \u062A\u0635\u062F\u064A\u0631 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0628\u0646\u062C\u0627\u062D`);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062A\u0635\u062F\u064A\u0631 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A:", error);
      res.status(500).json({ error: "\u062E\u0637\u0623 \u0641\u064A \u062A\u0635\u062F\u064A\u0631 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A" });
    }
  });
  app2.get("/api/chat/private-messages-all", authMiddleware, async (req, res) => {
    try {
      const { email } = req.user;
      if (email !== "ss73ss73ss73@gmail.com") {
        return res.status(403).json({
          error: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D - \u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629 \u0645\u062E\u0635\u0635\u0629 \u0644\u0644\u0645\u0634\u0631\u0641 \u0627\u0644\u0639\u0627\u0645 \u0641\u0642\u0637"
        });
      }
      console.log("\u{1F50D} \u062C\u0644\u0628 \u062C\u0645\u064A\u0639 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062E\u0627\u0635\u0629 \u0644\u0644\u0645\u0631\u0627\u0642\u0628\u0629...");
      const result = await pool.query(`
        SELECT 
          pm.id,
          pm.content,
          pm.sender_id as "senderId",
          s.full_name as "senderName",
          s.email as "senderEmail",
          CASE WHEN pc.user1_id = pm.sender_id THEN pc.user2_id ELSE pc.user1_id END as "receiverId",
          CASE WHEN pc.user1_id = pm.sender_id THEN r2.full_name ELSE r1.full_name END as "receiverName",
          CASE WHEN pc.user1_id = pm.sender_id THEN r2.email ELSE r1.email END as "receiverEmail",
          pm.created_at as "createdAt",
          COALESCE(pm.is_edited, false) as "isEdited",
          COALESCE(pm.is_deleted, false) as "isDeleted",
          pm.file_url as "fileUrl",
          pm.file_type as "fileType",
          'private' as type
        FROM private_messages pm
        JOIN private_chats pc ON pm.chat_id = pc.id
        JOIN users s ON pm.sender_id = s.id
        JOIN users r1 ON pc.user1_id = r1.id
        JOIN users r2 ON pc.user2_id = r2.id
        ORDER BY pm.created_at DESC
        LIMIT 100
      `);
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${result.rows.length} \u0631\u0633\u0627\u0644\u0629 \u062E\u0627\u0635\u0629`);
      res.json(result.rows);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062E\u0627\u0635\u0629:", error);
      res.status(500).json({ error: "\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0631\u0633\u0627\u0626\u0644 \u0627\u0644\u062E\u0627\u0635\u0629" });
    }
  });
  app2.get("/api/market/offers", authMiddleware, checkPageRestrictions("market"), async (req, res) => {
    try {
      console.log("\u{1F50D} \u062C\u0644\u0628 \u0627\u0644\u0639\u0631\u0648\u0636 \u0627\u0644\u0646\u0634\u0637\u0629 \u0645\u0646 \u0627\u0644\u0633\u0648\u0642...");
      const result = await pool.query(`
        SELECT 
          mo.id,
          mo.user_id as "userId",
          u.full_name as "userFullName",
          u.email as "userEmail",
          mo.side,
          mo.base_currency as "baseCurrency",
          mo.quote_currency as "quoteCurrency",
          mo.price,
          mo.min_amount as "minAmount",
          mo.max_amount as "maxAmount",
          mo.remaining_amount as "remainingAmount",
          mo.city,
          mo.deliver_type as "deliverType",
          mo.terms,
          mo.status,
          mo.created_at as "createdAt"
        FROM market_offers mo
        JOIN users u ON mo.user_id = u.id
        WHERE mo.status = 'open'
        ORDER BY mo.created_at DESC
        LIMIT 50
      `);
      const enhancedOffers = result.rows.map((offer) => ({
        ...offer,
        // Legacy field mappings for frontend compatibility
        offerType: offer.side,
        fromCurrency: offer.baseCurrency,
        toCurrency: offer.quoteCurrency,
        rate: parseFloat(offer.price),
        amount: offer.maxAmount,
        available: offer.remainingAmount
      }));
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${result.rows.length} \u0639\u0631\u0636`);
      res.json(enhancedOffers);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0639\u0631\u0648\u0636:", error);
      res.status(500).json({ error: "\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0639\u0631\u0648\u0636" });
    }
  });
  app2.post("/api/market/offers", authMiddleware, async (req, res) => {
    try {
      const { id: userId } = req.user;
      const {
        side,
        baseCurrency,
        quoteCurrency,
        price,
        minAmount,
        maxAmount,
        city,
        deliverType,
        terms
      } = req.body;
      console.log("\u{1F4DD} \u0625\u0646\u0634\u0627\u0621 \u0639\u0631\u0636 \u062C\u062F\u064A\u062F:", { side, baseCurrency, quoteCurrency, price });
      if (!side || !baseCurrency || !quoteCurrency || !price || !minAmount || !maxAmount) {
        return res.status(400).json({
          error: "\u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0645\u0637\u0644\u0648\u0628\u0629",
          message: "\u064A\u0631\u062C\u0649 \u0645\u0644\u0621 \u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629"
        });
      }
      if (parseFloat(price) <= 0) {
        return res.status(400).json({
          error: "\u0633\u0639\u0631 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D",
          message: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u0633\u0639\u0631 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0635\u0641\u0631"
        });
      }
      if (parseFloat(minAmount) <= 0 || parseFloat(maxAmount) <= 0) {
        return res.status(400).json({
          error: "\u0643\u0645\u064A\u0629 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D\u0629",
          message: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0643\u0645\u064A\u0629 \u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0635\u0641\u0631"
        });
      }
      if (parseFloat(minAmount) > parseFloat(maxAmount)) {
        return res.status(400).json({
          error: "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062D\u062F\u0648\u062F",
          message: "\u0627\u0644\u062D\u062F \u0627\u0644\u0623\u062F\u0646\u0649 \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0623\u0642\u0644 \u0645\u0646 \u0623\u0648 \u064A\u0633\u0627\u0648\u064A \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649"
        });
      }
      const result = await pool.query(`
        INSERT INTO market_offers (
          user_id, side, base_currency, quote_currency, price,
          min_amount, max_amount, remaining_amount, city, deliver_type, terms
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $7, $8, $9, $10)
        RETURNING id, created_at as "createdAt"
      `, [
        userId,
        side,
        baseCurrency,
        quoteCurrency,
        price,
        minAmount,
        maxAmount,
        city || null,
        deliverType || "internal_transfer",
        terms || null
      ]);
      const newOffer = result.rows[0];
      await pool.query(`
        INSERT INTO market_messages (user_id, type, offer_id, content)
        VALUES ($1, 'OFFER', $2, $3)
      `, [
        userId,
        newOffer.id,
        `\u0639\u0631\u0636 \u062C\u062F\u064A\u062F: ${side === "sell" ? "\u0628\u064A\u0639" : "\u0634\u0631\u0627\u0621"} ${baseCurrency}/${quoteCurrency} \u0628\u0633\u0639\u0631 ${price}`
      ]);
      console.log(`\u2705 \u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636 \u0631\u0642\u0645 ${newOffer.id} \u0628\u0646\u062C\u0627\u062D`);
      res.json({
        success: true,
        id: newOffer.id,
        side,
        baseCurrency,
        quoteCurrency,
        price,
        minAmount,
        maxAmount,
        city,
        deliverType: deliverType || "internal_transfer",
        terms,
        createdAt: newOffer.createdAt,
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636:", error);
      res.status(500).json({
        error: "\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636",
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0639\u0631\u0636\u060C \u064A\u0631\u062C\u0649 \u0627\u0644\u0645\u062D\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649"
      });
    }
  });
  app2.get("/api/market/messages", authMiddleware, checkPageRestrictions("market"), async (req, res) => {
    try {
      console.log("\u{1F50D} \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 \u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u0633\u0648\u0642...");
      const result = await pool.query(`
        SELECT 
          mm.id,
          mm.user_id as "userId",
          u.full_name as "userFullName",
          u.email as "userEmail",
          mm.type,
          mm.content,
          mm.offer_id as "offerId",
          mm.bid_id as "bidId",
          mm.created_at as "createdAt",
          -- \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0639\u0631\u0636 \u0625\u0646 \u0648\u062C\u062F
          mo.side as "offerSide",
          mo.base_currency as "offerBaseCurrency",
          mo.quote_currency as "offerQuoteCurrency",
          mo.price as "offerPrice"
        FROM market_messages mm
        LEFT JOIN users u ON mm.user_id = u.id
        LEFT JOIN market_offers mo ON mm.offer_id = mo.id
        WHERE mm.channel_id = 1  -- \u0627\u0644\u063A\u0631\u0641\u0629 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629
        ORDER BY mm.created_at ASC
        LIMIT 50
      `);
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${result.rows.length} \u0631\u0633\u0627\u0644\u0629 \u0645\u0646 \u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u0633\u0648\u0642`);
      res.json(result.rows);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0631\u0633\u0627\u0626\u0644 \u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u0633\u0648\u0642:", error);
      res.status(500).json({ error: "\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0631\u0633\u0627\u0626\u0644" });
    }
  });
  app2.post("/api/market/messages", authMiddleware, async (req, res) => {
    try {
      const { id: userId } = req.user;
      const { content } = req.body;
      console.log("\u{1F4DD} \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u062C\u062F\u064A\u062F\u0629 \u0625\u0644\u0649 \u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u0633\u0648\u0642:", { userId, content });
      if (!content || content.trim().length === 0) {
        return res.status(400).json({
          error: "\u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0645\u0637\u0644\u0648\u0628",
          message: "\u064A\u0631\u062C\u0649 \u0643\u062A\u0627\u0628\u0629 \u0645\u062D\u062A\u0648\u0649 \u0627\u0644\u0631\u0633\u0627\u0644\u0629"
        });
      }
      const result = await pool.query(`
        INSERT INTO market_messages (user_id, type, content, channel_id)
        VALUES ($1, 'MESSAGE', $2, 1)
        RETURNING id, created_at as "createdAt"
      `, [userId, content.trim()]);
      const newMessage = result.rows[0];
      console.log(`\u2705 \u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0631\u0642\u0645 ${newMessage.id} \u0628\u0646\u062C\u0627\u062D`);
      res.json({
        success: true,
        messageId: newMessage.id,
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0631\u0633\u0627\u0644\u0629 \u062F\u0631\u062F\u0634\u0629 \u0627\u0644\u0633\u0648\u0642:", error);
      res.status(500).json({
        error: "\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629",
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0633\u0627\u0644\u0629\u060C \u064A\u0631\u062C\u0649 \u0627\u0644\u0645\u062D\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649"
      });
    }
  });
  app2.post("/api/market/execute-trade", authMiddleware, async (req, res) => {
    try {
      const { id: buyerId } = req.user;
      const { offerId, amount, notes } = req.body;
      console.log("\u{1F4B0} \u062A\u0646\u0641\u064A\u0630 \u0635\u0641\u0642\u0629 \u0641\u0648\u0631\u064A\u0629:", { buyerId, offerId, amount, notes });
      if (!offerId || !amount || parseFloat(amount) <= 0) {
        return res.status(400).json({
          success: false,
          message: "\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0635\u0641\u0642\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629"
        });
      }
      const offerResult = await pool.query(`
        SELECT 
          mo.*,
          u.full_name as "userFullName",
          u.account_number as "userAccountNumber"
        FROM market_offers mo
        LEFT JOIN users u ON mo.user_id = u.id
        WHERE mo.id = $1 AND mo.status = 'open'
      `, [offerId]);
      if (offerResult.rows.length === 0) {
        console.log("\u274C \u0627\u0644\u0639\u0631\u0636 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0623\u0648 \u0645\u063A\u0644\u0642 - \u0645\u0639\u0631\u0641 \u0627\u0644\u0639\u0631\u0636:", offerId);
        return res.status(404).json({
          success: false,
          message: "\u0627\u0644\u0639\u0631\u0636 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F \u0623\u0648 \u0645\u063A\u0644\u0642"
        });
      }
      const offer = offerResult.rows[0];
      const tradeAmount = parseFloat(amount);
      if (tradeAmount < parseFloat(offer.min_amount) || tradeAmount > parseFloat(offer.max_amount)) {
        return res.status(400).json({
          success: false,
          message: `\u0627\u0644\u0645\u0628\u0644\u063A \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0628\u064A\u0646 ${offer.min_amount} \u0648 ${offer.max_amount} ${offer.base_currency}`
        });
      }
      if (tradeAmount > parseFloat(offer.remaining_amount)) {
        return res.status(400).json({
          success: false,
          message: `\u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0645\u062A\u0628\u0642\u064A \u0641\u064A \u0627\u0644\u0639\u0631\u0636 \u0647\u0648 ${offer.remaining_amount} ${offer.base_currency}`
        });
      }
      if (offer.user_id === buyerId) {
        return res.status(400).json({
          success: false,
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646\u0643 \u0627\u0644\u062A\u062F\u0627\u0648\u0644 \u0645\u0639 \u0639\u0631\u0636\u0643 \u0627\u0644\u062E\u0627\u0635"
        });
      }
      const totalCost = tradeAmount * parseFloat(offer.price);
      const currency = offer.side === "sell" ? offer.quote_currency : offer.base_currency;
      console.log("\u{1F4B0} \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0639\u0631\u0636:", {
        offerId: offer.id,
        side: offer.side,
        baseCurrency: offer.base_currency,
        quoteCurrency: offer.quote_currency,
        price: offer.price,
        tradeAmount,
        totalCost,
        paymentCurrency: currency
      });
      const buyerBalanceResult = await pool.query(`
        SELECT amount FROM balances WHERE user_id = $1 AND currency = $2
      `, [buyerId, currency]);
      const buyerBalance = buyerBalanceResult.rows.length > 0 ? parseFloat(buyerBalanceResult.rows[0].amount) : 0;
      if (buyerBalance < totalCost) {
        return res.status(400).json({
          success: false,
          message: `\u0631\u0635\u064A\u062F ${currency} \u063A\u064A\u0631 \u0643\u0627\u0641\u064A. \u0627\u0644\u0645\u0637\u0644\u0648\u0628: ${totalCost.toFixed(2)}\u060C \u0627\u0644\u0645\u062A\u0627\u062D: ${buyerBalance.toFixed(2)}`
        });
      }
      await pool.query("BEGIN");
      try {
        await pool.query(`
          UPDATE balances 
          SET amount = amount - $1
          WHERE user_id = $2 AND currency = $3
        `, [totalCost, buyerId, currency]);
        const buyerCurrency = offer.side === "sell" ? offer.base_currency : offer.quote_currency;
        const buyerReceiveAmount = offer.side === "sell" ? tradeAmount : totalCost;
        console.log("\u{1F504} \u062A\u0641\u0627\u0635\u064A\u0644 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0623\u0631\u0635\u062F\u0629:", {
          buyerCurrency,
          buyerReceiveAmount,
          sellerId: offer.user_id,
          paymentCurrency: currency,
          paymentAmount: totalCost
        });
        const sellerBalanceCheck = await pool.query(`
          SELECT id FROM balances WHERE user_id = $1 AND currency = $2
        `, [offer.user_id, currency]);
        if (sellerBalanceCheck.rows.length === 0) {
          await pool.query(`
            INSERT INTO balances (user_id, currency, amount)
            VALUES ($1, $2, $3)
          `, [offer.user_id, currency, totalCost]);
        } else {
          await pool.query(`
            UPDATE balances 
            SET amount = amount + $1
            WHERE user_id = $2 AND currency = $3
          `, [totalCost, offer.user_id, currency]);
        }
        const buyerReceiveCurrencyCheck = await pool.query(`
          SELECT id FROM balances WHERE user_id = $1 AND currency = $2
        `, [buyerId, buyerCurrency]);
        if (buyerReceiveCurrencyCheck.rows.length === 0) {
          await pool.query(`
            INSERT INTO balances (user_id, currency, amount)
            VALUES ($1, $2, $3)
          `, [buyerId, buyerCurrency, buyerReceiveAmount]);
        } else {
          await pool.query(`
            UPDATE balances 
            SET amount = amount + $1
            WHERE user_id = $2 AND currency = $3
          `, [buyerReceiveAmount, buyerId, buyerCurrency]);
        }
        const newRemainingAmount = parseFloat(offer.remaining_amount) - tradeAmount;
        const newStatus = newRemainingAmount <= 0 ? "cancelled" : "open";
        await pool.query(`
          UPDATE market_offers 
          SET remaining_amount = $1, 
              status = $2,
              updated_at = CURRENT_TIMESTAMP
          WHERE id = $3
        `, [newRemainingAmount.toString(), newStatus, offerId]);
        const marketTransactionResult = await pool.query(`
          INSERT INTO market_transactions (
            buyer_id, offer_id, amount, total_cost, commission, created_at
          ) VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
          RETURNING id
        `, [buyerId, offerId, tradeAmount.toString(), totalCost.toString(), "0"]);
        const marketTransactionId = marketTransactionResult.rows[0].id;
        await pool.query(`
          INSERT INTO transactions (
            user_id, type, amount, currency, description, 
            reference_number, created_at
          ) VALUES ($1, 'market_trade_buy', $2, $3, $4, $5, CURRENT_TIMESTAMP)
        `, [
          buyerId,
          totalCost.toString(),
          currency,
          `\u0634\u0631\u0627\u0621 ${tradeAmount} ${buyerCurrency} \u0628\u0633\u0639\u0631 ${offer.price}`,
          `MKT-${marketTransactionId}`
        ]);
        await pool.query(`
          INSERT INTO transactions (
            user_id, type, amount, currency, description, 
            reference_number, created_at
          ) VALUES ($1, 'market_trade_sell', $2, $3, $4, $5, CURRENT_TIMESTAMP)
        `, [
          offer.user_id,
          buyerReceiveAmount.toString(),
          buyerCurrency,
          `\u0628\u064A\u0639 ${tradeAmount} ${buyerCurrency} \u0628\u0633\u0639\u0631 ${offer.price}`,
          `MKT-${marketTransactionId}`
        ]);
        const confirmationMessage = `\u2705 \u062A\u0645\u062A \u0627\u0644\u0635\u0641\u0642\u0629 \u0628\u0646\u062C\u0627\u062D!
\u{1F4B0} \u0627\u0644\u0645\u0628\u0644\u063A: ${tradeAmount} ${buyerCurrency}
\u{1F4B1} \u0627\u0644\u0633\u0639\u0631: ${offer.price} ${currency}
\u{1F4B5} \u0627\u0644\u062A\u0643\u0644\u0641\u0629: ${totalCost.toFixed(2)} ${currency}
\u{1F464} \u0627\u0644\u0628\u0627\u0626\u0639: ${offer.userFullName}
\u{1F3E6} \u0631\u0642\u0645 \u0627\u0644\u062D\u0633\u0627\u0628: ${offer.userAccountNumber}
\u{1F4C4} \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u062C\u0639\u064A: MKT-${marketTransactionId}`;
        await pool.query(`
          INSERT INTO market_messages (user_id, type, content, channel_id)
          VALUES ($1, 'DEAL', $2, 1)
        `, [buyerId, confirmationMessage]);
        try {
          const commissionLogsResult = await db.select().from(commissionLogs).where(and9(
            eq10(commissionLogs.sourceId, offerId),
            eq10(commissionLogs.sourceType, "market_offer"),
            eq10(commissionLogs.action, "suspended")
          )).orderBy(desc8(commissionLogs.createdAt)).limit(1);
          if (commissionLogsResult.length > 0) {
            const log2 = commissionLogsResult[0];
            const totalOfferAmount = parseFloat(offer.maxAmount);
            const soldAmount = parseFloat(amount);
            const tradeRatio = soldAmount / totalOfferAmount;
            const proportionalCommission = parseFloat(log2.commissionAmount) * tradeRatio;
            console.log(`\u{1F4CA} \u062D\u0633\u0627\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u062A\u0646\u0627\u0633\u0628\u064A\u0629: ${log2.commissionAmount} \xD7 (${soldAmount}/${totalOfferAmount}) = ${proportionalCommission.toFixed(6)}`);
            let finalCommissionToSystem = proportionalCommission;
            let referralRewardAmount = 0;
            const referralCheck = await pool.query(`
              SELECT u.referred_by, s.enabled as referral_enabled
              FROM users u
              CROSS JOIN (SELECT value->'enabled' as enabled FROM settings WHERE key = 'referral.enabled' LIMIT 1) s
              WHERE u.id = $1 AND u.referred_by IS NOT NULL
            `, [buyerId]);
            if (referralCheck.rows.length > 0 && referralCheck.rows[0].referral_enabled === true) {
              referralRewardAmount = log2.commissionCurrency === "USD" ? 5 : log2.commissionCurrency === "LYD" ? 25 : 5;
              if (referralRewardAmount > proportionalCommission) {
                referralRewardAmount = proportionalCommission * 0.5;
              }
              finalCommissionToSystem = proportionalCommission - referralRewardAmount;
              console.log(`\u{1F381} \u062A\u0645 \u062D\u0633\u0627\u0628 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629: ${referralRewardAmount.toFixed(6)} ${log2.commissionCurrency}`);
              console.log(`\u{1F4B0} \u0635\u0627\u0641\u064A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u0644\u0646\u0638\u0627\u0645: ${finalCommissionToSystem.toFixed(6)} ${log2.commissionCurrency}`);
            }
            await storage.addCommissionPoolTransaction({
              sourceType: "user",
              sourceId: offer.user_id,
              sourceName: `\u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 \u0628\u064A\u0639 (\u0628\u0639\u062F \u062E\u0635\u0645 \u0627\u0644\u0625\u062D\u0627\u0644\u0629): ${offer.base_currency}\u2192${offer.quote_currency}`,
              currencyCode: log2.commissionCurrency,
              amount: finalCommissionToSystem.toFixed(6),
              transactionType: "credit",
              description: `\u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0633\u0648\u0642 \u0628\u0639\u062F \u062E\u0635\u0645 \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 ${referralRewardAmount.toFixed(6)} - \u0627\u0644\u0628\u0627\u0626\u0639: ${offer.user_id}, \u0627\u0644\u0645\u0634\u062A\u0631\u064A: ${buyerId}`
            });
            console.log(`\u{1F3E6} \u062A\u0645 \u0625\u0636\u0627\u0641\u0629 \u0635\u0627\u0641\u064A \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0644\u062D\u0633\u0627\u0628 \u0627\u0644\u0646\u0638\u0627\u0645: ${finalCommissionToSystem.toFixed(6)} ${log2.commissionCurrency}`);
            await db.insert(commissionLogs).values({
              userId: offer.user_id,
              userName: log2.userName,
              offerType: log2.offerType,
              commissionAmount: finalCommissionToSystem.toFixed(6),
              commissionCurrency: log2.commissionCurrency,
              sourceId: offerId,
              sourceType: "market_offer",
              action: "transferred",
              description: `\u0635\u0627\u0641\u064A \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0628\u0639\u062F \u062E\u0635\u0645 \u0625\u062D\u0627\u0644\u0629 ${referralRewardAmount.toFixed(6)} \u0645\u0646 ${proportionalCommission.toFixed(6)} - ${offer.base_currency}\u2192${offer.quote_currency}`
            });
            const buyerCommissionRate = 0.5;
            const buyerCommission = proportionalCommission * buyerCommissionRate;
            const buyerResult = await pool.query(`SELECT full_name FROM users WHERE id = $1`, [buyerId]);
            const buyerName = buyerResult.rows[0]?.full_name || "\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641";
            await db.insert(commissionLogs).values({
              userId: buyerId,
              userName: buyerName,
              offerType: "buy",
              commissionAmount: buyerCommission.toFixed(6),
              commissionCurrency: log2.commissionCurrency,
              sourceId: offerId,
              sourceType: "market_transaction",
              action: "earned",
              description: `\u0639\u0645\u0648\u0644\u0629 \u0645\u0643\u062A\u0633\u0628\u0629 \u0645\u0646 \u0634\u0631\u0627\u0621: ${offer.base_currency}\u2192${offer.quote_currency}, \u0627\u0644\u0645\u0628\u0644\u063A: ${tradeAmount}`
            });
            console.log(`\u{1F4B0} \u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0639\u0645\u0648\u0644\u0629 \u0645\u0643\u062A\u0633\u0628\u0629 \u0644\u0644\u0645\u0634\u062A\u0631\u064A ${buyerId}: ${buyerCommission.toFixed(6)} ${log2.commissionCurrency}`);
            if (referralRewardAmount > 0 && referralCheck.rows.length > 0) {
              try {
                const referrerId = referralCheck.rows[0].referred_by;
                await pool.query(`
                  INSERT INTO referral_balances (user_id, currency, amount)
                  VALUES ($1, $2, $3)
                  ON CONFLICT (user_id, currency) 
                  DO UPDATE SET amount = referral_balances.amount + EXCLUDED.amount
                `, [referrerId, log2.commissionCurrency, referralRewardAmount]);
                await pool.query(`
                  INSERT INTO account_statements (
                    user_id, type, amount, currency, description, 
                    reference_number, created_at
                  ) VALUES ($1, 'referral_reward_received', $2, $3, $4, $5, CURRENT_TIMESTAMP)
                `, [
                  referrerId,
                  referralRewardAmount,
                  log2.commissionCurrency,
                  `\u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 \u0645\u062E\u0635\u0648\u0645\u0629 \u0645\u0646 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0633\u0648\u0642 - \u0645\u0639\u0627\u0645\u0644\u0629 ${marketTransactionId}`,
                  `REF-${marketTransactionId}`
                ]);
                const referrerInfo = await pool.query(`SELECT full_name FROM users WHERE id = $1`, [referrerId]);
                const buyerInfo = await pool.query(`SELECT full_name FROM users WHERE id = $1`, [buyerId]);
                if (referrerInfo.rows.length > 0) {
                  await pool.query(`
                    INSERT INTO user_notifications (user_id, title, body, type, is_read, created_at)
                    VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
                  `, [
                    referrerId,
                    "\u{1F381} \u0645\u0643\u0627\u0641\u0623\u0629 \u0625\u062D\u0627\u0644\u0629 \u0645\u062E\u0635\u0648\u0645\u0629 \u0645\u0646 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0633\u0648\u0642",
                    `\u062D\u0635\u0644\u062A \u0639\u0644\u0649 ${referralRewardAmount.toFixed(2)} ${log2.commissionCurrency} \u0645\u062E\u0635\u0648\u0645\u0629 \u0645\u0646 \u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0646\u0638\u0627\u0645 \u0639\u0628\u0631 ${buyerInfo.rows[0]?.full_name || "\u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u062D\u0627\u0644"}`,
                    "success",
                    false
                  ]);
                }
                console.log(`\u2705 \u062A\u0645 \u062A\u0648\u0632\u064A\u0639 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0628\u0639\u062F \u062E\u0635\u0645\u0647\u0627 \u0645\u0646 \u0627\u0644\u0646\u0638\u0627\u0645: ${referralRewardAmount.toFixed(6)} ${log2.commissionCurrency} \u0644\u0644\u0645\u064F\u062D\u064A\u0644 ${referrerId}`);
              } catch (error) {
                console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0648\u0632\u064A\u0639 \u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
              }
            }
          } else {
            console.log(`\u26A0\uFE0F \u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0633\u062C\u0644 \u0639\u0645\u0648\u0644\u0629 \u0645\u0639\u0644\u0642\u0629 \u0644\u0644\u0639\u0631\u0636 ${offerId}`);
          }
        } catch (error) {
          console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0627\u0644\u0645\u0639\u0644\u0642\u0629 \u0644\u0644\u0646\u0638\u0627\u0645:", error);
        }
        await pool.query("COMMIT");
        console.log(`\u2705 \u062A\u0645\u062A \u0627\u0644\u0635\u0641\u0642\u0629 \u0631\u0642\u0645 ${marketTransactionId} \u0628\u0646\u062C\u0627\u062D`);
        res.json({
          success: true,
          message: "\u062A\u0645\u062A \u0627\u0644\u0635\u0641\u0642\u0629 \u0628\u0646\u062C\u0627\u062D",
          transactionId: marketTransactionId,
          referenceNumber: `MKT-${marketTransactionId}`,
          details: {
            amount: tradeAmount,
            price: offer.price,
            totalCost: totalCost.toFixed(2),
            currency,
            buyerCurrency,
            sellerName: offer.userFullName,
            sellerAccount: offer.userAccountNumber
          }
        });
      } catch (innerError) {
        await pool.query("ROLLBACK");
        throw innerError;
      }
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u0635\u0641\u0642\u0629:", error);
      res.status(500).json({
        success: false,
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u0646\u0641\u064A\u0630 \u0627\u0644\u0635\u0641\u0642\u0629"
      });
    }
  });
  app2.post("/api/upgrade/external-transfer/request", authMiddleware, async (req, res) => {
    try {
      const { countryId, cityId, cityNameManual, requestedLimits, message, documents } = req.body;
      const user = await storage.getUser(req.user.id);
      if (!user?.verified) {
        return res.status(400).json({
          ok: false,
          code: "ACCOUNT_NOT_VERIFIED",
          message: "\u064A\u062C\u0628 \u062A\u0648\u062B\u064A\u0642 \u0627\u0644\u062D\u0633\u0627\u0628 \u0623\u0648\u0644\u0627\u064B \u0642\u0628\u0644 \u0637\u0644\u0628 \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u062E\u0627\u0631\u062C\u064A\u0629. \u064A\u0631\u062C\u0649 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0645\u0633\u062A\u0646\u062F\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629 \u0644\u0644\u062A\u0648\u062B\u064A\u0642."
        });
      }
      const existingRequests = await storage.getExternalTransferRequestsByUser(req.user.id);
      const pendingRequest = existingRequests.find((r) => r.status === "pending");
      if (pendingRequest) {
        return res.status(400).json({
          ok: false,
          code: "PENDING_REQUEST_EXISTS",
          message: "\u0644\u062F\u064A\u0643 \u0637\u0644\u0628 \u0642\u064A\u062F \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629 \u0628\u0627\u0644\u0641\u0639\u0644"
        });
      }
      let countryName = "";
      let cityName = "";
      if (countryId) {
        const country = await storage.getCountryById(countryId);
        countryName = country?.name || "";
      }
      if (cityId) {
        const city = await storage.getCityById(cityId);
        cityName = city?.nameAr || "";
      } else if (cityNameManual) {
        cityName = cityNameManual;
      }
      const request = await storage.createExternalTransferRequest({
        userId: req.user.id,
        fullName: user.fullName,
        // إضافة الاسم الكامل المطلوب
        phone: user.phone || user.email || "",
        city: `${countryName} - ${cityName}`,
        requestType: "external_transfer",
        // إضافة نوع الطلب
        requestedLimits,
        message,
        documents
      });
      res.status(201).json({
        ok: true,
        status: "pending",
        requestId: request.id,
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0637\u0644\u0628 \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0637\u0644\u0628" });
    }
  });
  app2.get("/api/upgrade/external-transfer/my-requests", authMiddleware, async (req, res) => {
    try {
      const requests = await storage.getExternalTransferRequestsByUser(req.user.id);
      res.json(requests);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0637\u0644\u0628\u0627\u062A" });
    }
  });
  app2.get("/api/admin/upgrade/external-transfer/requests", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644" });
      }
      const requests = await storage.getExternalTransferRequests();
      const requestsWithUsers = await Promise.all(
        requests.map(async (request) => {
          const user = await storage.getUser(request.userId);
          return {
            ...request,
            userFullName: user?.fullName,
            userEmail: user?.email,
            userType: user?.type
          };
        })
      );
      res.json(requestsWithUsers);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0637\u0644\u0628\u0627\u062A" });
    }
  });
  app2.post("/api/admin/upgrade/external-transfer/requests/:id/approve", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644" });
      }
      const requestId = parseInt(req.params.id);
      const { daily, monthly, currencies, countries: countries3 } = req.body;
      console.log("\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0627\u0644\u0645\u0633\u062A\u0644\u0645\u0629:", { requestId, daily, monthly, currencies, countries: countries3 });
      if (!requestId || isNaN(requestId)) {
        return res.status(400).json({ message: "\u0631\u0642\u0645 \u0627\u0644\u0637\u0644\u0628 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D" });
      }
      await storage.updateExternalTransferRequest(requestId, {
        status: "approved",
        decidedBy: req.user.id,
        reviewNotes: "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0627\u0644\u0637\u0644\u0628"
      });
      const allRequests = await storage.getExternalTransferRequests();
      const request = allRequests.find((r) => r.id === requestId);
      if (!request) {
        return res.status(404).json({ message: "\u0627\u0644\u0637\u0644\u0628 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const allCountries = await db.select({ code: countries2.code }).from(countries2).where(eq10(countries2.isActive, true));
      const allCountryCodes = allCountries.map((c) => c.code);
      const settings = {
        extTransferEnabled: true,
        extDailyLimit: daily ? daily.toString() : "50000",
        extMonthlyLimit: monthly ? monthly.toString() : "200000",
        extAllowedCurrencies: Array.isArray(currencies) && currencies.length > 0 ? currencies : ["USD", "EUR", "LYD", "TRY", "AED"],
        extAllowedCountries: allCountryCodes
        // جميع البلدان المتاحة
      };
      console.log("\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0645\u062D\u062F\u062B\u0629:", settings);
      await storage.updateUserExternalTransferSettings(request.userId, settings);
      await storage.updateUser(request.userId, { type: "agent" });
      const defaultCountry = "LY";
      const user = await storage.getUser(request.userId);
      const [countryInfo] = await db.select({ name: countries2.name }).from(countries2).where(eq10(countries2.code, defaultCountry));
      const countryName = user?.countryName || countryInfo?.name || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F";
      const defaultCity = user?.cityName || user?.city || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F";
      const userAccountNumber = user?.accountNumber || `33003${request.userId.toString().padStart(3, "0")}`;
      const officeCode = `${defaultCountry}${userAccountNumber.slice(-3)}`;
      try {
        await db.insert(agentOffices).values({
          agentId: request.userId,
          countryCode: defaultCountry,
          city: defaultCity,
          officeCode,
          officeName: `\u0645\u0643\u062A\u0628 ${user?.fullName || "\u0627\u0644\u0648\u0643\u064A\u0644"} - ${countryName}`,
          contactInfo: user?.phone || "+1234567890",
          address: `\u0627\u0644\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0631\u0626\u064A\u0633\u064A\u060C ${defaultCity}\u060C ${user?.countryName || countryName}`,
          isActive: true,
          createdAt: /* @__PURE__ */ new Date()
        });
        console.log(`\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0645\u0643\u062A\u0628 \u062A\u0644\u0642\u0627\u0626\u064A \u0628\u0631\u0642\u0645 ${officeCode} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${request.userId}`);
      } catch (officeError) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u062A\u0644\u0642\u0627\u0626\u064A:", officeError);
      }
      try {
        const defaultCurrency = settings.extAllowedCurrencies[0];
        await storage.createOrUpdateAgentCommission({
          agentId: request.userId,
          currencyCode: defaultCurrency,
          type: "fixed",
          value: "7.5"
        });
        console.log(`\u062A\u0645 \u0625\u0636\u0627\u0641\u0629 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0639\u0645\u0648\u0644\u0629 \u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629 ${defaultCurrency} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${request.userId}`);
      } catch (commissionError) {
        console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", commissionError);
      }
      await storage.createUserNotification({
        userId: request.userId,
        title: "\u062A\u0645\u062A \u0627\u0644\u0645\u0648\u0627\u0641\u0642\u0629 \u0639\u0644\u0649 \u0637\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A",
        body: "\u062A\u0645 \u062A\u0641\u0639\u064A\u0644 \u0635\u0644\u0627\u062D\u064A\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u0648\u0625\u0646\u0634\u0627\u0621 \u0645\u0643\u062A\u0628\u0643 \u0627\u0644\u062A\u0644\u0642\u0627\u0626\u064A",
        type: "success",
        isRead: false
      });
      res.json({
        ok: true,
        message: "\u062A\u0645 \u0642\u0628\u0648\u0644 \u0627\u0644\u0637\u0644\u0628 \u0648\u062A\u0641\u0639\u064A\u0644 \u0635\u0644\u0627\u062D\u064A\u0629 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0645\u0648\u0627\u0641\u0642\u0629 \u0637\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0645\u0648\u0627\u0641\u0642\u0629 \u0627\u0644\u0637\u0644\u0628",
        error: error instanceof Error ? error.message : "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"
      });
    }
  });
  app2.post("/api/admin/upgrade/external-transfer/requests/:id/reject", authMiddleware, async (req, res) => {
    try {
      if (req.user.type !== "admin") {
        return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0627\u0644\u0648\u0635\u0648\u0644" });
      }
      const requestId = parseInt(req.params.id);
      const { reason } = req.body;
      await storage.updateExternalTransferRequest(requestId, {
        status: "rejected",
        decidedBy: req.user.id,
        reviewNotes: reason || "\u062A\u0645 \u0631\u0641\u0636 \u0627\u0644\u0637\u0644\u0628"
      });
      const allRequests = await storage.getExternalTransferRequests();
      const request = allRequests.find((r) => r.id === requestId);
      if (request) {
        await storage.createUserNotification({
          userId: request.userId,
          title: "\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A",
          body: `\u062A\u0645 \u0631\u0641\u0636 \u0637\u0644\u0628\u0643: ${reason || "\u0644\u0645 \u064A\u062A\u0645 \u062A\u062D\u062F\u064A\u062F \u0627\u0644\u0633\u0628\u0628"}`,
          type: "error",
          isRead: false
        });
      }
      res.json({
        ok: true,
        message: "\u062A\u0645 \u0631\u0641\u0636 \u0627\u0644\u0637\u0644\u0628"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0631\u0641\u0636 \u0637\u0644\u0628 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0631\u0641\u0636 \u0627\u0644\u0637\u0644\u0628" });
    }
  });
  app2.get("/api/external-transfer/limits", authMiddleware, async (req, res) => {
    try {
      const limits = await storage.getUserExternalTransferLimits(req.user.id);
      if (!limits || !limits.extTransferEnabled) {
        return res.json({
          enabled: false,
          message: "\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A \u063A\u064A\u0631 \u0645\u0641\u0639\u0644. \u064A\u0631\u062C\u0649 \u062A\u0642\u062F\u064A\u0645 \u0637\u0644\u0628 \u062A\u0631\u0642\u064A\u0629."
        });
      }
      res.json({
        enabled: true,
        dailyLimit: limits.extDailyLimit,
        monthlyLimit: limits.extMonthlyLimit,
        allowedCurrencies: limits.extAllowedCurrencies,
        allowedCountries: limits.extAllowedCountries
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062D\u062F\u0648\u062F \u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062E\u0627\u0631\u062C\u064A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u062D\u062F\u0648\u062F" });
    }
  });
  app2.get("/api/geo/countries", async (req, res) => {
    try {
      const countries3 = await storage.getCountries();
      res.json(countries3);
    } catch (error) {
      console.error("Error fetching countries:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u062F\u0648\u0644" });
    }
  });
  app2.get("/api/geo/cities", async (req, res) => {
    try {
      const { country_id, search } = req.query;
      const countryId = country_id ? parseInt(country_id) : void 0;
      const cities2 = await storage.getCities(countryId, search);
      res.json(cities2);
    } catch (error) {
      console.error("Error fetching cities:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u062F\u0646" });
    }
  });
  app2.post("/api/upgrade/external-transfer/request", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const validatedData = externalTransferRequestSchema.parse({
        ...req.body,
        userId,
        requestType: "external_transfer"
      });
      const country = await storage.getCountryById(validatedData.countryId);
      if (!country) {
        return res.status(400).json({ error: "\u0627\u0644\u062F\u0648\u0644\u0629 \u0627\u0644\u0645\u062D\u062F\u062F\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
      }
      if (validatedData.cityId) {
        const city = await storage.getCityById(validatedData.cityId);
        if (!city || city.countryId !== validatedData.countryId) {
          return res.status(400).json({ error: "\u0627\u0644\u0645\u062F\u064A\u0646\u0629 \u0627\u0644\u0645\u062D\u062F\u062F\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629 \u0623\u0648 \u063A\u064A\u0631 \u0645\u062A\u0637\u0627\u0628\u0642\u0629 \u0645\u0639 \u0627\u0644\u062F\u0648\u0644\u0629" });
        }
      }
      const upgradeRequest = await storage.createExternalTransferRequest(validatedData);
      res.status(201).json(upgradeRequest);
    } catch (error) {
      console.error("Error creating external transfer request:", error);
      if (error instanceof z2.ZodError) {
        return res.status(400).json({
          error: "\u0628\u064A\u0627\u0646\u0627\u062A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629",
          details: error.errors
        });
      }
      if (error instanceof Error && error.message.includes("\u0645\u0639\u0644\u0642")) {
        return res.status(409).json({ error: error.message });
      }
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0637\u0644\u0628 \u0627\u0644\u062A\u0631\u0642\u064A\u0629" });
    }
  });
  app2.get("/api/admin/upgrade-requests/detailed", authMiddleware, async (req, res) => {
    try {
      const user = await storage.getUser(req.user.id);
      if (user?.type !== "admin") {
        return res.status(403).json({ error: "\u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0631\u062F" });
      }
      const { type, status } = req.query;
      const requestType = type;
      const requestStatus = status;
      const requests = await storage.getUpgradeRequestsWithDetails(requestType, requestStatus);
      res.json(requests);
    } catch (error) {
      console.error("Error fetching detailed upgrade requests:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0637\u0644\u0628\u0627\u062A \u0627\u0644\u062A\u0631\u0642\u064A\u0629" });
    }
  });
  async function generatePrintableReceipt(receipt, transfer) {
    const moment4 = await import("moment-timezone");
    const libyaTime = moment4.default(transfer.createdAt).tz("Africa/Tripoli");
    const countries3 = {
      "AU": "\u0623\u0633\u062A\u0631\u0627\u0644\u064A\u0627",
      "AE": "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
      "EG": "\u0645\u0635\u0631",
      "SA": "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
      "TN": "\u062A\u0648\u0646\u0633",
      "MA": "\u0627\u0644\u0645\u063A\u0631\u0628",
      "JO": "\u0627\u0644\u0623\u0631\u062F\u0646",
      "LB": "\u0644\u0628\u0646\u0627\u0646",
      "SY": "\u0633\u0648\u0631\u064A\u0627",
      "IQ": "\u0627\u0644\u0639\u0631\u0627\u0642",
      "YE": "\u0627\u0644\u064A\u0645\u0646",
      "OM": "\u0639\u064F\u0645\u0627\u0646",
      "QA": "\u0642\u0637\u0631",
      "BH": "\u0627\u0644\u0628\u062D\u0631\u064A\u0646",
      "KW": "\u0627\u0644\u0643\u0648\u064A\u062A"
    };
    const countryName = countries3[transfer.country] || transfer.country;
    return `
      <!DOCTYPE html>
      <html dir="rtl" lang="ar">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>\u0625\u064A\u0635\u0627\u0644 \u062A\u062D\u0648\u064A\u0644 \u062F\u0648\u0644\u064A - ${transfer.receiverCode}</title>
        <style>
          * { margin: 0; padding: 0; box-sizing: border-box; }
          
          @media print {
            body { 
              margin: 0; 
              padding: 0;
              background: white;
            }
            .receipt-container {
              transform: none;
              box-shadow: none;
              border: none;
            }
            .no-print { display: none !important; }
            @page { 
              size: 80mm auto; 
              margin: 2mm; 
            }
          }
          
          body {
            font-family: 'Courier New', monospace;
            background: #f0f0f0;
            color: #000;
            line-height: 1.4;
            padding: 10px;
            margin: 0;
            display: flex;
            justify-content: center;
          }
          
          .receipt-container {
            width: 80mm;
            max-width: 80mm;
            background: white;
            font-size: 10px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
            transform: scale(1.0);
            transform-origin: top center;
            padding: 3mm;
          }
          
          .header {
            text-align: center;
            border-bottom: 1px solid #000;
            padding-bottom: 3px;
            margin-bottom: 5px;
          }
          
          .company-name {
            font-size: 11px;
            font-weight: bold;
            margin-bottom: 1px;
          }
          
          .company-info {
            font-size: 7px;
            margin-bottom: 0px;
          }
          
          .receipt-title {
            font-size: 10px;
            font-weight: bold;
            text-align: center;
            border: 1px solid #000;
            padding: 2px;
            margin: 3px 0;
          }
          
          .separator {
            text-align: center;
            margin: 3px 0;
            font-size: 8px;
          }
          
          .receiver-code-section {
            text-align: center;
            margin: 5px 0;
            border: 1px solid #000;
            padding: 5px;
          }
          
          .receiver-code-label {
            font-size: 9px;
            font-weight: bold;
            margin-bottom: 2px;
          }
          
          .receiver-code {
            font-size: 14px;
            font-weight: bold;
            letter-spacing: 1px;
            font-family: 'Courier New', monospace;
          }
          
          .details-section {
            margin: 3px 0;
          }
          
          .section-title {
            font-size: 9px;
            font-weight: bold;
            text-align: center;
            border-bottom: 1px solid #000;
            padding-bottom: 1px;
            margin-bottom: 2px;
          }
          
          .detail-row {
            display: flex;
            justify-content: space-between;
            padding: 1px 0;
            border-bottom: 1px dotted #ccc;
            font-size: 8px;
          }
          
          .detail-label {
            font-weight: bold;
            flex: 1;
          }
          
          .detail-value {
            flex: 1;
            text-align: left;
          }
          
          .amount-section {
            text-align: center;
            border: 1px solid #000;
            padding: 4px;
            margin: 5px 0;
            font-weight: bold;
          }
          
          .amount-label {
            font-size: 9px;
            margin-bottom: 2px;
          }
          
          .amount-value {
            font-size: 11px;
            font-weight: bold;
            letter-spacing: 1px;
          }
          
          .commission-info {
            font-size: 7px;
            margin-top: 1px;
          }
          
          .footer {
            margin-top: 8px;
            padding-top: 3px;
            border-top: 1px solid #000;
            text-align: center;
            font-size: 6px;
          }
          
          .print-button {
            background: #000;
            color: white;
            border: none;
            padding: 6px 12px;
            font-size: 10px;
            cursor: pointer;
            margin: 5px 0;
            width: 100%;
          }
          
          .status {
            text-align: center;
            font-weight: bold;
            padding: 2px;
            margin: 3px 0;
            border: 1px solid #000;
            font-size: 8px;
          }
          
          .dashed-line {
            border-top: 1px dashed #000;
            margin: 2px 0;
          }
          
          .center-text {
            text-align: center;
          }
        </style>
      </head>
      <body>
        <div class="receipt-container">
          <!-- \u0631\u0623\u0633 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 -->
          <div class="header">
            <div class="company-name">\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A\u0629</div>
            <div class="company-info">Libya Exchange Platform</div>
            <div class="company-info">\u0637\u0631\u0627\u0628\u0644\u0633 - \u0644\u064A\u0628\u064A\u0627</div>
            <div class="company-info">Tel: +218-XXX-XXXXXX</div>
          </div>

          <div class="receipt-title">\u0625\u064A\u0635\u0627\u0644 \u062A\u062D\u0648\u064A\u0644 \u062F\u0648\u0644\u064A</div>
          
          <div class="separator">================================</div>

          <!-- \u0643\u0648\u062F \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645 -->
          <div class="receiver-code-section">
            <div class="receiver-code-label">\u0643\u0648\u062F \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645</div>
            <div class="receiver-code">${transfer.receiverCode}</div>
          </div>

          <div class="dashed-line"></div>

          <!-- \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644 -->
          <div class="details-section">
            <div class="section-title">\u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u062A\u062D\u0648\u064A\u0644</div>
            <div class="detail-row">
              <span class="detail-label">\u0631\u0642\u0645 \u0627\u0644\u0625\u064A\u0635\u0627\u0644:</span>
              <span class="detail-value">${receipt.id.substring(0, 8)}...</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">\u0631\u0642\u0645 \u0627\u0644\u062A\u062D\u0648\u064A\u0644:</span>
              <span class="detail-value">${transfer.id}</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">\u0627\u0644\u062A\u0627\u0631\u064A\u062E:</span>
              <span class="detail-value">${libyaTime.format("YYYY-MM-DD")}</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">\u0627\u0644\u0648\u0642\u062A:</span>
              <span class="detail-value">${libyaTime.format("HH:mm")}</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">\u0627\u0644\u062F\u0648\u0644\u0629 \u0627\u0644\u0645\u0642\u0635\u062F:</span>
              <span class="detail-value">${countryName}</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">\u0646\u0648\u0639 \u0627\u0644\u062A\u062D\u0648\u064A\u0644:</span>
              <span class="detail-value">\u062A\u062D\u0648\u064A\u0644 \u062F\u0648\u0644\u064A</span>
            </div>
          </div>

          <div class="dashed-line"></div>

          <!-- \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0645\u064F\u0631\u0633\u0644 -->
          <div class="details-section">
            <div class="section-title">\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u064F\u0631\u0633\u0644</div>
            <div class="detail-row">
              <span class="detail-label">\u0631\u0642\u0645 \u0627\u0644\u0645\u064F\u0631\u0633\u0644:</span>
              <span class="detail-value">${transfer.senderId || "\u063A\u064A\u0631 \u0645\u062D\u062F\u062F"}</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">\u0645\u0643\u062A\u0628 \u0627\u0644\u0625\u0631\u0633\u0627\u0644:</span>
              <span class="detail-value">\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A\u0629</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">\u0631\u0645\u0632 \u0627\u0644\u062A\u062D\u0648\u064A\u0644:</span>
              <span class="detail-value">${transfer.transferCode}</span>
            </div>
          </div>

          <div class="dashed-line"></div>

          <!-- \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u0641\u064A\u062F -->
          <div class="details-section">
            <div class="section-title">\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u0641\u064A\u062F</div>
            <div class="detail-row">
              <span class="detail-label">\u0627\u0644\u0627\u0633\u0645:</span>
              <span class="detail-value">${transfer.recipientName}</span>
            </div>
            ${transfer.recipientPhone ? `
            <div class="detail-row">
              <span class="detail-label">\u0627\u0644\u0647\u0627\u062A\u0641:</span>
              <span class="detail-value">${transfer.recipientPhone}</span>
            </div>
            ` : ""}
            <div class="detail-row">
              <span class="detail-label">\u0643\u0648\u062F \u0627\u0644\u0627\u0633\u062A\u0644\u0627\u0645:</span>
              <span class="detail-value">${transfer.receiverCode}</span>
            </div>
          </div>

          <div class="separator">================================</div>

          <!-- \u0627\u0644\u0645\u0628\u0644\u063A -->
          <div class="amount-section">
            <div class="amount-label">\u0627\u0644\u0645\u0628\u0644\u063A \u0644\u0644\u0627\u0633\u062A\u0644\u0627\u0645</div>
            <div class="amount-value">${parseFloat(transfer.amount).toLocaleString()} ${transfer.currency}</div>
          </div>

          <!-- \u0627\u0644\u062D\u0627\u0644\u0629 -->
          <div class="status">
            \u0627\u0644\u062D\u0627\u0644\u0629: ${transfer.status === "completed" ? "\u0645\u0643\u062A\u0645\u0644 \u2713" : "\u0645\u0639\u0644\u0642 \u23F3"}
          </div>

          ${transfer.note ? `
            <div class="dashed-line"></div>
            <div class="details-section">
              <div class="section-title">\u0645\u0644\u0627\u062D\u0638\u0627\u062A</div>
              <div class="center-text" style="padding: 5px 0; font-size: 9px;">${transfer.note}</div>
            </div>
          ` : ""}

          <!-- \u0632\u0631 \u0627\u0644\u0637\u0628\u0627\u0639\u0629 -->
          <div class="no-print">
            <button class="print-button" onclick="window.print()">\u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0625\u064A\u0635\u0627\u0644</button>
          </div>

          <!-- \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0645\u062E\u062A\u0635\u0631\u0629 -->
          <div class="dashed-line"></div>
          <div class="center-text" style="font-size: 7px; margin: 2px 0;">
            \u0627\u0644\u062A\u0627\u0631\u064A\u062E: ${transfer.completedAt ? new Date(transfer.completedAt).toLocaleDateString("ar-LY", { timeZone: "Africa/Tripoli" }) : libyaTime.format("YYYY-MM-DD")} | 
            \u0627\u0644\u0648\u0643\u064A\u0644: ${transfer.agentId || "N/A"} \u2192 ${transfer.destinationAgentId || "N/A"}
          </div>

          <!-- \u062A\u0630\u064A\u064A\u0644 \u0627\u0644\u0625\u064A\u0635\u0627\u0644 -->
          <div class="footer">
            <div>\u0645\u0646\u0635\u0629 \u0627\u0644\u0635\u0631\u0627\u0641\u0629 \u0627\u0644\u0644\u064A\u0628\u064A\u0629</div>
            <div>\u0625\u064A\u0635\u0627\u0644 \u0645\u062E\u062A\u0648\u0645 \u0631\u0642\u0645\u064A\u0627\u064B</div>
            <div>${(/* @__PURE__ */ new Date()).toLocaleDateString("ar-LY", { timeZone: "Africa/Tripoli" })}</div>
            <div>\u0647\u0627\u062A\u0641: +218-XXX-XXXXXX</div>
            <div>\u0644\u0644\u0627\u0633\u062A\u0641\u0633\u0627\u0631: \u062E\u062F\u0645\u0629 \u0627\u0644\u0639\u0645\u0644\u0627\u0621</div>
          </div>
          
          <div class="separator" style="margin-top: 10px;">================================</div>
          <div class="center-text" style="font-size: 8px; margin-top: 5px;">
            \u0627\u062D\u062A\u0641\u0638 \u0628\u0647\u0630\u0627 \u0627\u0644\u0625\u064A\u0635\u0627\u0644
          </div>
        </div>
      </body>
      </html>
    `;
  }
  app2.post("/api/notifications/subscribe", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const subscription = req.body;
      await savePushSubscription(userId, subscription);
      res.json({
        success: true,
        message: "\u062A\u0645 \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0634\u062A\u0631\u0627\u0643 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A:", error);
      res.status(500).json({
        success: false,
        message: "\u0641\u0634\u0644 \u0641\u064A \u062A\u0641\u0639\u064A\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A",
        error: error.message
      });
    }
  });
  app2.post("/api/notifications/unsubscribe", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { endpoint } = req.body;
      await removePushSubscription(userId, endpoint);
      res.json({
        success: true,
        message: "\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0634\u062A\u0631\u0627\u0643 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A:", error);
      res.status(500).json({
        success: false,
        message: "\u0641\u0634\u0644 \u0641\u064A \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u0625\u0634\u0639\u0627\u0631\u0627\u062A",
        error: error.message
      });
    }
  });
  app2.post("/api/notifications/test", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      await sendPushNotificationToUser(userId, {
        title: "\u0625\u0634\u0639\u0627\u0631 \u062A\u062C\u0631\u064A\u0628\u064A",
        body: "\u0647\u0630\u0627 \u0625\u0634\u0639\u0627\u0631 \u062A\u062C\u0631\u064A\u0628\u064A \u0644\u0644\u062A\u0623\u0643\u062F \u0645\u0646 \u0639\u0645\u0644 \u0627\u0644\u0646\u0638\u0627\u0645",
        data: { type: "test" },
        url: "/",
        tag: "test"
      });
      res.json({
        success: true,
        message: "\u062A\u0645 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0627\u0644\u062A\u062C\u0631\u064A\u0628\u064A"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0627\u0644\u062A\u062C\u0631\u064A\u0628\u064A:", error);
      res.status(500).json({
        success: false,
        message: "\u0641\u0634\u0644 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0625\u0634\u0639\u0627\u0631 \u0627\u0644\u062A\u062C\u0631\u064A\u0628\u064A",
        error: error.message
      });
    }
  });
  const originalNotificationPost = app2._router.stack.find(
    (layer) => layer.route && layer.route.path === "/api/notifications" && layer.route.methods.post
  );
  if (originalNotificationPost) {
    app2.use("/api/notifications", authMiddleware, async (req, res, next) => {
      if (req.method === "POST" && !req.url.includes("subscribe") && !req.url.includes("unsubscribe") && !req.url.includes("test")) {
        const originalSend = res.send;
        const originalJson = res.json;
        res.json = function(body) {
          if (res.statusCode === 200 || res.statusCode === 201) {
            if (req.body.userId && req.body.title) {
              sendPushNotificationToUser(req.body.userId, {
                title: req.body.title,
                body: req.body.message || "\u0644\u062F\u064A\u0643 \u0625\u0634\u0639\u0627\u0631 \u062C\u062F\u064A\u062F",
                data: { type: "notification", id: body.id },
                url: "/",
                tag: "notification"
              }).catch((error) => {
                console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0631\u0633\u0627\u0644 push notification:", error);
              });
            }
          }
          return originalJson.call(this, body);
        };
      }
      next();
    });
  }
  app2.get("/api/rewards/progress", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const progress = await rewardsService.getUserProgress(userId);
      res.json({
        success: true,
        data: progress
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u062A\u0642\u062F\u0645 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({
        success: false,
        message: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u062A\u0642\u062F\u0645",
        error: error.message
      });
    }
  });
  app2.get("/api/rewards/badges", authMiddleware, async (req, res) => {
    try {
      const badges = await db.select().from(badgeTypes).where(eq10(badgeTypes.active, true));
      res.json({
        success: true,
        data: badges
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0634\u0627\u0631\u0627\u062A:", error);
      res.status(500).json({
        success: false,
        message: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0634\u0627\u0631\u0627\u062A",
        error: error.message
      });
    }
  });
  app2.get("/api/rewards/available", authMiddleware, async (req, res) => {
    try {
      const rewardsList = await db.select().from(rewards).where(eq10(rewards.active, true));
      res.json({
        success: true,
        data: rewardsList
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A:", error);
      res.status(500).json({
        success: false,
        message: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A",
        error: error.message
      });
    }
  });
  app2.post("/api/rewards/redeem", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { rewardId } = req.body;
      if (!rewardId) {
        return res.status(400).json({
          success: false,
          message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0645\u0637\u0644\u0648\u0628"
        });
      }
      const result = await rewardsService.redeemReward(userId, parseInt(rewardId));
      res.json({
        success: true,
        message: "\u062A\u0645 \u0627\u0633\u062A\u0628\u062F\u0627\u0644 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0628\u0646\u062C\u0627\u062D",
        data: result
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0633\u062A\u0628\u062F\u0627\u0644 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629:", error);
      res.status(400).json({
        success: false,
        message: error.message || "\u0641\u0634\u0644 \u0641\u064A \u0627\u0633\u062A\u0628\u062F\u0627\u0644 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629"
      });
    }
  });
  app2.get("/api/rewards/my-redemptions", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const redemptions = await db.select({
        id: userRewards.id,
        reward: rewards,
        pointsSpent: userRewards.pointsSpent,
        status: userRewards.status,
        redemptionCode: userRewards.redemptionCode,
        usedAt: userRewards.usedAt,
        expiresAt: userRewards.expiresAt,
        redeemedAt: userRewards.redeemedAt
      }).from(userRewards).innerJoin(rewards, eq10(userRewards.rewardId, rewards.id)).where(eq10(userRewards.userId, userId)).orderBy(desc8(userRewards.redeemedAt));
      res.json({
        success: true,
        data: redemptions
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u0627\u0633\u062A\u0628\u062F\u0627\u0644:", error);
      res.status(500).json({
        success: false,
        message: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u0627\u0633\u062A\u0628\u062F\u0627\u0644",
        error: error.message
      });
    }
  });
  app2.post("/api/rewards/daily-login", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const userIP = getClientPublicIP(req);
      const lastHour = new Date(Date.now() - 60 * 60 * 1e3);
      const recentAttempts = await db.select().from(pointsHistory).where(and9(
        eq10(pointsHistory.userId, userId),
        eq10(pointsHistory.action, "daily_login"),
        gte5(pointsHistory.createdAt, lastHour)
      ));
      if (recentAttempts.length > 1) {
        console.warn(`\u{1F6A8} \u0645\u062D\u0627\u0648\u0644\u0629 \u0645\u0634\u0628\u0648\u0647\u0629 \u0644\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0645\u0643\u0627\u0641\u0622\u062A \u064A\u0648\u0645\u064A\u0629 \u0645\u062A\u0639\u062F\u062F\u0629 - \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userId}, IP: ${userIP}`);
        return res.status(429).json({
          success: false,
          message: "\u062A\u0645 \u0627\u0643\u062A\u0634\u0627\u0641 \u0645\u062D\u0627\u0648\u0644\u0629 \u0645\u0634\u0628\u0648\u0647\u0629. \u064A\u0645\u0643\u0646\u0643 \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u064A\u0648\u0645\u064A\u0629 \u0645\u0631\u0629 \u0648\u0627\u062D\u062F\u0629 \u0641\u0642\u0637."
        });
      }
      const result = await rewardsService.awardDailyLoginPointsSafe(userId, userIP);
      if (!result.success) {
        return res.status(400).json({
          success: false,
          message: result.message || "\u062A\u0645 \u0627\u0644\u062D\u0635\u0648\u0644 \u0639\u0644\u0649 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u064A\u0648\u0645\u064A\u0629 \u0628\u0627\u0644\u0641\u0639\u0644"
        });
      }
      res.json({
        success: true,
        message: result.message || "\u062A\u0645 \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0646\u0634\u0627\u0637 \u0627\u0644\u064A\u0648\u0645\u064A",
        data: result.data
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0646\u0634\u0627\u0637 \u0627\u0644\u064A\u0648\u0645\u064A:", error);
      res.status(500).json({
        success: false,
        message: "\u0641\u0634\u0644 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0646\u0634\u0627\u0637 \u0627\u0644\u064A\u0648\u0645\u064A",
        error: error.message
      });
    }
  });
  app2.get("/api/city-commission-tiers", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const tiers = await db.select().from(cityTransferCommissions).where(eq10(cityTransferCommissions.agentId, userId)).orderBy(cityTransferCommissions.createdAt);
      res.json(tiers);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0634\u0631\u0627\u0626\u062D \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({
        message: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0634\u0631\u0627\u0626\u062D \u0627\u0644\u0639\u0645\u0648\u0644\u0629",
        error: error.message
      });
    }
  });
  app2.post("/api/city-commission-tiers", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { originCity, destinationCity, minAmount, maxAmount, commission, perMilleRate, currencyCode } = req.body;
      if (!minAmount || !commission && !perMilleRate) {
        return res.status(400).json({
          message: "\u064A\u0631\u062C\u0649 \u0625\u062F\u062E\u0627\u0644 \u0627\u0644\u0645\u0628\u0644\u063A \u0627\u0644\u0623\u062F\u0646\u0649 \u0648\u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0623\u0648 \u0627\u0644\u0646\u0633\u0628\u0629 \u0641\u064A \u0627\u0644\u0623\u0644\u0641"
        });
      }
      const numMinAmount = typeof minAmount === "number" ? minAmount : parseFloat(minAmount);
      const numMaxAmount = maxAmount ? typeof maxAmount === "number" ? maxAmount : parseFloat(maxAmount) : null;
      const numCommission = commission ? typeof commission === "number" ? commission : parseFloat(commission) : null;
      const numPerMilleRate = perMilleRate ? typeof perMilleRate === "number" ? perMilleRate : parseFloat(perMilleRate) : null;
      const newTier = await db.insert(cityTransferCommissions).values({
        agentId: userId,
        originCity: originCity || null,
        destinationCity: destinationCity || null,
        minAmount: numMinAmount.toString(),
        maxAmount: numMaxAmount ? numMaxAmount.toString() : null,
        commission: numPerMilleRate ? null : numCommission ? numCommission.toString() : null,
        perMilleRate: numPerMilleRate ? numPerMilleRate.toString() : null,
        currencyCode: currencyCode || "LYD"
      }).returning();
      res.json({
        message: "\u062A\u0645 \u0625\u0636\u0627\u0641\u0629 \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        tier: newTier[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({
        message: "\u0641\u0634\u0644 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629",
        error: error.message
      });
    }
  });
  app2.put("/api/city-commission-tiers/:id", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const tierId = parseInt(req.params.id);
      const { originCity, destinationCity, minAmount, maxAmount, commission, perMilleRate, currencyCode } = req.body;
      const existingTier = await db.select().from(cityTransferCommissions).where(and9(
        eq10(cityTransferCommissions.id, tierId),
        eq10(cityTransferCommissions.agentId, userId)
      )).limit(1);
      if (existingTier.length === 0) {
        return res.status(404).json({
          message: "\u0627\u0644\u0634\u0631\u064A\u062D\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0623\u0648 \u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u062A\u0639\u062F\u064A\u0644\u0647\u0627"
        });
      }
      const numMinAmount = typeof minAmount === "number" ? minAmount : parseFloat(minAmount);
      const numMaxAmount = maxAmount ? typeof maxAmount === "number" ? maxAmount : parseFloat(maxAmount) : null;
      const numCommission = commission ? typeof commission === "number" ? commission : parseFloat(commission) : null;
      const numPerMilleRate = perMilleRate ? typeof perMilleRate === "number" ? perMilleRate : parseFloat(perMilleRate) : null;
      const updatedTier = await db.update(cityTransferCommissions).set({
        originCity: originCity || null,
        destinationCity: destinationCity || null,
        minAmount: numMinAmount.toString(),
        maxAmount: numMaxAmount ? numMaxAmount.toString() : null,
        commission: numPerMilleRate ? null : numCommission ? numCommission.toString() : null,
        perMilleRate: numPerMilleRate ? numPerMilleRate.toString() : null,
        currencyCode: currencyCode || "LYD",
        updatedAt: /* @__PURE__ */ new Date()
      }).where(eq10(cityTransferCommissions.id, tierId)).returning();
      res.json({
        message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D",
        tier: updatedTier[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({
        message: "\u0641\u0634\u0644 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629",
        error: error.message
      });
    }
  });
  app2.delete("/api/city-commission-tiers/:id", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const tierId = parseInt(req.params.id);
      const existingTier = await db.select().from(cityTransferCommissions).where(and9(
        eq10(cityTransferCommissions.id, tierId),
        eq10(cityTransferCommissions.agentId, userId)
      )).limit(1);
      if (existingTier.length === 0) {
        return res.status(404).json({
          message: "\u0627\u0644\u0634\u0631\u064A\u062D\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629 \u0623\u0648 \u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u062D\u0630\u0641\u0647\u0627"
        });
      }
      await db.delete(cityTransferCommissions).where(eq10(cityTransferCommissions.id, tierId));
      res.json({
        message: "\u062A\u0645 \u062D\u0630\u0641 \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629 \u0628\u0646\u062C\u0627\u062D"
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629:", error);
      res.status(500).json({
        message: "\u0641\u0634\u0644 \u0641\u064A \u062D\u0630\u0641 \u0634\u0631\u064A\u062D\u0629 \u0627\u0644\u0639\u0645\u0648\u0644\u0629",
        error: error.message
      });
    }
  });
  app2.put("/api/admin/users/:userId", authMiddleware, async (req, res) => {
    try {
      const currentUser = req.user;
      const userId = parseInt(req.params.userId);
      const { fullName, email, phone, type, adminLevel } = req.body;
      if (currentUser.type !== "admin") {
        return res.status(403).json({ message: "\u0644\u064A\u0633 \u0644\u062F\u064A\u0643 \u0635\u0644\u0627\u062D\u064A\u0629 \u0644\u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646" });
      }
      const targetUser = await storage.getUser(userId);
      if (!targetUser) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const currentUserData = await storage.getUser(currentUser.id);
      if (targetUser.type === "admin" && (!currentUserData || currentUserData.adminLevel !== 2)) {
        return res.status(403).json({ message: "\u0641\u0642\u0637 \u0627\u0644\u0645\u062F\u064A\u0631 \u0627\u0644\u0639\u0627\u0645 \u064A\u0645\u0643\u0646\u0647 \u062A\u0639\u062F\u064A\u0644 \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u062F\u0631\u0627\u0621 \u0627\u0644\u0622\u062E\u0631\u064A\u0646" });
      }
      const updateData = {
        fullName,
        email,
        phone,
        type
      };
      if (type === "admin" && currentUserData?.adminLevel === 2) {
        updateData.adminLevel = adminLevel || 1;
      }
      const updatedUser = await storage.updateUser(userId, updateData);
      res.json({
        message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0628\u0646\u062C\u0627\u062D",
        user: {
          id: updatedUser.id,
          fullName: updatedUser.fullName,
          email: updatedUser.email,
          phone: updatedUser.phone,
          type: updatedUser.type,
          adminLevel: updatedUser.adminLevel
        }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645",
        error: error.message
      });
    }
  });
  app2.get("/api/admin/referral/settings", authMiddleware, requirePermission("canManageSettings"), async (req, res) => {
    try {
      const isEnabled = await getSetting("referral.enabled", { enabled: false });
      const rewardRate = await getSetting("referral.reward_rate", { rate: 0.2 });
      res.json({
        enabled: isEnabled.enabled,
        rewardRate: rewardRate.rate
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.put("/api/admin/referral/settings", authMiddleware, requirePermission("canManageSettings"), async (req, res) => {
    try {
      const { enabled, rewardRate } = req.body;
      if (typeof enabled !== "boolean") {
        return res.status(400).json({ message: "\u0642\u064A\u0645\u0629 \u0627\u0644\u062A\u0641\u0639\u064A\u0644 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 true \u0623\u0648 false" });
      }
      if (typeof rewardRate !== "number" || rewardRate < 0 || rewardRate > 1) {
        return res.status(400).json({ message: "\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0628\u064A\u0646 0 \u0648 1" });
      }
      await setSetting("referral.enabled", { enabled });
      await setSetting("referral.reward_rate", { rate: rewardRate });
      res.json({ message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0646\u0638\u0627\u0645 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.get("/api/referral/my-code", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const user = await storage.getUser(userId);
      if (!user || !user.referralCode) {
        return res.status(404).json({ message: "\u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      res.json({
        referralCode: user.referralCode,
        shareUrl: `${req.protocol}://${req.get("host")}/register?ref=${user.referralCode}`
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/referral/history", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const limit = Math.min(parseInt(req.query.limit) || 50, 100);
      const history = await getReferralHistory(userId, limit);
      res.json(history);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0633\u062C\u0644" });
    }
  });
  app2.get("/api/referral/balances", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const balances3 = await getReferralBalances(userId);
      res.json(balances3);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0623\u0631\u0635\u062F\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0623\u0631\u0635\u062F\u0629" });
    }
  });
  app2.post("/api/referral/transfer-balance", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const { currency, amount } = req.body;
      if (!currency || !amount) {
        return res.status(400).json({ message: "\u0627\u0644\u0639\u0645\u0644\u0629 \u0648\u0627\u0644\u0645\u0628\u0644\u063A \u0645\u0637\u0644\u0648\u0628\u0627\u0646" });
      }
      if (typeof amount !== "number" || amount <= 0) {
        return res.status(400).json({ message: "\u0627\u0644\u0645\u0628\u0644\u063A \u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0631\u0642\u0645\u0627\u064B \u0645\u0648\u062C\u0628\u0627\u064B" });
      }
      const success = await transferReferralBalance(userId, currency, amount);
      if (!success) {
        return res.status(400).json({ message: "\u0641\u0634\u0644 \u0641\u064A \u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0631\u0635\u064A\u062F - \u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0631\u0635\u064A\u062F \u0627\u0644\u0645\u062A\u0627\u062D" });
      }
      res.json({ message: "\u062A\u0645 \u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0631\u0635\u064A\u062F \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u0648\u064A\u0644 \u0631\u0635\u064A\u062F \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0631\u0635\u064A\u062F" });
    }
  });
  app2.get("/api/referral/validate/:code", async (req, res) => {
    try {
      const { code: code2 } = req.params;
      const validation = await validateReferralCode(code2);
      res.json(validation);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0631\u0645\u0632" });
    }
  });
  app2.get("/api/referral/validate/:code", async (req, res) => {
    try {
      const { code: code2 } = req.params;
      const result = await validateReferralCode(code2);
      res.json(result);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0631\u0645\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/referral/stats", authMiddleware, async (req, res) => {
    try {
      const stats = await getUserReferralStats(req.user.id);
      res.json(stats);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/referral/rewards", authMiddleware, async (req, res) => {
    try {
      const rewards2 = await getUserReferralRewards(req.user.id);
      res.json(rewards2);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/commission/earnings", authMiddleware, async (req, res) => {
    try {
      const userId = req.user.id;
      const commissionEarnings = await db.select({
        id: commissionLogs.id,
        commissionAmount: commissionLogs.commissionAmount,
        commissionCurrency: commissionLogs.commissionCurrency,
        offerType: commissionLogs.offerType,
        action: commissionLogs.action,
        description: commissionLogs.description,
        createdAt: commissionLogs.createdAt,
        sourceId: commissionLogs.sourceId
      }).from(commissionLogs).where(and9(
        eq10(commissionLogs.userId, userId),
        eq10(commissionLogs.action, "earned")
      )).orderBy(desc8(commissionLogs.createdAt)).limit(50);
      const totals = commissionEarnings.reduce((acc, log2) => {
        const currency = log2.commissionCurrency;
        const amount = parseFloat(log2.commissionAmount);
        acc[currency] = (acc[currency] || 0) + amount;
        return acc;
      }, {});
      res.json({
        earnings: commissionEarnings,
        totals
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u062A\u0633\u0628\u0629:", error);
      res.status(500).json({ message: "\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0639\u0645\u0648\u0644\u0627\u062A \u0627\u0644\u0645\u0643\u062A\u0633\u0628\u0629" });
    }
  });
  app2.get("/api/referral/my-referrals", authMiddleware, async (req, res) => {
    try {
      const referrals = await db.select({
        id: users.id,
        referredUserName: users.fullName,
        referredUserEmail: users.email,
        joinedAt: users.createdAt,
        // تحديد الحالة كـ "نشط" لجميع المستخدمين المسجلين
        status: sql12`'active'`
      }).from(users).where(eq10(users.referredBy, req.user.id)).orderBy(desc8(users.createdAt));
      res.json(referrals);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0627\u062A:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0625\u062D\u0627\u0644\u0627\u062A" });
    }
  });
  app2.get("/api/users/:id", async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      if (isNaN(userId)) {
        return res.status(400).json({ error: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0635\u0627\u0644\u062D" });
      }
      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ error: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      res.json({
        id: user.id,
        fullName: user.fullName
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
    }
  });
  app2.get("/api/admin/referral/settings", authMiddleware, requirePermission("canManageSettings"), async (req, res) => {
    try {
      const settings = {
        referralCommissionPercentage: await getSetting("referral_commission_percentage", 5),
        referralSignupBonus: await getSetting("referral_signup_bonus", 10),
        maxReferralLevels: await getSetting("max_referral_levels", 2),
        minReferralAmount: await getSetting("min_referral_amount", 1)
      };
      res.json(settings);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.post("/api/admin/referral/settings", authMiddleware, requirePermission("canManageSettings"), async (req, res) => {
    try {
      console.log("\u{1F4CA} \u0637\u0644\u0628 \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", req.user.id);
      console.log("\u{1F4E6} \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0648\u0627\u0631\u062F\u0629:", req.body);
      const { referralCommissionPercentage, referralSignupBonus, maxReferralLevels, minReferralAmount } = req.body;
      if (isNaN(Number(referralCommissionPercentage)) || isNaN(Number(referralSignupBonus)) || isNaN(Number(maxReferralLevels)) || isNaN(Number(minReferralAmount))) {
        return res.status(400).json({ error: "\u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0627\u0644\u0645\u062F\u062E\u0644\u0629 \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629" });
      }
      console.log("\u{1F4BE} \u0628\u062F\u0621 \u062D\u0641\u0638 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A...");
      await Promise.all([
        setSetting("referral_commission_percentage", Number(referralCommissionPercentage)),
        setSetting("referral_signup_bonus", Number(referralSignupBonus)),
        setSetting("max_referral_levels", Number(maxReferralLevels)),
        setSetting("min_referral_amount", Number(minReferralAmount))
      ]);
      console.log("\u2705 \u062A\u0645 \u062D\u0641\u0638 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629 \u0628\u0646\u062C\u0627\u062D");
      res.json({ success: true, message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ error: `\u0641\u0634\u0644 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A: ${error.message}` });
    }
  });
  app2.post("/api/admin/referral/generate-codes", authMiddleware, requirePermission("canManageSettings"), async (req, res) => {
    try {
      const usersWithoutCodes = await db.select({ id: users.id }).from(users).where(isNull2(users.referralCode));
      let generated = 0;
      for (const user of usersWithoutCodes) {
        let referralCode;
        let isUnique = false;
        let attempts = 0;
        while (!isUnique && attempts < 10) {
          referralCode = generateReferralCode();
          const existing = await db.select({ id: users.id }).from(users).where(eq10(users.referralCode, referralCode)).limit(1);
          if (existing.length === 0) {
            isUnique = true;
          }
          attempts++;
        }
        if (isUnique && referralCode) {
          await db.update(users).set({ referralCode }).where(eq10(users.id, user.id));
          generated++;
        }
      }
      res.json({
        success: true,
        message: `\u062A\u0645 \u062A\u0648\u0644\u064A\u062F ${generated} \u0631\u0645\u0632 \u0625\u062D\u0627\u0644\u0629 \u062C\u062F\u064A\u062F`,
        generated
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0648\u0644\u064A\u062F \u0631\u0645\u0648\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062A\u0648\u0644\u064A\u062F \u0631\u0645\u0648\u0632 \u0627\u0644\u0625\u062D\u0627\u0644\u0629" });
    }
  });
  app2.get("/api/admin/referral/fixed-rewards", authMiddleware, requirePermission("canManageSettings"), async (req, res) => {
    try {
      const settings = {
        lydReward: await getSetting("referral.fixed_reward_lyd", { amount: 1 }),
        usdReward: await getSetting("referral.fixed_reward_usd", { amount: 0.5 }),
        marketReward: await getSetting("referral.fixed_reward_market_sell", { amount: 5e-3 }),
        systemFeeRate: await getSetting("referral.system_fee_rate", { rate: 0.1 })
      };
      res.json(settings);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u062B\u0627\u0628\u062A\u0629:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.put("/api/admin/referral/fixed-rewards", authMiddleware, requirePermission("canManageSettings"), async (req, res) => {
    try {
      const { lydReward, usdReward, marketReward, systemFeeRate } = req.body;
      if (typeof lydReward?.amount !== "number" || lydReward.amount < 0) {
        return res.status(400).json({ error: "\u0645\u0643\u0627\u0641\u0623\u0629 \u062A\u062D\u0648\u064A\u0644 LYD \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645 \u0645\u0648\u062C\u0628" });
      }
      if (typeof usdReward?.amount !== "number" || usdReward.amount < 0) {
        return res.status(400).json({ error: "\u0645\u0643\u0627\u0641\u0623\u0629 \u062A\u062D\u0648\u064A\u0644 USD \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645 \u0645\u0648\u062C\u0628" });
      }
      if (typeof marketReward?.amount !== "number" || marketReward.amount < 0) {
        return res.status(400).json({ error: "\u0645\u0643\u0627\u0641\u0623\u0629 \u0628\u064A\u0639 \u0627\u0644\u0633\u0648\u0642 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0631\u0642\u0645 \u0645\u0648\u062C\u0628" });
      }
      if (typeof systemFeeRate?.rate !== "number" || systemFeeRate.rate < 0 || systemFeeRate.rate > 1) {
        return res.status(400).json({ error: "\u0646\u0633\u0628\u0629 \u0631\u0633\u0648\u0645 \u0627\u0644\u0646\u0638\u0627\u0645 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0628\u064A\u0646 0 \u0648 1" });
      }
      await setSetting("referral.fixed_reward_lyd", lydReward);
      await setSetting("referral.fixed_reward_usd", usdReward);
      await setSetting("referral.fixed_reward_market_sell", marketReward);
      await setSetting("referral.system_fee_rate", systemFeeRate);
      res.json({
        success: true,
        message: "\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u062B\u0627\u0628\u062A\u0629 \u0628\u0646\u062C\u0627\u062D",
        settings: { lydReward, usdReward, marketReward, systemFeeRate }
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0625\u0639\u062F\u0627\u062F\u0627\u062A \u0627\u0644\u0645\u0643\u0627\u0641\u0622\u062A \u0627\u0644\u062B\u0627\u0628\u062A\u0629:", error);
      res.status(500).json({ error: "\u0641\u0634\u0644 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A" });
    }
  });
  app2.get("/api/admin/referral/overview", authMiddleware, requirePermission("canManageReports"), async (req, res) => {
    try {
      const totalReferredResult = await db.select({ count: sql12`COUNT(*)` }).from(users).where(isNotNull2(users.referredBy));
      const totalRewardsResult = await db.select({
        currency: referralRewards.currency,
        total: sql12`SUM(${referralRewards.rewardAmount})`
      }).from(referralRewards).where(eq10(referralRewards.status, "paid")).groupBy(referralRewards.currency);
      const topReferrersResult = await db.select({
        referrerId: referralRewards.referrerId,
        totalRewards: sql12`SUM(${referralRewards.rewardAmount})`,
        referralCount: sql12`COUNT(*)`
      }).from(referralRewards).where(eq10(referralRewards.status, "paid")).groupBy(referralRewards.referrerId).orderBy(sql12`SUM(${referralRewards.rewardAmount}) DESC`).limit(10);
      const topReferrers = await Promise.all(
        topReferrersResult.map(async (referrer) => {
          const user = await storage.getUser(referrer.referrerId);
          return {
            ...referrer,
            referrerName: user?.fullName || "\u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641",
            referrerAccountNumber: user?.accountNumber
          };
        })
      );
      res.json({
        totalReferred: totalReferredResult[0]?.count || 0,
        totalRewards: totalRewardsResult,
        topReferrers
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u0639\u0644\u0649 \u0646\u0638\u0627\u0645 \u0627\u0644\u0625\u062D\u0627\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A" });
    }
  });
  const checkRestrictionsAdmin = (req, res, next) => {
    const authorizedEmail = "ss73ss73ss73@gmail.com";
    if (req.user.email !== authorizedEmail) {
      return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u064F\u0635\u0631\u062D \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0644\u0647\u0630\u0647 \u0627\u0644\u0648\u0638\u064A\u0641\u0629" });
    }
    next();
  };
  const logAuditAction = async (actorId, action, entity, entityId, data) => {
    try {
      await db.insert(auditLogs).values({
        actorId,
        action,
        entity,
        entityId,
        data: data || {}
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0627\u0644\u0639\u0645\u0644\u064A\u0629:", error);
    }
  };
  app2.post("/api/restrictions/global", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const { pageKey, reason, isActive: requestIsActive = true, expiresAt, allowedUsers = [] } = req.body;
      const isActive = true;
      if (!pageKey) {
        return res.status(400).json({ message: "\u0645\u0641\u062A\u0627\u062D \u0627\u0644\u0635\u0641\u062D\u0629 \u0645\u0637\u0644\u0648\u0628" });
      }
      const globalRestriction = await db.insert(pageRestrictions).values({
        userId: null,
        // القيود الشاملة لها userId = null
        accountNumber: "GLOBAL",
        // معرف خاص للقيود الشاملة
        pageKey,
        scope: "global",
        reason: reason || `\u0642\u064A\u062F \u0634\u0627\u0645\u0644 \u0639\u0644\u0649 \u0635\u0641\u062D\u0629 ${pageKey}`,
        isActive,
        expiresAt: expiresAt ? new Date(expiresAt) : null,
        createdBy: req.user.id
      }).returning();
      if (allowedUsers.length > 0) {
        for (const userIdentifier of allowedUsers) {
          let user;
          if (userIdentifier.includes("@")) {
            user = await db.select().from(users).where(eq10(users.email, userIdentifier)).limit(1);
          } else {
            user = await db.select().from(users).where(eq10(users.accountNumber, userIdentifier)).limit(1);
          }
          if (user.length > 0) {
            await db.insert(pageRestrictions).values({
              userId: user[0].id,
              accountNumber: user[0].accountNumber,
              pageKey,
              scope: "exception",
              reason: `\u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0645\u0646 \u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644 \u0639\u0644\u0649 ${pageKey}`,
              isActive: false,
              // false يعني هذا استثناء (مسموح)
              expiresAt: expiresAt ? new Date(expiresAt) : null,
              createdBy: req.user.id
            });
          }
        }
      }
      await logAuditAction(req.user.id, "create_global_restriction", "page_restrictions", globalRestriction[0]?.id, {
        type: "global_restriction_created",
        pageKey,
        allowedUsersCount: allowedUsers.length
      });
      res.json({
        message: "\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644 \u0628\u0646\u062C\u0627\u062D",
        restriction: globalRestriction[0],
        allowedUsersCount: allowedUsers.length
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644" });
    }
  });
  app2.get("/api/restrictions/global", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const globalRestrictions = await db.select({
        id: pageRestrictions.id,
        pageKey: pageRestrictions.pageKey,
        reason: pageRestrictions.reason,
        isActive: pageRestrictions.isActive,
        expiresAt: pageRestrictions.expiresAt,
        createdAt: pageRestrictions.createdAt,
        createdByName: users.fullName
      }).from(pageRestrictions).leftJoin(users, eq10(pageRestrictions.createdBy, users.id)).where(and9(
        isNull2(pageRestrictions.userId),
        // القيود الشاملة لها userId = null
        eq10(pageRestrictions.scope, "global")
      )).orderBy(desc8(pageRestrictions.createdAt));
      const restrictionsWithExceptions = await Promise.all(
        globalRestrictions.map(async (restriction) => {
          const exceptions = await db.select({
            id: pageRestrictions.id,
            userId: pageRestrictions.userId,
            accountNumber: pageRestrictions.accountNumber,
            fullName: users.fullName,
            email: users.email
          }).from(pageRestrictions).leftJoin(users, eq10(pageRestrictions.userId, users.id)).where(and9(
            eq10(pageRestrictions.pageKey, restriction.pageKey),
            eq10(pageRestrictions.scope, "exception"),
            eq10(pageRestrictions.isActive, true)
            // الاستثناءات النشطة لها isActive = true
          ));
          return {
            ...restriction,
            exceptions
          };
        })
      );
      res.json(restrictionsWithExceptions);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0642\u064A\u0648\u062F \u0627\u0644\u0634\u0627\u0645\u0644\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0642\u064A\u0648\u062F \u0627\u0644\u0634\u0627\u0645\u0644\u0629" });
    }
  });
  app2.post("/api/restrictions/global/:pageKey/exceptions", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const { pageKey } = req.params;
      const { userIdentifier } = req.body;
      if (!userIdentifier) {
        return res.status(400).json({ message: "\u0645\u0639\u0631\u0641 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0645\u0637\u0644\u0648\u0628" });
      }
      let user;
      if (userIdentifier.includes("@")) {
        user = await db.select().from(users).where(eq10(users.email, userIdentifier)).limit(1);
      } else {
        user = await db.select().from(users).where(eq10(users.accountNumber, userIdentifier)).limit(1);
      }
      if (!user.length) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const globalRestriction = await db.select().from(pageRestrictions).where(and9(
        isNull2(pageRestrictions.userId),
        eq10(pageRestrictions.pageKey, pageKey),
        eq10(pageRestrictions.scope, "global"),
        eq10(pageRestrictions.isActive, true)
      )).limit(1);
      if (!globalRestriction.length) {
        return res.status(404).json({ message: "\u0644\u0627 \u064A\u0648\u062C\u062F \u0642\u064A\u062F \u0634\u0627\u0645\u0644 \u0646\u0634\u0637 \u0639\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629" });
      }
      const existingException = await db.select().from(pageRestrictions).where(and9(
        eq10(pageRestrictions.userId, user[0].id),
        eq10(pageRestrictions.pageKey, pageKey),
        eq10(pageRestrictions.scope, "exception")
      )).limit(1);
      if (existingException.length) {
        return res.status(409).json({ message: "\u064A\u0648\u062C\u062F \u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0645\u0633\u0628\u0642 \u0644\u0647\u0630\u0627 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
      }
      const exception = await db.insert(pageRestrictions).values({
        userId: user[0].id,
        accountNumber: user[0].accountNumber,
        pageKey,
        scope: "exception",
        reason: `\u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0645\u0646 \u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644 \u0639\u0644\u0649 ${pageKey}`,
        isActive: false,
        // false يعني هذا استثناء (مسموح)
        createdBy: req.user.id
      }).returning();
      await logAuditAction(req.user.id, "add_exception", "page_restrictions", exception[0]?.id, {
        type: "exception_added",
        pageKey,
        targetUserId: user[0].id,
        accountNumber: user[0].accountNumber
      });
      res.json({
        message: "\u062A\u0645 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0628\u0646\u062C\u0627\u062D",
        exception: exception[0]
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621" });
    }
  });
  const bulkExceptionsSchema = z2.object({
    identifiers: z2.array(z2.string().min(1)).min(1).max(100),
    reason: z2.string().optional().default("\u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0625\u062F\u062E\u0627\u0644 \u0645\u062A\u0639\u062F\u062F")
  });
  app2.post("/api/restrictions/global/:pageKey/exceptions/bulk", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const { pageKey } = req.params;
      const validationResult = bulkExceptionsSchema.safeParse(req.body);
      if (!validationResult.success) {
        return res.status(400).json({
          message: "\u0628\u064A\u0627\u0646\u0627\u062A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629",
          errors: validationResult.error.issues
        });
      }
      const { identifiers, reason } = validationResult.data;
      const globalRestriction = await db.select().from(pageRestrictions).where(and9(
        isNull2(pageRestrictions.userId),
        eq10(pageRestrictions.scope, "global"),
        or4(
          eq10(pageRestrictions.pageKey, pageKey),
          eq10(pageRestrictions.pageKey, "all")
        ),
        eq10(pageRestrictions.isActive, true)
      )).limit(1);
      if (!globalRestriction.length) {
        return res.status(404).json({ message: "\u0644\u0627 \u064A\u0648\u062C\u062F \u0642\u064A\u062F \u0634\u0627\u0645\u0644 \u0646\u0634\u0637 \u0644\u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629" });
      }
      console.log(`\u{1F50D} [\u0625\u0636\u0627\u0641\u0629 \u0627\u0633\u062A\u062B\u0646\u0627\u0621\u0627\u062A \u0645\u062A\u0639\u062F\u062F\u0629] \u0645\u0639\u0627\u0644\u062C\u0629 ${identifiers.length} \u0645\u0639\u0631\u0641 \u0644\u0644\u0635\u0641\u062D\u0629: ${pageKey}`);
      const results = [];
      const uniqueIdentifiers = [...new Set(identifiers)];
      let addedCount = 0;
      await db.transaction(async (tx) => {
        for (const identifier of uniqueIdentifiers) {
          try {
            let user;
            if (identifier.includes("@")) {
              user = await tx.select().from(users).where(eq10(users.email, identifier.trim())).limit(1);
            } else {
              user = await tx.select().from(users).where(eq10(users.accountNumber, identifier.trim())).limit(1);
            }
            if (!user.length) {
              results.push({
                identifier,
                status: "not_found",
                message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F"
              });
              continue;
            }
            const foundUser = user[0];
            const existingException = await tx.select().from(pageRestrictions).where(and9(
              eq10(pageRestrictions.userId, foundUser.id),
              or4(
                eq10(pageRestrictions.pageKey, pageKey),
                eq10(pageRestrictions.pageKey, "all")
              ),
              eq10(pageRestrictions.scope, "exception")
            )).limit(1);
            if (existingException.length > 0) {
              results.push({
                identifier,
                userId: foundUser.id,
                accountNumber: foundUser.accountNumber,
                status: "exists",
                message: "\u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0645\u0648\u062C\u0648\u062F \u0645\u0633\u0628\u0642\u0627\u064B"
              });
              continue;
            }
            const newException = await tx.insert(pageRestrictions).values({
              userId: foundUser.id,
              pageKey,
              scope: "exception",
              reason,
              isActive: true,
              expiresAt: globalRestriction[0].expiresAt,
              // وراثة تاريخ الانتهاء
              createdBy: req.user.id
            }).returning();
            results.push({
              identifier,
              userId: foundUser.id,
              accountNumber: foundUser.accountNumber,
              status: "added",
              message: "\u062A\u0645 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0628\u0646\u062C\u0627\u062D"
            });
            addedCount++;
          } catch (error) {
            console.error(`\u062E\u0637\u0623 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0645\u0639\u0631\u0641 ${identifier}:`, error);
            results.push({
              identifier,
              status: "error",
              message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0645\u0639\u0627\u0644\u062C\u0629"
            });
          }
        }
      });
      await logAuditAction(req.user.id, "add_bulk_exceptions", "page_restrictions", globalRestriction[0].id, {
        type: "bulk_exceptions_added",
        pageKey,
        totalSubmitted: identifiers.length,
        uniqueSubmitted: uniqueIdentifiers.length,
        addedCount,
        results: results.map((r) => ({ identifier: r.identifier, status: r.status }))
      });
      console.log(`\u2705 [\u0625\u0636\u0627\u0641\u0629 \u0627\u0633\u062A\u062B\u0646\u0627\u0621\u0627\u062A \u0645\u062A\u0639\u062F\u062F\u0629] \u062A\u0645\u062A \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0639\u0645\u0644\u064A\u0629: ${addedCount} \u0625\u0636\u0627\u0641\u0629 \u0645\u0646 \u0623\u0635\u0644 ${uniqueIdentifiers.length} \u0645\u0639\u0631\u0641`);
      res.json({
        message: `\u062A\u0645\u062A \u0645\u0639\u0627\u0644\u062C\u0629 \u0627\u0644\u0639\u0645\u0644\u064A\u0629: \u062A\u0645 \u0625\u0636\u0627\u0641\u0629 ${addedCount} \u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0645\u0646 \u0623\u0635\u0644 ${uniqueIdentifiers.length} \u0645\u0639\u0631\u0641`,
        summary: {
          totalSubmitted: identifiers.length,
          uniqueIdentifiers: uniqueIdentifiers.length,
          addedCount,
          existsCount: results.filter((r) => r.status === "exists").length,
          notFoundCount: results.filter((r) => r.status === "not_found").length,
          errorCount: results.filter((r) => r.status === "error").length
        },
        results
      });
    } catch (error) {
      console.error("\u274C [\u0625\u0636\u0627\u0641\u0629 \u0627\u0633\u062A\u062B\u0646\u0627\u0621\u0627\u062A \u0645\u062A\u0639\u062F\u062F\u0629] \u062E\u0637\u0623:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0636\u0627\u0641\u0629 \u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621\u0627\u062A \u0627\u0644\u0645\u062A\u0639\u062F\u062F\u0629" });
    }
  });
  app2.delete("/api/restrictions/global/:pageKey/exceptions/:userId", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const { pageKey, userId } = req.params;
      const deletedExceptions = await db.delete(pageRestrictions).where(and9(
        eq10(pageRestrictions.userId, parseInt(userId)),
        eq10(pageRestrictions.pageKey, pageKey),
        eq10(pageRestrictions.scope, "exception")
      )).returning();
      if (!deletedExceptions.length) {
        return res.status(404).json({ message: "\u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      await logAuditAction(req.user.id, "remove_exception", "page_restrictions", deletedExceptions[0].id, {
        type: "exception_removed",
        pageKey,
        targetUserId: parseInt(userId)
      });
      res.json({ message: "\u062A\u0645 \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0627\u0633\u062A\u062B\u0646\u0627\u0621" });
    }
  });
  app2.delete("/api/restrictions/global/:pageKey", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const { pageKey } = req.params;
      await db.delete(pageRestrictions).where(and9(
        eq10(pageRestrictions.pageKey, pageKey),
        eq10(pageRestrictions.scope, "exception")
      ));
      const deletedRestrictions = await db.delete(pageRestrictions).where(and9(
        isNull2(pageRestrictions.userId),
        eq10(pageRestrictions.pageKey, pageKey),
        eq10(pageRestrictions.scope, "global")
      )).returning();
      if (!deletedRestrictions.length) {
        return res.status(404).json({ message: "\u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      await logAuditAction(req.user.id, "remove_global_restriction", "page_restrictions", deletedRestrictions[0].id, {
        type: "global_restriction_removed",
        pageKey
      });
      res.json({ message: "\u062A\u0645 \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644 \u0648\u062C\u0645\u064A\u0639 \u0627\u0633\u062A\u062B\u0646\u0627\u0621\u0627\u062A\u0647 \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0642\u064A\u062F \u0627\u0644\u0634\u0627\u0645\u0644" });
    }
  });
  app2.post("/api/restrictions", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const { userIdentifier, pageKey, scope = "page", reason, isActive = true, expiresAt } = req.body;
      let user;
      if (userIdentifier.includes("@")) {
        user = await db.select().from(users).where(eq10(users.email, userIdentifier)).limit(1);
      } else {
        user = await db.select().from(users).where(eq10(users.accountNumber, userIdentifier)).limit(1);
      }
      if (!user.length) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const targetUser = user[0];
      if (targetUser.email === "ss73ss73ss73@gmail.com") {
        return res.status(400).json({ message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062A\u0637\u0628\u064A\u0642 \u0642\u064A\u0648\u062F \u0639\u0644\u0649 \u0627\u0644\u062D\u0633\u0627\u0628 \u0627\u0644\u0645\u064F\u0635\u0631\u062D \u0644\u0647" });
      }
      let expirationDate = null;
      if (expiresAt && expiresAt !== "") {
        expirationDate = new Date(expiresAt);
      }
      if (!pageKey || !scope) {
        return res.status(400).json({ message: "\u064A\u062C\u0628 \u062A\u062D\u062F\u064A\u062F \u0646\u0648\u0639 \u0627\u0644\u0635\u0641\u062D\u0629 \u0648\u0627\u0644\u0646\u0637\u0627\u0642" });
      }
      console.log("\u0625\u0636\u0627\u0641\u0629 \u0642\u064A\u062F \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", {
        userId: targetUser.id,
        accountNumber: targetUser.accountNumber,
        pageKey,
        scope,
        reason,
        isActive,
        expiresAt: expirationDate,
        createdBy: req.user.id
      });
      const restriction = await db.insert(pageRestrictions).values({
        userId: targetUser.id,
        accountNumber: targetUser.accountNumber || "",
        pageKey,
        scope,
        reason: reason || "",
        isActive,
        expiresAt: expirationDate,
        createdBy: req.user.id
      }).onConflictDoUpdate({
        target: [pageRestrictions.userId, pageRestrictions.pageKey],
        set: {
          scope,
          reason: reason || "",
          isActive,
          expiresAt: expirationDate,
          createdBy: req.user.id
        }
      }).returning();
      await logAuditAction(req.user.id, "upsert_restriction", "page_restrictions", restriction[0]?.id, {
        type: "restriction_upsert",
        pageKey,
        scope,
        isActive,
        accountNumber: targetUser.accountNumber,
        targetUserId: targetUser.id
      });
      res.json({ message: "\u062A\u0645 \u062D\u0641\u0638 \u0627\u0644\u0642\u064A\u062F \u0628\u0646\u062C\u0627\u062D", restriction: restriction[0] });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u062F\u0627\u0631\u0629 \u0627\u0644\u0642\u064A\u0648\u062F:", error);
      if (error instanceof Error) {
        if (error.message.includes("duplicate key")) {
          res.status(400).json({ message: "\u064A\u0648\u062C\u062F \u0642\u064A\u062F \u0645\u0645\u0627\u062B\u0644 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0639\u0644\u0649 \u0647\u0630\u0647 \u0627\u0644\u0635\u0641\u062D\u0629 \u0628\u0627\u0644\u0641\u0639\u0644" });
        } else if (error.message.includes("foreign key")) {
          res.status(400).json({ message: "\u0628\u064A\u0627\u0646\u0627\u062A \u063A\u064A\u0631 \u0635\u062D\u064A\u062D\u0629\u060C \u062A\u0623\u0643\u062F \u0645\u0646 \u0648\u062C\u0648\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645" });
        } else if (error.message.includes("not null")) {
          res.status(400).json({ message: "\u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0644 \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629 \u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0645\u0639\u0628\u0623\u0629" });
        } else {
          res.status(500).json({ message: `\u062E\u0637\u0623 \u0641\u064A \u062D\u0641\u0638 \u0627\u0644\u0642\u064A\u062F: ${error.message}` });
        }
      } else {
        res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u062A\u0648\u0642\u0639 \u0623\u062B\u0646\u0627\u0621 \u062D\u0641\u0638 \u0627\u0644\u0642\u064A\u062F" });
      }
    }
  });
  app2.get("/api/restrictions/:userIdentifier", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const { userIdentifier } = req.params;
      let user;
      if (userIdentifier.includes("@")) {
        user = await db.select().from(users).where(eq10(users.email, userIdentifier)).limit(1);
      } else {
        user = await db.select().from(users).where(eq10(users.accountNumber, userIdentifier)).limit(1);
      }
      if (!user.length) {
        return res.status(404).json({ message: "\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      const targetUser = user[0];
      const restrictions = await db.select({
        id: pageRestrictions.id,
        pageKey: pageRestrictions.pageKey,
        scope: pageRestrictions.scope,
        reason: pageRestrictions.reason,
        isActive: pageRestrictions.isActive,
        expiresAt: pageRestrictions.expiresAt,
        createdAt: pageRestrictions.createdAt,
        createdByName: users.fullName
      }).from(pageRestrictions).leftJoin(users, eq10(pageRestrictions.createdBy, users.id)).where(eq10(pageRestrictions.userId, targetUser.id)).orderBy(desc8(pageRestrictions.createdAt));
      res.json({
        user: {
          id: targetUser.id,
          fullName: targetUser.fullName,
          email: targetUser.email,
          accountNumber: targetUser.accountNumber,
          active: targetUser.active
        },
        restrictions
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0642\u064A\u0648\u062F:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0642\u064A\u0648\u062F" });
    }
  });
  app2.delete("/api/restrictions/:restrictionId", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const restrictionId = parseInt(req.params.restrictionId);
      const restriction = await db.select().from(pageRestrictions).where(eq10(pageRestrictions.id, restrictionId)).limit(1);
      if (!restriction.length) {
        return res.status(404).json({ message: "\u0627\u0644\u0642\u064A\u062F \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F" });
      }
      await db.delete(pageRestrictions).where(eq10(pageRestrictions.id, restrictionId));
      await logAuditAction(req.user.id, "remove_restriction", "page_restrictions", restrictionId, {
        type: "restriction_removed",
        pageKey: restriction[0].pageKey,
        userId: restriction[0].userId
      });
      res.json({ message: "\u062A\u0645 \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0642\u064A\u062F \u0628\u0646\u062C\u0627\u062D" });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0642\u064A\u062F:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0642\u064A\u062F" });
    }
  });
  app2.get("/api/my-restrictions", authMiddleware, async (req, res) => {
    try {
      if (isSuperAdmin(req.user.email, req.user.id)) {
        return res.json({
          restrictedPages: [],
          hasGlobalRestriction: false,
          restrictions: []
        });
      }
      const restrictions = await db.select({
        pageKey: pageRestrictions.pageKey,
        scope: pageRestrictions.scope,
        reason: pageRestrictions.reason,
        expiresAt: pageRestrictions.expiresAt
      }).from(pageRestrictions).where(and9(
        or4(
          eq10(pageRestrictions.userId, req.user.id),
          // قيود خاصة بالمستخدم
          isNull2(pageRestrictions.userId)
          // قيود شاملة
        ),
        eq10(pageRestrictions.isActive, true),
        or4(
          isNull2(pageRestrictions.expiresAt),
          gte5(pageRestrictions.expiresAt, /* @__PURE__ */ new Date())
        )
      ));
      const restrictedPages = restrictions.map((r) => r.pageKey);
      const hasGlobalRestriction = restrictedPages.includes("all");
      res.json({
        restrictedPages,
        hasGlobalRestriction,
        restrictions: restrictions.map((r) => ({
          pageKey: r.pageKey,
          reason: r.reason,
          expiresAt: r.expiresAt
        }))
      });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0642\u064A\u0648\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0642\u064A\u0648\u062F" });
    }
  });
  app2.get("/api/check-restriction/:pageKey", authMiddleware, async (req, res) => {
    try {
      const { pageKey } = req.params;
      console.log(`\u{1F50D} [API \u062A\u062D\u0642\u0642 \u0642\u064A\u0648\u062F] \u0641\u062D\u0635 \u0642\u064A\u0648\u062F \u0635\u0641\u062D\u0629: ${pageKey} \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ID: ${req.user.id}`);
      if (isSuperAdmin(req.user.email, req.user.id)) {
        console.log(`\u{1F511} Super Admin \u062A\u062C\u0627\u0648\u0632 \u0642\u064A\u0648\u062F \u0635\u0641\u062D\u0629 ${pageKey}`);
        return res.json({ isBlocked: false, reason: null });
      }
      console.log(`\u{1F4CA} \u0628\u062D\u062B \u0639\u0646 \u0642\u064A\u0648\u062F \u0634\u0627\u0645\u0644\u0629 \u0644\u0635\u0641\u062D\u0629 ${pageKey}...`);
      const globalRestriction = await db.select().from(pageRestrictions).where(and9(
        isNull2(pageRestrictions.userId),
        // قيود شاملة فقط
        eq10(pageRestrictions.scope, "global"),
        // تحديد واضح للنطاق
        or4(
          eq10(pageRestrictions.pageKey, pageKey),
          eq10(pageRestrictions.pageKey, "all")
        ),
        eq10(pageRestrictions.isActive, true),
        or4(
          isNull2(pageRestrictions.expiresAt),
          gte5(pageRestrictions.expiresAt, /* @__PURE__ */ new Date())
        )
      )).limit(1);
      if (globalRestriction.length > 0) {
        console.log(`\u{1F50D} [API \u0642\u064A\u062F \u0634\u0627\u0645\u0644] \u0648\u064F\u062C\u062F \u0642\u064A\u062F \u0634\u0627\u0645\u0644 \u0646\u0634\u0637: ${globalRestriction[0].reason}`);
        console.log(`\u{1F50D} [API \u0627\u0633\u062A\u062B\u0646\u0627\u0621] \u0628\u062D\u062B \u0639\u0646 \u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${req.user.id}...`);
        const userException = await db.select().from(pageRestrictions).where(and9(
          eq10(pageRestrictions.userId, req.user.id),
          or4(
            eq10(pageRestrictions.pageKey, pageKey),
            eq10(pageRestrictions.pageKey, "all")
          ),
          eq10(pageRestrictions.scope, "exception"),
          // ❌ إزالة شرط isActive = false (كان يسبب المشكلة)
          or4(
            isNull2(pageRestrictions.expiresAt),
            gte5(pageRestrictions.expiresAt, /* @__PURE__ */ new Date())
          )
        )).orderBy(pageRestrictions.createdAt).limit(1);
        if (userException.length > 0) {
          console.log(`\u2705 [API \u0627\u0633\u062A\u062B\u0646\u0627\u0621] \u0648\u064F\u062C\u062F \u0627\u0633\u062A\u062B\u0646\u0627\u0621 \u0644\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userException[0].reason}`);
          return res.json({ isBlocked: false, reason: null });
        }
        console.log(`\u{1F6AB} [API \u0631\u0641\u0636] \u0644\u0627 \u064A\u0648\u062C\u062F \u0627\u0633\u062A\u062B\u0646\u0627\u0621 - \u0633\u064A\u062A\u0645 \u0645\u0646\u0639 \u0627\u0644\u0648\u0635\u0648\u0644`);
        return res.json({
          isBlocked: true,
          reason: globalRestriction[0].reason || "\u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D \u0628\u0627\u0644\u0648\u0635\u0648\u0644"
        });
      }
      console.log(`\u{1F4CA} \u0628\u062D\u062B \u0639\u0646 \u0642\u064A\u0648\u062F \u062E\u0627\u0635\u0629 \u0628\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${req.user.id}...`);
      const userRestriction = await db.select().from(pageRestrictions).where(and9(
        eq10(pageRestrictions.userId, req.user.id),
        or4(
          eq10(pageRestrictions.pageKey, pageKey),
          eq10(pageRestrictions.pageKey, "all")
        ),
        eq10(pageRestrictions.isActive, true),
        or4(
          isNull2(pageRestrictions.expiresAt),
          gte5(pageRestrictions.expiresAt, /* @__PURE__ */ new Date())
        )
      )).limit(1);
      if (userRestriction.length > 0) {
        console.log(`\u{1F6AB} [API \u0642\u064A\u062F \u062E\u0627\u0635] \u0648\u064F\u062C\u062F \u0642\u064A\u062F \u062E\u0627\u0635 \u0628\u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645: ${userRestriction[0].reason}`);
        return res.json({
          isBlocked: true,
          reason: userRestriction[0].reason || "\u063A\u064A\u0631 \u0645\u0633\u0645\u0648\u062D \u0628\u0627\u0644\u0648\u0635\u0648\u0644"
        });
      }
      console.log(`\u2705 [API \u062A\u062D\u0642\u0642 \u0642\u064A\u0648\u062F] \u0644\u0627 \u062A\u0648\u062C\u062F \u0642\u064A\u0648\u062F \u0644\u0635\u0641\u062D\u0629 ${pageKey}`);
      res.json({ isBlocked: false, reason: null });
    } catch (error) {
      console.error("\u274C [API \u062A\u062D\u0642\u0642 \u0642\u064A\u0648\u062F] \u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0642\u064A\u062F:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0642\u064A\u062F" });
    }
  });
  app2.get("/api/audit-logs", authMiddleware, checkRestrictionsAdmin, async (req, res) => {
    try {
      const logs = await db.select({
        id: auditLogs.id,
        action: auditLogs.action,
        entity: auditLogs.entity,
        entityId: auditLogs.entityId,
        data: auditLogs.data,
        createdAt: auditLogs.createdAt,
        actorName: users.fullName,
        actorEmail: users.email
      }).from(auditLogs).leftJoin(users, eq10(auditLogs.actorId, users.id)).where(eq10(auditLogs.entity, "page_restrictions")).orderBy(desc8(auditLogs.createdAt)).limit(100);
      res.json(logs);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062A\u062F\u0642\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0633\u062C\u0644" });
    }
  });
  const checkDevStudioAccess = (req, res, next) => {
    if (!req.user || req.user.email !== "ss73ss73ss73@gmail.com") {
      return res.status(403).json({ message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0628\u0627\u0644\u0648\u0635\u0648\u0644 \u0625\u0644\u0649 Dev Studio" });
    }
    next();
  };
  app2.get("/api/dev-studio/pages", authMiddleware, checkDevStudioAccess, async (req, res) => {
    try {
      const pages = await db.select().from(devPages).orderBy(devPages.updatedAt);
      res.json(pages);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0635\u0641\u062D\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0635\u0641\u062D\u0627\u062A" });
    }
  });
  app2.post("/api/dev-studio/pages", authMiddleware, checkDevStudioAccess, async (req, res) => {
    try {
      const { route, titleAr, layout, status, visibility, allowedRoles } = req.body;
      const result = await pool.query(
        "SELECT dev_studio_page_upsert($1, $2, $3, $4, $5, $6, $7)",
        [route, titleAr, layout || "default", status || "draft", visibility || "public", allowedRoles || [], req.user.email]
      );
      const pageId = result.rows[0].dev_studio_page_upsert;
      res.json({ success: true, pageId });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u0625\u0646\u0634\u0627\u0621/\u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0635\u0641\u062D\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0641\u0638 \u0627\u0644\u0635\u0641\u062D\u0629" });
    }
  });
  app2.get("/api/dev-studio/feature-flags", authMiddleware, checkDevStudioAccess, async (req, res) => {
    try {
      const flags = await db.select().from(devFeatureFlags).orderBy(devFeatureFlags.key);
      res.json(flags);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0623\u0639\u0644\u0627\u0645 \u0627\u0644\u0645\u064A\u0632\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0623\u0639\u0644\u0627\u0645 \u0627\u0644\u0645\u064A\u0632\u0627\u062A" });
    }
  });
  app2.post("/api/dev-studio/feature-flags", authMiddleware, checkDevStudioAccess, async (req, res) => {
    try {
      const { key, enabled, perAccount } = req.body;
      await pool.query(
        "SELECT dev_studio_flag_set($1, $2, $3, $4)",
        [key, enabled, perAccount || {}, req.user.email]
      );
      res.json({ success: true });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062A\u062D\u062F\u064A\u062B \u0639\u0644\u0645 \u0627\u0644\u0645\u064A\u0632\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062B \u0639\u0644\u0645 \u0627\u0644\u0645\u064A\u0632\u0629" });
    }
  });
  app2.get("/api/dev-studio/themes", authMiddleware, checkDevStudioAccess, async (req, res) => {
    try {
      const themes = await db.select().from(devThemes).orderBy(devThemes.createdAt);
      res.json(themes);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0633\u0645\u0627\u062A:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0633\u0645\u0627\u062A" });
    }
  });
  app2.post("/api/dev-studio/themes", authMiddleware, checkDevStudioAccess, async (req, res) => {
    try {
      const { name, tokens, isActive } = req.body;
      if (isActive) {
        await db.update(devThemes).set({ isActive: false }).where(eq10(devThemes.isActive, true));
      }
      const [theme] = await db.insert(devThemes).values({
        name,
        tokens,
        isActive: isActive || false
      }).returning();
      await db.insert(devAuditLogs).values({
        actorEmail: req.user.email,
        action: "create",
        entity: "theme",
        entityId: theme.id,
        data: { name, tokens }
      });
      res.json({ success: true, theme });
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062D\u0641\u0638 \u0627\u0644\u0633\u0645\u0629:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0641\u0638 \u0627\u0644\u0633\u0645\u0629" });
    }
  });
  app2.get("/api/dev-studio/audit-logs", authMiddleware, checkDevStudioAccess, async (req, res) => {
    try {
      const logs = await db.select().from(devAuditLogs).orderBy(devAuditLogs.createdAt).limit(100);
      res.json(logs);
    } catch (error) {
      console.error("\u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062A\u062F\u0642\u064A\u0642:", error);
      res.status(500).json({ message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0633\u062C\u0644 \u0627\u0644\u062A\u062F\u0642\u064A\u0642" });
    }
  });
  app2.get("/api/debug/ip", async (req, res) => {
    try {
      const ipResult = getClientPublicIP(req);
      const geo = await getGeoLocation(ipResult.ip);
      res.json({
        message: "IP Debug Info",
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        ipResult,
        geoLocation: geo,
        headers: {
          "cf-connecting-ip": req.headers["cf-connecting-ip"],
          "fly-client-ip": req.headers["fly-client-ip"],
          "x-client-ip": req.headers["x-client-ip"],
          "x-real-ip": req.headers["x-real-ip"],
          "x-forwarded-for": req.headers["x-forwarded-for"]
        },
        expressData: {
          "req.ip": req.ip,
          "req.socket.remoteAddress": req.socket?.remoteAddress
        }
      });
    } catch (error) {
      res.status(500).json({ error: "Debug failed", details: error });
    }
  });
  app2.get("/api/admin/transactions", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      if (user.type !== "admin") {
        return res.status(403).json({
          message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u0639\u0631\u0636 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0625\u062F\u0627\u0631\u064A\u0629 - \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629 \u0645\u062D\u0635\u0648\u0631\u0629 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646 \u0641\u0642\u0637"
        });
      }
      const filters = {
        dateFrom: req.query.dateFrom,
        dateTo: req.query.dateTo,
        q: req.query.q,
        status: req.query.status,
        type: req.query.type,
        currency: req.query.currency,
        page: req.query.page ? parseInt(req.query.page) : 1,
        pageSize: req.query.pageSize ? parseInt(req.query.pageSize) : 50
      };
      console.log("\u{1F50D} \u062C\u0644\u0628 \u062C\u0645\u064A\u0639 \u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646 \u0645\u0646 \u062C\u0645\u064A\u0639 \u0627\u0644\u062C\u062F\u0627\u0648\u0644...");
      console.log("\u{1F4CA} \u062A\u0646\u0641\u064A\u0630 \u0627\u0633\u062A\u0639\u0644\u0627\u0645\u0627\u062A \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A \u0648\u0627\u0644\u0639\u062F...");
      const { AdminTransactionsFixed: AdminTransactionsFixed2 } = await Promise.resolve().then(() => (init_admin_transactions_fixed(), admin_transactions_fixed_exports));
      const result = await AdminTransactionsFixed2.getAllTransactions(filters);
      console.log(`\u2705 \u062A\u0645 \u062C\u0644\u0628 ${result.rows.length} \u0645\u0639\u0627\u0645\u0644\u0629 \u0645\u0646 \u0623\u0635\u0644 ${result.summary.totalCount}`);
      res.json(result);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0625\u062F\u0627\u0631\u064A\u0629:", error);
      res.status(500).json({
        error: "\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629",
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A",
        details: error.message
      });
    }
  });
  app2.delete("/api/admin/transactions/delete", authMiddleware, async (req, res) => {
    try {
      const user = req.user;
      if (user.type !== "admin") {
        return res.status(403).json({
          message: "\u063A\u064A\u0631 \u0645\u0635\u0631\u062D \u0644\u0643 \u0628\u062D\u0630\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A - \u0647\u0630\u0647 \u0627\u0644\u0639\u0645\u0644\u064A\u0629 \u0645\u062D\u0635\u0648\u0631\u0629 \u0644\u0644\u0645\u0634\u0631\u0641\u064A\u0646 \u0641\u0642\u0637"
        });
      }
      const { transactionIds } = req.body;
      if (!transactionIds || !Array.isArray(transactionIds) || transactionIds.length === 0) {
        return res.status(400).json({
          message: "\u064A\u062C\u0628 \u062A\u062D\u062F\u064A\u062F \u0645\u0639\u0631\u0641\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628 \u062D\u0630\u0641\u0647\u0627"
        });
      }
      if (transactionIds.length > 100) {
        return res.status(400).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062D\u0630\u0641 \u0623\u0643\u062B\u0631 \u0645\u0646 100 \u0645\u0639\u0627\u0645\u0644\u0629 \u0641\u064A \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u0648\u0627\u062D\u062F\u0629 \u0644\u0623\u0633\u0628\u0627\u0628 \u0623\u0645\u0646\u064A\u0629"
        });
      }
      console.log(`\u{1F5D1}\uFE0F [ADMIN DELETE] \u0627\u0644\u0645\u0634\u0631\u0641 ${user.email} (ID: ${user.id}) \u064A\u062D\u0627\u0648\u0644 \u062D\u0630\u0641 ${transactionIds.length} \u0645\u0639\u0627\u0645\u0644\u0629`);
      let deletedCount = 0;
      let errors = [];
      for (const transactionId of transactionIds) {
        try {
          const existingTransaction = await db.select().from(transactions).where(eq10(transactions.id, transactionId)).limit(1);
          if (existingTransaction.length === 0) {
            errors.push(`\u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 ${transactionId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F\u0629`);
            continue;
          }
          const deleteResult = await db.delete(transactions).where(eq10(transactions.id, transactionId));
          if (deleteResult.rowCount && deleteResult.rowCount > 0) {
            deletedCount++;
            console.log(`\u2705 \u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 ${transactionId} \u0628\u0646\u062C\u0627\u062D`);
          } else {
            errors.push(`\u0641\u0634\u0644 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 ${transactionId}`);
          }
        } catch (error) {
          console.error(`\u274C \u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 ${transactionId}:`, error);
          errors.push(`\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629 ${transactionId}: ${error.message || "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"}`);
        }
      }
      try {
        await logAuditAction(user.id, "delete_transactions", "transactions", null, {
          deletedCount,
          requestedCount: transactionIds.length,
          transactionIds,
          errors,
          adminEmail: user.email,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        });
      } catch (auditError) {
        console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0639\u0645\u0644\u064A\u0629 \u0627\u0644\u062D\u0630\u0641 \u0641\u064A \u0633\u062C\u0644 \u0627\u0644\u062A\u062F\u0642\u064A\u0642:", auditError);
      }
      const response = {
        success: true,
        message: `\u062A\u0645 \u062D\u0630\u0641 ${deletedCount} \u0645\u0639\u0627\u0645\u0644\u0629 \u0645\u0646 \u0623\u0635\u0644 ${transactionIds.length}`,
        deletedCount,
        requestedCount: transactionIds.length
      };
      if (errors.length > 0) {
        response.errors = errors;
        response.message += `. ${errors.length} \u062E\u0637\u0623 \u062D\u062F\u062B \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0639\u0645\u0644\u064A\u0629.`;
      }
      console.log(`\u{1F3AF} [ADMIN DELETE] \u0646\u062A\u064A\u062C\u0629 \u0627\u0644\u0639\u0645\u0644\u064A\u0629: \u062D\u064F\u0630\u0641 ${deletedCount} \u0645\u0646 \u0623\u0635\u0644 ${transactionIds.length} \u0645\u0639\u0627\u0645\u0644\u0629`);
      if (deletedCount === 0) {
        return res.status(500).json({
          success: false,
          message: "\u0641\u0634\u0644 \u0641\u064A \u062D\u0630\u0641 \u0623\u064A \u0645\u0639\u0627\u0645\u0644\u0629",
          errors
        });
      }
      res.json(response);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0639\u0627\u0645 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A:", error);
      res.status(500).json({
        success: false,
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A",
        error: error.message || "\u062E\u0637\u0623 \u062E\u0627\u062F\u0645 \u062F\u0627\u062E\u0644\u064A"
      });
    }
  });
  app2.get("/api/admin/transactions/stats", authMiddleware, async (req, res) => {
    try {
      console.log(`\u{1F511} [ADMIN STATS] \u0637\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${req.user.id}`);
      const user = req.user;
      if (user.type !== "admin") {
        console.log(`\u274C [ADMIN STATS] \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${user.id} \u0644\u064A\u0633 \u0645\u062F\u064A\u0631\u0627\u064B`);
        return res.status(403).json({
          success: false,
          message: "\u0635\u0644\u0627\u062D\u064A\u0629 \u0627\u0644\u0625\u062F\u0627\u0631\u0629 \u0645\u0637\u0644\u0648\u0628\u0629 \u0644\u0639\u0631\u0636 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A"
        });
      }
      const today = /* @__PURE__ */ new Date();
      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);
      const todayStats = await db.execute(sql12`
        SELECT 
          COUNT(*) as total_count,
          SUM(CASE WHEN type = 'deposit' THEN CAST(amount AS DECIMAL) ELSE 0 END) as total_deposits,
          SUM(CASE WHEN type = 'withdrawal' THEN CAST(amount AS DECIMAL) ELSE 0 END) as total_withdrawals,
          COUNT(CASE WHEN type = 'deposit' THEN 1 END) as deposit_count,
          COUNT(CASE WHEN type = 'withdrawal' THEN 1 END) as withdrawal_count,
          currency
        FROM transactions 
        WHERE created_at >= ${startOfDay.toISOString()} 
          AND created_at < ${endOfDay.toISOString()}
        GROUP BY currency
      `);
      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      const monthlyStats = await db.execute(sql12`
        SELECT 
          COUNT(*) as total_count,
          SUM(CASE WHEN type = 'deposit' THEN CAST(amount AS DECIMAL) ELSE 0 END) as total_deposits,
          SUM(CASE WHEN type = 'withdrawal' THEN CAST(amount AS DECIMAL) ELSE 0 END) as total_withdrawals,
          currency
        FROM transactions 
        WHERE created_at >= ${startOfMonth.toISOString()}
        GROUP BY currency
      `);
      const stats = {
        today: todayStats.rows.reduce((acc, row) => {
          acc[row.currency] = {
            totalCount: Number(row.total_count),
            totalDeposits: Number(row.total_deposits || 0),
            totalWithdrawals: Number(row.total_withdrawals || 0),
            depositCount: Number(row.deposit_count || 0),
            withdrawalCount: Number(row.withdrawal_count || 0)
          };
          return acc;
        }, {}),
        monthly: monthlyStats.rows.reduce((acc, row) => {
          acc[row.currency] = {
            totalCount: Number(row.total_count),
            totalDeposits: Number(row.total_deposits || 0),
            totalWithdrawals: Number(row.total_withdrawals || 0)
          };
          return acc;
        }, {})
      };
      console.log(`\u{1F4CA} [ADMIN STATS] \u062A\u0645 \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A \u0628\u0646\u062C\u0627\u062D`);
      res.json({
        success: true,
        stats
      });
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A:", error);
      res.status(500).json({
        success: false,
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062C\u0644\u0628 \u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0627\u062A",
        error: error.message || "\u062E\u0637\u0623 \u062E\u0627\u062F\u0645 \u062F\u0627\u062E\u0644\u064A"
      });
    }
  });
  app2.delete("/api/admin/transfers/delete", authMiddleware, async (req, res) => {
    try {
      console.log(`\u{1F511} [ADMIN DELETE TRANSFERS] \u0637\u0644\u0628 \u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0645\u0646 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${req.user.id}`);
      const user = req.user;
      if (user.type !== "admin") {
        console.log(`\u274C [ADMIN DELETE TRANSFERS] \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 ${user.id} \u0644\u064A\u0633 \u0645\u062F\u064A\u0631\u0627\u064B`);
        return res.status(403).json({
          success: false,
          message: "\u0635\u0644\u0627\u062D\u064A\u0629 \u0627\u0644\u0625\u062F\u0627\u0631\u0629 \u0645\u0637\u0644\u0648\u0628\u0629 \u0644\u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A"
        });
      }
      const { transferIds } = req.body;
      if (!transferIds || !Array.isArray(transferIds) || transferIds.length === 0) {
        return res.status(400).json({
          message: "\u064A\u062C\u0628 \u062A\u062D\u062F\u064A\u062F \u0645\u0639\u0631\u0641\u0627\u062A \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A \u0627\u0644\u0645\u0637\u0644\u0648\u0628 \u062D\u0630\u0641\u0647\u0627"
        });
      }
      if (transferIds.length > 100) {
        return res.status(400).json({
          message: "\u0644\u0627 \u064A\u0645\u0643\u0646 \u062D\u0630\u0641 \u0623\u0643\u062B\u0631 \u0645\u0646 100 \u062A\u062D\u0648\u064A\u0644 \u0641\u064A \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u0648\u0627\u062D\u062F\u0629 \u0644\u0623\u0633\u0628\u0627\u0628 \u0623\u0645\u0646\u064A\u0629"
        });
      }
      console.log(`\u{1F5D1}\uFE0F [ADMIN DELETE TRANSFERS] \u0627\u0644\u0645\u0634\u0631\u0641 ${user.email} (ID: ${user.id}) \u064A\u062D\u0627\u0648\u0644 \u062D\u0630\u0641 ${transferIds.length} \u062A\u062D\u0648\u064A\u0644`);
      let deletedCount = 0;
      let errors = [];
      for (const transferId of transferIds) {
        try {
          let transferType = "internal";
          let actualId;
          if (typeof transferId === "string" && transferId.includes("-")) {
            const parts = transferId.split("-");
            transferType = parts[0];
            actualId = parseInt(parts[1]);
          } else {
            actualId = parseInt(transferId);
          }
          if (isNaN(actualId)) {
            errors.push(`\u0645\u0639\u0631\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferId} \u063A\u064A\u0631 \u0635\u0627\u0644\u062D`);
            continue;
          }
          let table, existingTransfer, deleteResult;
          switch (transferType) {
            case "internal":
              existingTransfer = await db.select().from(transfers).where(eq10(transfers.id, actualId)).limit(1);
              if (existingTransfer.length === 0) {
                errors.push(`\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0627\u062E\u0644\u064A ${transferId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F`);
                continue;
              }
              deleteResult = await db.delete(transfers).where(eq10(transfers.id, actualId));
              break;
            case "city":
              existingTransfer = await db.select().from(cityTransfers).where(eq10(cityTransfers.id, actualId)).limit(1);
              if (existingTransfer.length === 0) {
                errors.push(`\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0645\u062F\u064A\u0646\u0629 ${transferId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F`);
                continue;
              }
              deleteResult = await db.delete(cityTransfers).where(eq10(cityTransfers.id, actualId));
              break;
            case "international":
              existingTransfer = await db.select().from(internationalTransfers).where(eq10(internationalTransfers.id, actualId)).limit(1);
              if (existingTransfer.length === 0) {
                errors.push(`\u0627\u0644\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u062F\u0648\u0644\u064A ${transferId} \u063A\u064A\u0631 \u0645\u0648\u062C\u0648\u062F`);
                continue;
              }
              deleteResult = await db.delete(internationalTransfers).where(eq10(internationalTransfers.id, actualId));
              break;
            default:
              errors.push(`\u0646\u0648\u0639 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferType} \u063A\u064A\u0631 \u0645\u062F\u0639\u0648\u0645`);
              continue;
          }
          if (deleteResult.rowCount && deleteResult.rowCount > 0) {
            deletedCount++;
            console.log(`\u2705 \u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferId} \u0628\u0646\u062C\u0627\u062D`);
          } else {
            errors.push(`\u0641\u0634\u0644 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferId}`);
          }
        } catch (error) {
          console.error(`\u274C \u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferId}:`, error);
          errors.push(`\u062E\u0637\u0623 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644 ${transferId}: ${error.message || "\u062E\u0637\u0623 \u063A\u064A\u0631 \u0645\u0639\u0631\u0648\u0641"}`);
        }
      }
      try {
        await logAuditAction(user.id, "delete_transfers", "transfers", null, {
          deletedCount,
          requestedCount: transferIds.length,
          transferIds,
          errors,
          adminEmail: user.email,
          timestamp: (/* @__PURE__ */ new Date()).toISOString()
        });
      } catch (auditError) {
        console.error("\u274C \u062E\u0637\u0623 \u0641\u064A \u062A\u0633\u062C\u064A\u0644 \u0639\u0645\u0644\u064A\u0629 \u0627\u0644\u062D\u0630\u0641 \u0641\u064A \u0633\u062C\u0644 \u0627\u0644\u062A\u062F\u0642\u064A\u0642:", auditError);
      }
      const response = {
        success: true,
        message: `\u062A\u0645 \u062D\u0630\u0641 ${deletedCount} \u062A\u062D\u0648\u064A\u0644 \u0645\u0646 \u0623\u0635\u0644 ${transferIds.length}`,
        deletedCount,
        requestedCount: transferIds.length
      };
      if (errors.length > 0) {
        response.errors = errors;
        response.message += `. ${errors.length} \u062E\u0637\u0623 \u062D\u062F\u062B \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0639\u0645\u0644\u064A\u0629.`;
      }
      console.log(`\u{1F3AF} [ADMIN DELETE TRANSFERS] \u0646\u062A\u064A\u062C\u0629 \u0627\u0644\u0639\u0645\u0644\u064A\u0629: \u062D\u064F\u0630\u0641 ${deletedCount} \u0645\u0646 \u0623\u0635\u0644 ${transferIds.length} \u062A\u062D\u0648\u064A\u0644`);
      if (deletedCount === 0) {
        return res.status(500).json({
          success: false,
          message: "\u0641\u0634\u0644 \u0641\u064A \u062D\u0630\u0641 \u0623\u064A \u062A\u062D\u0648\u064A\u0644",
          errors
        });
      }
      res.json(response);
    } catch (error) {
      console.error("\u274C \u062E\u0637\u0623 \u0639\u0627\u0645 \u0641\u064A \u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A:", error);
      res.status(500).json({
        success: false,
        message: "\u062D\u062F\u062B \u062E\u0637\u0623 \u0623\u062B\u0646\u0627\u0621 \u062D\u0630\u0641 \u0627\u0644\u062A\u062D\u0648\u064A\u0644\u0627\u062A",
        error: error.message || "\u062E\u0637\u0623 \u062E\u0627\u062F\u0645 \u062F\u0627\u062E\u0644\u064A"
      });
    }
  });
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs7 from "fs";
import path8 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path7 from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path7.resolve(import.meta.dirname, "client", "src"),
      "@shared": path7.resolve(import.meta.dirname, "shared"),
      "@assets": path7.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path7.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path7.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path8.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs7.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path8.resolve(import.meta.dirname, "public");
  if (!fs7.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path8.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.set("trust proxy", 1);
var clientOrigin = process.env.CLIENT_ORIGIN || "https://<MY_DOMAIN>.com";
app.use(cors({ origin: clientOrigin, credentials: true }));
app.use(express2.json({ limit: "50mb" }));
app.use(express2.urlencoded({ extended: false, limit: "50mb" }));
app.use("/uploads", express2.static("public/uploads"));
app.use((req, res, next) => {
  const start = Date.now();
  const path9 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    if (bodyJson && typeof bodyJson === "object") {
      const sanitizedBody = { ...bodyJson };
      if (sanitizedBody.token) sanitizedBody.token = "***";
      if (sanitizedBody.accessToken) sanitizedBody.accessToken = "***";
      if (sanitizedBody.refreshToken) sanitizedBody.refreshToken = "***";
      if (sanitizedBody.jwt) sanitizedBody.jwt = "***";
      capturedJsonResponse = sanitizedBody;
    } else {
      capturedJsonResponse = bodyJson;
    }
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path9.startsWith("/api")) {
      let logLine = `${req.method} ${path9} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const envStatus = getEnvironmentStatus();
  console.log(`\u{1F30D} Environment: ${envStatus.nodeEnv}`);
  console.log(`\u{1F510} JWT_SECRET: ${envStatus.jwtSecretConfigured ? "Configured from environment" : "Using fallback generation"}`);
  if (envStatus.isProduction && envStatus.usingFallback) {
    console.warn("\u26A0\uFE0F DEPLOYMENT RECOMMENDATION: Add JWT_SECRET to your deployment secrets for enhanced security");
  }
  try {
    getJwtSecret();
    console.log("\u2705 JWT secret validation passed at startup");
  } catch (error) {
    console.error("\u{1F6A8} CRITICAL ERROR: JWT secret initialization failed:", error instanceof Error ? error.message : error);
    console.error("\u{1F6A8} This should not happen with the new fallback system. Please check the implementation.");
    process.exit(1);
  }
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    let message = err.message || "Internal Server Error";
    if (err.message?.includes("Connection timeout") || err.message?.includes("connect")) {
      message = "\u062E\u0637\u0623 \u0641\u064A \u0627\u0644\u0627\u062A\u0635\u0627\u0644 \u0628\u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A. \u064A\u062A\u0645 \u0625\u0639\u0627\u062F\u0629 \u0627\u0644\u0645\u062D\u0627\u0648\u0644\u0629...";
      console.log("\u{1F504} \u062E\u0637\u0623 \u0627\u062A\u0635\u0627\u0644 \u0642\u0627\u0639\u062F\u0629 \u0627\u0644\u0628\u064A\u0627\u0646\u0627\u062A:", err.message);
    }
    res.status(status).json({ message });
    if (status === 500) {
      console.error("\u062E\u0637\u0623 \u062E\u0627\u062F\u0645:", err);
    }
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = 5e3;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();
